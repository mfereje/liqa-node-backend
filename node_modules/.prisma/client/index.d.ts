
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model UserRole
 * 
 */
export type UserRole = $Result.DefaultSelection<Prisma.$UserRolePayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model RolePermission
 * 
 */
export type RolePermission = $Result.DefaultSelection<Prisma.$RolePermissionPayload>
/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model Region
 * 
 */
export type Region = $Result.DefaultSelection<Prisma.$RegionPayload>
/**
 * Model City
 * 
 */
export type City = $Result.DefaultSelection<Prisma.$CityPayload>
/**
 * Model Subcity
 * 
 */
export type Subcity = $Result.DefaultSelection<Prisma.$SubcityPayload>
/**
 * Model Message
 * 
 */
export type Message = $Result.DefaultSelection<Prisma.$MessagePayload>
/**
 * Model ShareFile
 * 
 */
export type ShareFile = $Result.DefaultSelection<Prisma.$ShareFilePayload>
/**
 * Model Shareholder
 * 
 */
export type Shareholder = $Result.DefaultSelection<Prisma.$ShareholderPayload>
/**
 * Model ShareholderLog
 * 
 */
export type ShareholderLog = $Result.DefaultSelection<Prisma.$ShareholderLogPayload>
/**
 * Model Share
 * 
 */
export type Share = $Result.DefaultSelection<Prisma.$SharePayload>
/**
 * Model ShareTransaction
 * 
 */
export type ShareTransaction = $Result.DefaultSelection<Prisma.$ShareTransactionPayload>
/**
 * Model Shareholding
 * 
 */
export type Shareholding = $Result.DefaultSelection<Prisma.$ShareholdingPayload>
/**
 * Model ShareTransfer
 * 
 */
export type ShareTransfer = $Result.DefaultSelection<Prisma.$ShareTransferPayload>
/**
 * Model SystemLog
 * 
 */
export type SystemLog = $Result.DefaultSelection<Prisma.$SystemLogPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs>;

  /**
   * `prisma.userRole`: Exposes CRUD operations for the **UserRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserRoles
    * const userRoles = await prisma.userRole.findMany()
    * ```
    */
  get userRole(): Prisma.UserRoleDelegate<ExtArgs>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs>;

  /**
   * `prisma.rolePermission`: Exposes CRUD operations for the **RolePermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RolePermissions
    * const rolePermissions = await prisma.rolePermission.findMany()
    * ```
    */
  get rolePermission(): Prisma.RolePermissionDelegate<ExtArgs>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs>;

  /**
   * `prisma.region`: Exposes CRUD operations for the **Region** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Regions
    * const regions = await prisma.region.findMany()
    * ```
    */
  get region(): Prisma.RegionDelegate<ExtArgs>;

  /**
   * `prisma.city`: Exposes CRUD operations for the **City** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cities
    * const cities = await prisma.city.findMany()
    * ```
    */
  get city(): Prisma.CityDelegate<ExtArgs>;

  /**
   * `prisma.subcity`: Exposes CRUD operations for the **Subcity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subcities
    * const subcities = await prisma.subcity.findMany()
    * ```
    */
  get subcity(): Prisma.SubcityDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **Message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.MessageDelegate<ExtArgs>;

  /**
   * `prisma.shareFile`: Exposes CRUD operations for the **ShareFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShareFiles
    * const shareFiles = await prisma.shareFile.findMany()
    * ```
    */
  get shareFile(): Prisma.ShareFileDelegate<ExtArgs>;

  /**
   * `prisma.shareholder`: Exposes CRUD operations for the **Shareholder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shareholders
    * const shareholders = await prisma.shareholder.findMany()
    * ```
    */
  get shareholder(): Prisma.ShareholderDelegate<ExtArgs>;

  /**
   * `prisma.shareholderLog`: Exposes CRUD operations for the **ShareholderLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShareholderLogs
    * const shareholderLogs = await prisma.shareholderLog.findMany()
    * ```
    */
  get shareholderLog(): Prisma.ShareholderLogDelegate<ExtArgs>;

  /**
   * `prisma.share`: Exposes CRUD operations for the **Share** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shares
    * const shares = await prisma.share.findMany()
    * ```
    */
  get share(): Prisma.ShareDelegate<ExtArgs>;

  /**
   * `prisma.shareTransaction`: Exposes CRUD operations for the **ShareTransaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShareTransactions
    * const shareTransactions = await prisma.shareTransaction.findMany()
    * ```
    */
  get shareTransaction(): Prisma.ShareTransactionDelegate<ExtArgs>;

  /**
   * `prisma.shareholding`: Exposes CRUD operations for the **Shareholding** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shareholdings
    * const shareholdings = await prisma.shareholding.findMany()
    * ```
    */
  get shareholding(): Prisma.ShareholdingDelegate<ExtArgs>;

  /**
   * `prisma.shareTransfer`: Exposes CRUD operations for the **ShareTransfer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ShareTransfers
    * const shareTransfers = await prisma.shareTransfer.findMany()
    * ```
    */
  get shareTransfer(): Prisma.ShareTransferDelegate<ExtArgs>;

  /**
   * `prisma.systemLog`: Exposes CRUD operations for the **SystemLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SystemLogs
    * const systemLogs = await prisma.systemLog.findMany()
    * ```
    */
  get systemLog(): Prisma.SystemLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.19.1
   * Query Engine version: 69d742ee20b815d88e17e54db4a2a7a3b30324e3
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Role: 'Role',
    UserRole: 'UserRole',
    Permission: 'Permission',
    RolePermission: 'RolePermission',
    Address: 'Address',
    Region: 'Region',
    City: 'City',
    Subcity: 'Subcity',
    Message: 'Message',
    ShareFile: 'ShareFile',
    Shareholder: 'Shareholder',
    ShareholderLog: 'ShareholderLog',
    Share: 'Share',
    ShareTransaction: 'ShareTransaction',
    Shareholding: 'Shareholding',
    ShareTransfer: 'ShareTransfer',
    SystemLog: 'SystemLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "role" | "userRole" | "permission" | "rolePermission" | "address" | "region" | "city" | "subcity" | "message" | "shareFile" | "shareholder" | "shareholderLog" | "share" | "shareTransaction" | "shareholding" | "shareTransfer" | "systemLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      UserRole: {
        payload: Prisma.$UserRolePayload<ExtArgs>
        fields: Prisma.UserRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findFirst: {
            args: Prisma.UserRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          findMany: {
            args: Prisma.UserRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>[]
          }
          create: {
            args: Prisma.UserRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          createMany: {
            args: Prisma.UserRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          update: {
            args: Prisma.UserRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          deleteMany: {
            args: Prisma.UserRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserRolePayload>
          }
          aggregate: {
            args: Prisma.UserRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserRole>
          }
          groupBy: {
            args: Prisma.UserRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserRoleCountArgs<ExtArgs>
            result: $Utils.Optional<UserRoleCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      RolePermission: {
        payload: Prisma.$RolePermissionPayload<ExtArgs>
        fields: Prisma.RolePermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RolePermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RolePermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findFirst: {
            args: Prisma.RolePermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RolePermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          findMany: {
            args: Prisma.RolePermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>[]
          }
          create: {
            args: Prisma.RolePermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          createMany: {
            args: Prisma.RolePermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RolePermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          update: {
            args: Prisma.RolePermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          deleteMany: {
            args: Prisma.RolePermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RolePermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RolePermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePermissionPayload>
          }
          aggregate: {
            args: Prisma.RolePermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRolePermission>
          }
          groupBy: {
            args: Prisma.RolePermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RolePermissionCountArgs<ExtArgs>
            result: $Utils.Optional<RolePermissionCountAggregateOutputType> | number
          }
        }
      }
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      Region: {
        payload: Prisma.$RegionPayload<ExtArgs>
        fields: Prisma.RegionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RegionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RegionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findFirst: {
            args: Prisma.RegionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RegionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          findMany: {
            args: Prisma.RegionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>[]
          }
          create: {
            args: Prisma.RegionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          createMany: {
            args: Prisma.RegionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.RegionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          update: {
            args: Prisma.RegionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          deleteMany: {
            args: Prisma.RegionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RegionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RegionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RegionPayload>
          }
          aggregate: {
            args: Prisma.RegionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegion>
          }
          groupBy: {
            args: Prisma.RegionGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegionGroupByOutputType>[]
          }
          count: {
            args: Prisma.RegionCountArgs<ExtArgs>
            result: $Utils.Optional<RegionCountAggregateOutputType> | number
          }
        }
      }
      City: {
        payload: Prisma.$CityPayload<ExtArgs>
        fields: Prisma.CityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          findFirst: {
            args: Prisma.CityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          findMany: {
            args: Prisma.CityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>[]
          }
          create: {
            args: Prisma.CityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          createMany: {
            args: Prisma.CityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          update: {
            args: Prisma.CityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          deleteMany: {
            args: Prisma.CityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CityPayload>
          }
          aggregate: {
            args: Prisma.CityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCity>
          }
          groupBy: {
            args: Prisma.CityGroupByArgs<ExtArgs>
            result: $Utils.Optional<CityGroupByOutputType>[]
          }
          count: {
            args: Prisma.CityCountArgs<ExtArgs>
            result: $Utils.Optional<CityCountAggregateOutputType> | number
          }
        }
      }
      Subcity: {
        payload: Prisma.$SubcityPayload<ExtArgs>
        fields: Prisma.SubcityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubcityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubcityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcityPayload>
          }
          findFirst: {
            args: Prisma.SubcityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubcityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcityPayload>
          }
          findMany: {
            args: Prisma.SubcityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcityPayload>[]
          }
          create: {
            args: Prisma.SubcityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcityPayload>
          }
          createMany: {
            args: Prisma.SubcityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SubcityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcityPayload>
          }
          update: {
            args: Prisma.SubcityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcityPayload>
          }
          deleteMany: {
            args: Prisma.SubcityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubcityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubcityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubcityPayload>
          }
          aggregate: {
            args: Prisma.SubcityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubcity>
          }
          groupBy: {
            args: Prisma.SubcityGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubcityGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubcityCountArgs<ExtArgs>
            result: $Utils.Optional<SubcityCountAggregateOutputType> | number
          }
        }
      }
      Message: {
        payload: Prisma.$MessagePayload<ExtArgs>
        fields: Prisma.MessageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MessageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MessageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findFirst: {
            args: Prisma.MessageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MessageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          findMany: {
            args: Prisma.MessageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>[]
          }
          create: {
            args: Prisma.MessageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          createMany: {
            args: Prisma.MessageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MessageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          update: {
            args: Prisma.MessageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          deleteMany: {
            args: Prisma.MessageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MessageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MessageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MessagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.MessageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.MessageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
      ShareFile: {
        payload: Prisma.$ShareFilePayload<ExtArgs>
        fields: Prisma.ShareFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShareFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShareFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareFilePayload>
          }
          findFirst: {
            args: Prisma.ShareFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShareFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareFilePayload>
          }
          findMany: {
            args: Prisma.ShareFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareFilePayload>[]
          }
          create: {
            args: Prisma.ShareFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareFilePayload>
          }
          createMany: {
            args: Prisma.ShareFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ShareFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareFilePayload>
          }
          update: {
            args: Prisma.ShareFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareFilePayload>
          }
          deleteMany: {
            args: Prisma.ShareFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShareFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShareFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareFilePayload>
          }
          aggregate: {
            args: Prisma.ShareFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShareFile>
          }
          groupBy: {
            args: Prisma.ShareFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShareFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShareFileCountArgs<ExtArgs>
            result: $Utils.Optional<ShareFileCountAggregateOutputType> | number
          }
        }
      }
      Shareholder: {
        payload: Prisma.$ShareholderPayload<ExtArgs>
        fields: Prisma.ShareholderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShareholderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShareholderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderPayload>
          }
          findFirst: {
            args: Prisma.ShareholderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShareholderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderPayload>
          }
          findMany: {
            args: Prisma.ShareholderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderPayload>[]
          }
          create: {
            args: Prisma.ShareholderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderPayload>
          }
          createMany: {
            args: Prisma.ShareholderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ShareholderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderPayload>
          }
          update: {
            args: Prisma.ShareholderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderPayload>
          }
          deleteMany: {
            args: Prisma.ShareholderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShareholderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShareholderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderPayload>
          }
          aggregate: {
            args: Prisma.ShareholderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShareholder>
          }
          groupBy: {
            args: Prisma.ShareholderGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShareholderGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShareholderCountArgs<ExtArgs>
            result: $Utils.Optional<ShareholderCountAggregateOutputType> | number
          }
        }
      }
      ShareholderLog: {
        payload: Prisma.$ShareholderLogPayload<ExtArgs>
        fields: Prisma.ShareholderLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShareholderLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShareholderLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderLogPayload>
          }
          findFirst: {
            args: Prisma.ShareholderLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShareholderLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderLogPayload>
          }
          findMany: {
            args: Prisma.ShareholderLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderLogPayload>[]
          }
          create: {
            args: Prisma.ShareholderLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderLogPayload>
          }
          createMany: {
            args: Prisma.ShareholderLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ShareholderLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderLogPayload>
          }
          update: {
            args: Prisma.ShareholderLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderLogPayload>
          }
          deleteMany: {
            args: Prisma.ShareholderLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShareholderLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShareholderLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholderLogPayload>
          }
          aggregate: {
            args: Prisma.ShareholderLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShareholderLog>
          }
          groupBy: {
            args: Prisma.ShareholderLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShareholderLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShareholderLogCountArgs<ExtArgs>
            result: $Utils.Optional<ShareholderLogCountAggregateOutputType> | number
          }
        }
      }
      Share: {
        payload: Prisma.$SharePayload<ExtArgs>
        fields: Prisma.ShareFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShareFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShareFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>
          }
          findFirst: {
            args: Prisma.ShareFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShareFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>
          }
          findMany: {
            args: Prisma.ShareFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>[]
          }
          create: {
            args: Prisma.ShareCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>
          }
          createMany: {
            args: Prisma.ShareCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ShareDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>
          }
          update: {
            args: Prisma.ShareUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>
          }
          deleteMany: {
            args: Prisma.ShareDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShareUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShareUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SharePayload>
          }
          aggregate: {
            args: Prisma.ShareAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShare>
          }
          groupBy: {
            args: Prisma.ShareGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShareGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShareCountArgs<ExtArgs>
            result: $Utils.Optional<ShareCountAggregateOutputType> | number
          }
        }
      }
      ShareTransaction: {
        payload: Prisma.$ShareTransactionPayload<ExtArgs>
        fields: Prisma.ShareTransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShareTransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShareTransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransactionPayload>
          }
          findFirst: {
            args: Prisma.ShareTransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShareTransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransactionPayload>
          }
          findMany: {
            args: Prisma.ShareTransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransactionPayload>[]
          }
          create: {
            args: Prisma.ShareTransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransactionPayload>
          }
          createMany: {
            args: Prisma.ShareTransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ShareTransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransactionPayload>
          }
          update: {
            args: Prisma.ShareTransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransactionPayload>
          }
          deleteMany: {
            args: Prisma.ShareTransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShareTransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShareTransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransactionPayload>
          }
          aggregate: {
            args: Prisma.ShareTransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShareTransaction>
          }
          groupBy: {
            args: Prisma.ShareTransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShareTransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShareTransactionCountArgs<ExtArgs>
            result: $Utils.Optional<ShareTransactionCountAggregateOutputType> | number
          }
        }
      }
      Shareholding: {
        payload: Prisma.$ShareholdingPayload<ExtArgs>
        fields: Prisma.ShareholdingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShareholdingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholdingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShareholdingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholdingPayload>
          }
          findFirst: {
            args: Prisma.ShareholdingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholdingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShareholdingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholdingPayload>
          }
          findMany: {
            args: Prisma.ShareholdingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholdingPayload>[]
          }
          create: {
            args: Prisma.ShareholdingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholdingPayload>
          }
          createMany: {
            args: Prisma.ShareholdingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ShareholdingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholdingPayload>
          }
          update: {
            args: Prisma.ShareholdingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholdingPayload>
          }
          deleteMany: {
            args: Prisma.ShareholdingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShareholdingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShareholdingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareholdingPayload>
          }
          aggregate: {
            args: Prisma.ShareholdingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShareholding>
          }
          groupBy: {
            args: Prisma.ShareholdingGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShareholdingGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShareholdingCountArgs<ExtArgs>
            result: $Utils.Optional<ShareholdingCountAggregateOutputType> | number
          }
        }
      }
      ShareTransfer: {
        payload: Prisma.$ShareTransferPayload<ExtArgs>
        fields: Prisma.ShareTransferFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ShareTransferFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransferPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ShareTransferFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransferPayload>
          }
          findFirst: {
            args: Prisma.ShareTransferFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransferPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ShareTransferFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransferPayload>
          }
          findMany: {
            args: Prisma.ShareTransferFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransferPayload>[]
          }
          create: {
            args: Prisma.ShareTransferCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransferPayload>
          }
          createMany: {
            args: Prisma.ShareTransferCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ShareTransferDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransferPayload>
          }
          update: {
            args: Prisma.ShareTransferUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransferPayload>
          }
          deleteMany: {
            args: Prisma.ShareTransferDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ShareTransferUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ShareTransferUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ShareTransferPayload>
          }
          aggregate: {
            args: Prisma.ShareTransferAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateShareTransfer>
          }
          groupBy: {
            args: Prisma.ShareTransferGroupByArgs<ExtArgs>
            result: $Utils.Optional<ShareTransferGroupByOutputType>[]
          }
          count: {
            args: Prisma.ShareTransferCountArgs<ExtArgs>
            result: $Utils.Optional<ShareTransferCountAggregateOutputType> | number
          }
        }
      }
      SystemLog: {
        payload: Prisma.$SystemLogPayload<ExtArgs>
        fields: Prisma.SystemLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SystemLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SystemLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          findFirst: {
            args: Prisma.SystemLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SystemLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          findMany: {
            args: Prisma.SystemLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>[]
          }
          create: {
            args: Prisma.SystemLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          createMany: {
            args: Prisma.SystemLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SystemLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          update: {
            args: Prisma.SystemLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          deleteMany: {
            args: Prisma.SystemLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SystemLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SystemLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SystemLogPayload>
          }
          aggregate: {
            args: Prisma.SystemLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSystemLog>
          }
          groupBy: {
            args: Prisma.SystemLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<SystemLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.SystemLogCountArgs<ExtArgs>
            result: $Utils.Optional<SystemLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    roles: number
    messagesSent: number
    messagesReceived: number
    updatedUsers: number
    createdUsers: number
    updatedRoles: number
    createdRoles: number
    updatedPermissions: number
    createdPermissions: number
    updatedShareholders: number
    createdShareholders: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | UserCountOutputTypeCountRolesArgs
    messagesSent?: boolean | UserCountOutputTypeCountMessagesSentArgs
    messagesReceived?: boolean | UserCountOutputTypeCountMessagesReceivedArgs
    updatedUsers?: boolean | UserCountOutputTypeCountUpdatedUsersArgs
    createdUsers?: boolean | UserCountOutputTypeCountCreatedUsersArgs
    updatedRoles?: boolean | UserCountOutputTypeCountUpdatedRolesArgs
    createdRoles?: boolean | UserCountOutputTypeCountCreatedRolesArgs
    updatedPermissions?: boolean | UserCountOutputTypeCountUpdatedPermissionsArgs
    createdPermissions?: boolean | UserCountOutputTypeCountCreatedPermissionsArgs
    updatedShareholders?: boolean | UserCountOutputTypeCountUpdatedShareholdersArgs
    createdShareholders?: boolean | UserCountOutputTypeCountCreatedShareholdersArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdatedShareholdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareholderWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedShareholdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareholderWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
    permissions: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
    permissions?: boolean | RoleCountOutputTypeCountPermissionsArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    roles: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roles?: boolean | PermissionCountOutputTypeCountRolesArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
  }


  /**
   * Count Type AddressCountOutputType
   */

  export type AddressCountOutputType = {
    shareholders: number
  }

  export type AddressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareholders?: boolean | AddressCountOutputTypeCountShareholdersArgs
  }

  // Custom InputTypes
  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressCountOutputType
     */
    select?: AddressCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountShareholdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareholderWhereInput
  }


  /**
   * Count Type RegionCountOutputType
   */

  export type RegionCountOutputType = {
    cities: number
  }

  export type RegionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cities?: boolean | RegionCountOutputTypeCountCitiesArgs
  }

  // Custom InputTypes
  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RegionCountOutputType
     */
    select?: RegionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RegionCountOutputType without action
   */
  export type RegionCountOutputTypeCountCitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CityWhereInput
  }


  /**
   * Count Type CityCountOutputType
   */

  export type CityCountOutputType = {
    subcities: number
  }

  export type CityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subcities?: boolean | CityCountOutputTypeCountSubcitiesArgs
  }

  // Custom InputTypes
  /**
   * CityCountOutputType without action
   */
  export type CityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CityCountOutputType
     */
    select?: CityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CityCountOutputType without action
   */
  export type CityCountOutputTypeCountSubcitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubcityWhereInput
  }


  /**
   * Count Type ShareFileCountOutputType
   */

  export type ShareFileCountOutputType = {
    shareholders: number
  }

  export type ShareFileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareholders?: boolean | ShareFileCountOutputTypeCountShareholdersArgs
  }

  // Custom InputTypes
  /**
   * ShareFileCountOutputType without action
   */
  export type ShareFileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareFileCountOutputType
     */
    select?: ShareFileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShareFileCountOutputType without action
   */
  export type ShareFileCountOutputTypeCountShareholdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareholderWhereInput
  }


  /**
   * Count Type ShareholderCountOutputType
   */

  export type ShareholderCountOutputType = {
    shareholderLogs: number
    shareTransactions: number
    shareholding: number
    fromshareTransfer: number
    tohareTransfer: number
  }

  export type ShareholderCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareholderLogs?: boolean | ShareholderCountOutputTypeCountShareholderLogsArgs
    shareTransactions?: boolean | ShareholderCountOutputTypeCountShareTransactionsArgs
    shareholding?: boolean | ShareholderCountOutputTypeCountShareholdingArgs
    fromshareTransfer?: boolean | ShareholderCountOutputTypeCountFromshareTransferArgs
    tohareTransfer?: boolean | ShareholderCountOutputTypeCountTohareTransferArgs
  }

  // Custom InputTypes
  /**
   * ShareholderCountOutputType without action
   */
  export type ShareholderCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareholderCountOutputType
     */
    select?: ShareholderCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShareholderCountOutputType without action
   */
  export type ShareholderCountOutputTypeCountShareholderLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareholderLogWhereInput
  }

  /**
   * ShareholderCountOutputType without action
   */
  export type ShareholderCountOutputTypeCountShareTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareTransactionWhereInput
  }

  /**
   * ShareholderCountOutputType without action
   */
  export type ShareholderCountOutputTypeCountShareholdingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareholdingWhereInput
  }

  /**
   * ShareholderCountOutputType without action
   */
  export type ShareholderCountOutputTypeCountFromshareTransferArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareTransferWhereInput
  }

  /**
   * ShareholderCountOutputType without action
   */
  export type ShareholderCountOutputTypeCountTohareTransferArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareTransferWhereInput
  }


  /**
   * Count Type ShareCountOutputType
   */

  export type ShareCountOutputType = {
    shareholders: number
  }

  export type ShareCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareholders?: boolean | ShareCountOutputTypeCountShareholdersArgs
  }

  // Custom InputTypes
  /**
   * ShareCountOutputType without action
   */
  export type ShareCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareCountOutputType
     */
    select?: ShareCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShareCountOutputType without action
   */
  export type ShareCountOutputTypeCountShareholdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareholderWhereInput
  }


  /**
   * Count Type ShareholdingCountOutputType
   */

  export type ShareholdingCountOutputType = {
    shareTransaction: number
  }

  export type ShareholdingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareTransaction?: boolean | ShareholdingCountOutputTypeCountShareTransactionArgs
  }

  // Custom InputTypes
  /**
   * ShareholdingCountOutputType without action
   */
  export type ShareholdingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareholdingCountOutputType
     */
    select?: ShareholdingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ShareholdingCountOutputType without action
   */
  export type ShareholdingCountOutputTypeCountShareTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareTransactionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    fullName: string | null
    email: string | null
    phoneNumber: string | null
    password: string | null
    username: string | null
    createdById: string | null
    createdAt: Date | null
    updatedById: string | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    fullName: string | null
    email: string | null
    phoneNumber: string | null
    password: string | null
    username: string | null
    createdById: string | null
    createdAt: Date | null
    updatedById: string | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    fullName: number
    email: number
    phoneNumber: number
    password: number
    username: number
    createdById: number
    createdAt: number
    updatedById: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    password?: true
    username?: true
    createdById?: true
    createdAt?: true
    updatedById?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    password?: true
    username?: true
    createdById?: true
    createdAt?: true
    updatedById?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    fullName?: true
    email?: true
    phoneNumber?: true
    password?: true
    username?: true
    createdById?: true
    createdAt?: true
    updatedById?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username: string | null
    createdById: string
    createdAt: Date
    updatedById: string
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    password?: boolean
    username?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedById?: boolean
    updatedAt?: boolean
    createdBy?: boolean | User$createdByArgs<ExtArgs>
    updatedBy?: boolean | User$updatedByArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    messagesSent?: boolean | User$messagesSentArgs<ExtArgs>
    messagesReceived?: boolean | User$messagesReceivedArgs<ExtArgs>
    updatedUsers?: boolean | User$updatedUsersArgs<ExtArgs>
    createdUsers?: boolean | User$createdUsersArgs<ExtArgs>
    updatedRoles?: boolean | User$updatedRolesArgs<ExtArgs>
    createdRoles?: boolean | User$createdRolesArgs<ExtArgs>
    updatedPermissions?: boolean | User$updatedPermissionsArgs<ExtArgs>
    createdPermissions?: boolean | User$createdPermissionsArgs<ExtArgs>
    updatedShareholders?: boolean | User$updatedShareholdersArgs<ExtArgs>
    createdShareholders?: boolean | User$createdShareholdersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    fullName?: boolean
    email?: boolean
    phoneNumber?: boolean
    password?: boolean
    username?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedById?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | User$createdByArgs<ExtArgs>
    updatedBy?: boolean | User$updatedByArgs<ExtArgs>
    roles?: boolean | User$rolesArgs<ExtArgs>
    messagesSent?: boolean | User$messagesSentArgs<ExtArgs>
    messagesReceived?: boolean | User$messagesReceivedArgs<ExtArgs>
    updatedUsers?: boolean | User$updatedUsersArgs<ExtArgs>
    createdUsers?: boolean | User$createdUsersArgs<ExtArgs>
    updatedRoles?: boolean | User$updatedRolesArgs<ExtArgs>
    createdRoles?: boolean | User$createdRolesArgs<ExtArgs>
    updatedPermissions?: boolean | User$updatedPermissionsArgs<ExtArgs>
    createdPermissions?: boolean | User$createdPermissionsArgs<ExtArgs>
    updatedShareholders?: boolean | User$updatedShareholdersArgs<ExtArgs>
    createdShareholders?: boolean | User$createdShareholdersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
      roles: Prisma.$UserRolePayload<ExtArgs>[]
      messagesSent: Prisma.$MessagePayload<ExtArgs>[]
      messagesReceived: Prisma.$MessagePayload<ExtArgs>[]
      updatedUsers: Prisma.$UserPayload<ExtArgs>[]
      createdUsers: Prisma.$UserPayload<ExtArgs>[]
      updatedRoles: Prisma.$RolePayload<ExtArgs>[]
      createdRoles: Prisma.$RolePayload<ExtArgs>[]
      updatedPermissions: Prisma.$PermissionPayload<ExtArgs>[]
      createdPermissions: Prisma.$PermissionPayload<ExtArgs>[]
      updatedShareholders: Prisma.$ShareholderPayload<ExtArgs>[]
      createdShareholders: Prisma.$ShareholderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fullName: string
      email: string
      phoneNumber: string
      password: string
      username: string | null
      createdById: string
      createdAt: Date
      updatedById: string
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends User$createdByArgs<ExtArgs> = {}>(args?: Subset<T, User$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    updatedBy<T extends User$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    roles<T extends User$rolesArgs<ExtArgs> = {}>(args?: Subset<T, User$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany"> | Null>
    messagesSent<T extends User$messagesSentArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesSentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    messagesReceived<T extends User$messagesReceivedArgs<ExtArgs> = {}>(args?: Subset<T, User$messagesReceivedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany"> | Null>
    updatedUsers<T extends User$updatedUsersArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    createdUsers<T extends User$createdUsersArgs<ExtArgs> = {}>(args?: Subset<T, User$createdUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    updatedRoles<T extends User$updatedRolesArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany"> | Null>
    createdRoles<T extends User$createdRolesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdRolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany"> | Null>
    updatedPermissions<T extends User$updatedPermissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedPermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany"> | Null>
    createdPermissions<T extends User$createdPermissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdPermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany"> | Null>
    updatedShareholders<T extends User$updatedShareholdersArgs<ExtArgs> = {}>(args?: Subset<T, User$updatedShareholdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findMany"> | Null>
    createdShareholders<T extends User$createdShareholdersArgs<ExtArgs> = {}>(args?: Subset<T, User$createdShareholdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly fullName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly createdById: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedById: FieldRef<"User", 'String'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.createdBy
   */
  export type User$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.updatedBy
   */
  export type User$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * User.roles
   */
  export type User$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * User.messagesSent
   */
  export type User$messagesSentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.messagesReceived
   */
  export type User$messagesReceivedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    cursor?: MessageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * User.updatedUsers
   */
  export type User$updatedUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.createdUsers
   */
  export type User$createdUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.updatedRoles
   */
  export type User$updatedRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    cursor?: RoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * User.createdRoles
   */
  export type User$createdRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    cursor?: RoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * User.updatedPermissions
   */
  export type User$updatedPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    cursor?: PermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * User.createdPermissions
   */
  export type User$createdPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    cursor?: PermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * User.updatedShareholders
   */
  export type User$updatedShareholdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
    where?: ShareholderWhereInput
    orderBy?: ShareholderOrderByWithRelationInput | ShareholderOrderByWithRelationInput[]
    cursor?: ShareholderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareholderScalarFieldEnum | ShareholderScalarFieldEnum[]
  }

  /**
   * User.createdShareholders
   */
  export type User$createdShareholdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
    where?: ShareholderWhereInput
    orderBy?: ShareholderOrderByWithRelationInput | ShareholderOrderByWithRelationInput[]
    cursor?: ShareholderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareholderScalarFieldEnum | ShareholderScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdById: string | null
    createdAt: Date | null
    updatedById: string | null
    updatedAt: Date | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdById: string | null
    createdAt: Date | null
    updatedById: string | null
    updatedAt: Date | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    createdById: number
    createdAt: number
    updatedById: number
    updatedAt: number
    _all: number
  }


  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    createdById?: true
    createdAt?: true
    updatedById?: true
    updatedAt?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    createdById?: true
    createdAt?: true
    updatedById?: true
    updatedAt?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    createdById?: true
    createdAt?: true
    updatedById?: true
    updatedAt?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    name: string
    createdById: string
    createdAt: Date
    updatedById: string
    updatedAt: Date
    _count: RoleCountAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedById?: boolean
    updatedAt?: boolean
    createdBy?: boolean | Role$createdByArgs<ExtArgs>
    updatedBy?: boolean | Role$updatedByArgs<ExtArgs>
    users?: boolean | Role$usersArgs<ExtArgs>
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>


  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedById?: boolean
    updatedAt?: boolean
  }

  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Role$createdByArgs<ExtArgs>
    updatedBy?: boolean | Role$updatedByArgs<ExtArgs>
    users?: boolean | Role$usersArgs<ExtArgs>
    permissions?: boolean | Role$permissionsArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
      users: Prisma.$UserRolePayload<ExtArgs>[]
      permissions: Prisma.$RolePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdById: string
      createdAt: Date
      updatedById: string
      updatedAt: Date
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends Role$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Role$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    updatedBy<T extends Role$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Role$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany"> | Null>
    permissions<T extends Role$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, Role$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */ 
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly createdById: FieldRef<"Role", 'String'>
    readonly createdAt: FieldRef<"Role", 'DateTime'>
    readonly updatedById: FieldRef<"Role", 'String'>
    readonly updatedAt: FieldRef<"Role", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
  }

  /**
   * Role.createdBy
   */
  export type Role$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Role.updatedBy
   */
  export type Role$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    cursor?: UserRoleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * Role.permissions
   */
  export type Role$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model UserRole
   */

  export type AggregateUserRole = {
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  export type UserRoleMinAggregateOutputType = {
    userId: string | null
    roleId: string | null
  }

  export type UserRoleMaxAggregateOutputType = {
    userId: string | null
    roleId: string | null
  }

  export type UserRoleCountAggregateOutputType = {
    userId: number
    roleId: number
    _all: number
  }


  export type UserRoleMinAggregateInputType = {
    userId?: true
    roleId?: true
  }

  export type UserRoleMaxAggregateInputType = {
    userId?: true
    roleId?: true
  }

  export type UserRoleCountAggregateInputType = {
    userId?: true
    roleId?: true
    _all?: true
  }

  export type UserRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRole to aggregate.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserRoles
    **/
    _count?: true | UserRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserRoleMaxAggregateInputType
  }

  export type GetUserRoleAggregateType<T extends UserRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateUserRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserRole[P]>
      : GetScalarType<T[P], AggregateUserRole[P]>
  }




  export type UserRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserRoleWhereInput
    orderBy?: UserRoleOrderByWithAggregationInput | UserRoleOrderByWithAggregationInput[]
    by: UserRoleScalarFieldEnum[] | UserRoleScalarFieldEnum
    having?: UserRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserRoleCountAggregateInputType | true
    _min?: UserRoleMinAggregateInputType
    _max?: UserRoleMaxAggregateInputType
  }

  export type UserRoleGroupByOutputType = {
    userId: string
    roleId: string
    _count: UserRoleCountAggregateOutputType | null
    _min: UserRoleMinAggregateOutputType | null
    _max: UserRoleMaxAggregateOutputType | null
  }

  type GetUserRoleGroupByPayload<T extends UserRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
            : GetScalarType<T[P], UserRoleGroupByOutputType[P]>
        }
      >
    >


  export type UserRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    roleId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userRole"]>


  export type UserRoleSelectScalar = {
    userId?: boolean
    roleId?: boolean
  }

  export type UserRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }

  export type $UserRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserRole"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      roleId: string
    }, ExtArgs["result"]["userRole"]>
    composites: {}
  }

  type UserRoleGetPayload<S extends boolean | null | undefined | UserRoleDefaultArgs> = $Result.GetResult<Prisma.$UserRolePayload, S>

  type UserRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserRoleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserRoleCountAggregateInputType | true
    }

  export interface UserRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserRole'], meta: { name: 'UserRole' } }
    /**
     * Find zero or one UserRole that matches the filter.
     * @param {UserRoleFindUniqueArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserRoleFindUniqueArgs>(args: SelectSubset<T, UserRoleFindUniqueArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one UserRole that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserRoleFindUniqueOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, UserRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first UserRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserRoleFindFirstArgs>(args?: SelectSubset<T, UserRoleFindFirstArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first UserRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindFirstOrThrowArgs} args - Arguments to find a UserRole
     * @example
     * // Get one UserRole
     * const userRole = await prisma.userRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, UserRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more UserRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserRoles
     * const userRoles = await prisma.userRole.findMany()
     * 
     * // Get first 10 UserRoles
     * const userRoles = await prisma.userRole.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userRoleWithUserIdOnly = await prisma.userRole.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserRoleFindManyArgs>(args?: SelectSubset<T, UserRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a UserRole.
     * @param {UserRoleCreateArgs} args - Arguments to create a UserRole.
     * @example
     * // Create one UserRole
     * const UserRole = await prisma.userRole.create({
     *   data: {
     *     // ... data to create a UserRole
     *   }
     * })
     * 
     */
    create<T extends UserRoleCreateArgs>(args: SelectSubset<T, UserRoleCreateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many UserRoles.
     * @param {UserRoleCreateManyArgs} args - Arguments to create many UserRoles.
     * @example
     * // Create many UserRoles
     * const userRole = await prisma.userRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserRoleCreateManyArgs>(args?: SelectSubset<T, UserRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserRole.
     * @param {UserRoleDeleteArgs} args - Arguments to delete one UserRole.
     * @example
     * // Delete one UserRole
     * const UserRole = await prisma.userRole.delete({
     *   where: {
     *     // ... filter to delete one UserRole
     *   }
     * })
     * 
     */
    delete<T extends UserRoleDeleteArgs>(args: SelectSubset<T, UserRoleDeleteArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one UserRole.
     * @param {UserRoleUpdateArgs} args - Arguments to update one UserRole.
     * @example
     * // Update one UserRole
     * const userRole = await prisma.userRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserRoleUpdateArgs>(args: SelectSubset<T, UserRoleUpdateArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more UserRoles.
     * @param {UserRoleDeleteManyArgs} args - Arguments to filter UserRoles to delete.
     * @example
     * // Delete a few UserRoles
     * const { count } = await prisma.userRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserRoleDeleteManyArgs>(args?: SelectSubset<T, UserRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserRoles
     * const userRole = await prisma.userRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserRoleUpdateManyArgs>(args: SelectSubset<T, UserRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserRole.
     * @param {UserRoleUpsertArgs} args - Arguments to update or create a UserRole.
     * @example
     * // Update or create a UserRole
     * const userRole = await prisma.userRole.upsert({
     *   create: {
     *     // ... data to create a UserRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserRole we want to update
     *   }
     * })
     */
    upsert<T extends UserRoleUpsertArgs>(args: SelectSubset<T, UserRoleUpsertArgs<ExtArgs>>): Prisma__UserRoleClient<$Result.GetResult<Prisma.$UserRolePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of UserRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleCountArgs} args - Arguments to filter UserRoles to count.
     * @example
     * // Count the number of UserRoles
     * const count = await prisma.userRole.count({
     *   where: {
     *     // ... the filter for the UserRoles we want to count
     *   }
     * })
    **/
    count<T extends UserRoleCountArgs>(
      args?: Subset<T, UserRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserRoleAggregateArgs>(args: Subset<T, UserRoleAggregateArgs>): Prisma.PrismaPromise<GetUserRoleAggregateType<T>>

    /**
     * Group by UserRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserRoleGroupByArgs['orderBy'] }
        : { orderBy?: UserRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserRole model
   */
  readonly fields: UserRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserRole model
   */ 
  interface UserRoleFieldRefs {
    readonly userId: FieldRef<"UserRole", 'String'>
    readonly roleId: FieldRef<"UserRole", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserRole findUnique
   */
  export type UserRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findUniqueOrThrow
   */
  export type UserRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole findFirst
   */
  export type UserRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findFirstOrThrow
   */
  export type UserRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRole to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserRoles.
     */
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole findMany
   */
  export type UserRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter, which UserRoles to fetch.
     */
    where?: UserRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserRoles to fetch.
     */
    orderBy?: UserRoleOrderByWithRelationInput | UserRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserRoles.
     */
    cursor?: UserRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserRoles.
     */
    skip?: number
    distinct?: UserRoleScalarFieldEnum | UserRoleScalarFieldEnum[]
  }

  /**
   * UserRole create
   */
  export type UserRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a UserRole.
     */
    data: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
  }

  /**
   * UserRole createMany
   */
  export type UserRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserRoles.
     */
    data: UserRoleCreateManyInput | UserRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserRole update
   */
  export type UserRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a UserRole.
     */
    data: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
    /**
     * Choose, which UserRole to update.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole updateMany
   */
  export type UserRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserRoles.
     */
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyInput>
    /**
     * Filter which UserRoles to update
     */
    where?: UserRoleWhereInput
  }

  /**
   * UserRole upsert
   */
  export type UserRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the UserRole to update in case it exists.
     */
    where: UserRoleWhereUniqueInput
    /**
     * In case the UserRole found by the `where` argument doesn't exist, create a new UserRole with this data.
     */
    create: XOR<UserRoleCreateInput, UserRoleUncheckedCreateInput>
    /**
     * In case the UserRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserRoleUpdateInput, UserRoleUncheckedUpdateInput>
  }

  /**
   * UserRole delete
   */
  export type UserRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
    /**
     * Filter which UserRole to delete.
     */
    where: UserRoleWhereUniqueInput
  }

  /**
   * UserRole deleteMany
   */
  export type UserRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserRoles to delete
     */
    where?: UserRoleWhereInput
  }

  /**
   * UserRole without action
   */
  export type UserRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserRole
     */
    select?: UserRoleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserRoleInclude<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PermissionMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    createdById: string
    updatedById: string
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdBy?: boolean | Permission$createdByArgs<ExtArgs>
    updatedBy?: boolean | Permission$updatedByArgs<ExtArgs>
    roles?: boolean | Permission$rolesArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>


  export type PermissionSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Permission$createdByArgs<ExtArgs>
    updatedBy?: boolean | Permission$updatedByArgs<ExtArgs>
    roles?: boolean | Permission$rolesArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
      roles: Prisma.$RolePermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
      createdById: string
      updatedById: string
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends Permission$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Permission$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    updatedBy<T extends Permission$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Permission$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    roles<T extends Permission$rolesArgs<ExtArgs> = {}>(args?: Subset<T, Permission$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */ 
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'String'>
    readonly name: FieldRef<"Permission", 'String'>
    readonly createdAt: FieldRef<"Permission", 'DateTime'>
    readonly updatedAt: FieldRef<"Permission", 'DateTime'>
    readonly createdById: FieldRef<"Permission", 'String'>
    readonly updatedById: FieldRef<"Permission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
  }

  /**
   * Permission.createdBy
   */
  export type Permission$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Permission.updatedBy
   */
  export type Permission$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Permission.roles
   */
  export type Permission$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    cursor?: RolePermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model RolePermission
   */

  export type AggregateRolePermission = {
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  export type RolePermissionMinAggregateOutputType = {
    roleId: string | null
    permissionId: string | null
  }

  export type RolePermissionMaxAggregateOutputType = {
    roleId: string | null
    permissionId: string | null
  }

  export type RolePermissionCountAggregateOutputType = {
    roleId: number
    permissionId: number
    _all: number
  }


  export type RolePermissionMinAggregateInputType = {
    roleId?: true
    permissionId?: true
  }

  export type RolePermissionMaxAggregateInputType = {
    roleId?: true
    permissionId?: true
  }

  export type RolePermissionCountAggregateInputType = {
    roleId?: true
    permissionId?: true
    _all?: true
  }

  export type RolePermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermission to aggregate.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RolePermissions
    **/
    _count?: true | RolePermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RolePermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RolePermissionMaxAggregateInputType
  }

  export type GetRolePermissionAggregateType<T extends RolePermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateRolePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRolePermission[P]>
      : GetScalarType<T[P], AggregateRolePermission[P]>
  }




  export type RolePermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RolePermissionWhereInput
    orderBy?: RolePermissionOrderByWithAggregationInput | RolePermissionOrderByWithAggregationInput[]
    by: RolePermissionScalarFieldEnum[] | RolePermissionScalarFieldEnum
    having?: RolePermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RolePermissionCountAggregateInputType | true
    _min?: RolePermissionMinAggregateInputType
    _max?: RolePermissionMaxAggregateInputType
  }

  export type RolePermissionGroupByOutputType = {
    roleId: string
    permissionId: string
    _count: RolePermissionCountAggregateOutputType | null
    _min: RolePermissionMinAggregateOutputType | null
    _max: RolePermissionMaxAggregateOutputType | null
  }

  type GetRolePermissionGroupByPayload<T extends RolePermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RolePermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RolePermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
            : GetScalarType<T[P], RolePermissionGroupByOutputType[P]>
        }
      >
    >


  export type RolePermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roleId?: boolean
    permissionId?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["rolePermission"]>


  export type RolePermissionSelectScalar = {
    roleId?: boolean
    permissionId?: boolean
  }

  export type RolePermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }

  export type $RolePermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RolePermission"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      roleId: string
      permissionId: string
    }, ExtArgs["result"]["rolePermission"]>
    composites: {}
  }

  type RolePermissionGetPayload<S extends boolean | null | undefined | RolePermissionDefaultArgs> = $Result.GetResult<Prisma.$RolePermissionPayload, S>

  type RolePermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RolePermissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RolePermissionCountAggregateInputType | true
    }

  export interface RolePermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RolePermission'], meta: { name: 'RolePermission' } }
    /**
     * Find zero or one RolePermission that matches the filter.
     * @param {RolePermissionFindUniqueArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RolePermissionFindUniqueArgs>(args: SelectSubset<T, RolePermissionFindUniqueArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RolePermission that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RolePermissionFindUniqueOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RolePermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, RolePermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RolePermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RolePermissionFindFirstArgs>(args?: SelectSubset<T, RolePermissionFindFirstArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RolePermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindFirstOrThrowArgs} args - Arguments to find a RolePermission
     * @example
     * // Get one RolePermission
     * const rolePermission = await prisma.rolePermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RolePermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, RolePermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RolePermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany()
     * 
     * // Get first 10 RolePermissions
     * const rolePermissions = await prisma.rolePermission.findMany({ take: 10 })
     * 
     * // Only select the `roleId`
     * const rolePermissionWithRoleIdOnly = await prisma.rolePermission.findMany({ select: { roleId: true } })
     * 
     */
    findMany<T extends RolePermissionFindManyArgs>(args?: SelectSubset<T, RolePermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RolePermission.
     * @param {RolePermissionCreateArgs} args - Arguments to create a RolePermission.
     * @example
     * // Create one RolePermission
     * const RolePermission = await prisma.rolePermission.create({
     *   data: {
     *     // ... data to create a RolePermission
     *   }
     * })
     * 
     */
    create<T extends RolePermissionCreateArgs>(args: SelectSubset<T, RolePermissionCreateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RolePermissions.
     * @param {RolePermissionCreateManyArgs} args - Arguments to create many RolePermissions.
     * @example
     * // Create many RolePermissions
     * const rolePermission = await prisma.rolePermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RolePermissionCreateManyArgs>(args?: SelectSubset<T, RolePermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a RolePermission.
     * @param {RolePermissionDeleteArgs} args - Arguments to delete one RolePermission.
     * @example
     * // Delete one RolePermission
     * const RolePermission = await prisma.rolePermission.delete({
     *   where: {
     *     // ... filter to delete one RolePermission
     *   }
     * })
     * 
     */
    delete<T extends RolePermissionDeleteArgs>(args: SelectSubset<T, RolePermissionDeleteArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RolePermission.
     * @param {RolePermissionUpdateArgs} args - Arguments to update one RolePermission.
     * @example
     * // Update one RolePermission
     * const rolePermission = await prisma.rolePermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RolePermissionUpdateArgs>(args: SelectSubset<T, RolePermissionUpdateArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RolePermissions.
     * @param {RolePermissionDeleteManyArgs} args - Arguments to filter RolePermissions to delete.
     * @example
     * // Delete a few RolePermissions
     * const { count } = await prisma.rolePermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RolePermissionDeleteManyArgs>(args?: SelectSubset<T, RolePermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RolePermissions
     * const rolePermission = await prisma.rolePermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RolePermissionUpdateManyArgs>(args: SelectSubset<T, RolePermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RolePermission.
     * @param {RolePermissionUpsertArgs} args - Arguments to update or create a RolePermission.
     * @example
     * // Update or create a RolePermission
     * const rolePermission = await prisma.rolePermission.upsert({
     *   create: {
     *     // ... data to create a RolePermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RolePermission we want to update
     *   }
     * })
     */
    upsert<T extends RolePermissionUpsertArgs>(args: SelectSubset<T, RolePermissionUpsertArgs<ExtArgs>>): Prisma__RolePermissionClient<$Result.GetResult<Prisma.$RolePermissionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RolePermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionCountArgs} args - Arguments to filter RolePermissions to count.
     * @example
     * // Count the number of RolePermissions
     * const count = await prisma.rolePermission.count({
     *   where: {
     *     // ... the filter for the RolePermissions we want to count
     *   }
     * })
    **/
    count<T extends RolePermissionCountArgs>(
      args?: Subset<T, RolePermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RolePermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RolePermissionAggregateArgs>(args: Subset<T, RolePermissionAggregateArgs>): Prisma.PrismaPromise<GetRolePermissionAggregateType<T>>

    /**
     * Group by RolePermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RolePermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RolePermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RolePermissionGroupByArgs['orderBy'] }
        : { orderBy?: RolePermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RolePermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRolePermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RolePermission model
   */
  readonly fields: RolePermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RolePermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RolePermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RolePermission model
   */ 
  interface RolePermissionFieldRefs {
    readonly roleId: FieldRef<"RolePermission", 'String'>
    readonly permissionId: FieldRef<"RolePermission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * RolePermission findUnique
   */
  export type RolePermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findUniqueOrThrow
   */
  export type RolePermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission findFirst
   */
  export type RolePermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findFirstOrThrow
   */
  export type RolePermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermission to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RolePermissions.
     */
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission findMany
   */
  export type RolePermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter, which RolePermissions to fetch.
     */
    where?: RolePermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RolePermissions to fetch.
     */
    orderBy?: RolePermissionOrderByWithRelationInput | RolePermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RolePermissions.
     */
    cursor?: RolePermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RolePermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RolePermissions.
     */
    skip?: number
    distinct?: RolePermissionScalarFieldEnum | RolePermissionScalarFieldEnum[]
  }

  /**
   * RolePermission create
   */
  export type RolePermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a RolePermission.
     */
    data: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
  }

  /**
   * RolePermission createMany
   */
  export type RolePermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RolePermissions.
     */
    data: RolePermissionCreateManyInput | RolePermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RolePermission update
   */
  export type RolePermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a RolePermission.
     */
    data: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
    /**
     * Choose, which RolePermission to update.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission updateMany
   */
  export type RolePermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RolePermissions.
     */
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyInput>
    /**
     * Filter which RolePermissions to update
     */
    where?: RolePermissionWhereInput
  }

  /**
   * RolePermission upsert
   */
  export type RolePermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the RolePermission to update in case it exists.
     */
    where: RolePermissionWhereUniqueInput
    /**
     * In case the RolePermission found by the `where` argument doesn't exist, create a new RolePermission with this data.
     */
    create: XOR<RolePermissionCreateInput, RolePermissionUncheckedCreateInput>
    /**
     * In case the RolePermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RolePermissionUpdateInput, RolePermissionUncheckedUpdateInput>
  }

  /**
   * RolePermission delete
   */
  export type RolePermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
    /**
     * Filter which RolePermission to delete.
     */
    where: RolePermissionWhereUniqueInput
  }

  /**
   * RolePermission deleteMany
   */
  export type RolePermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RolePermissions to delete
     */
    where?: RolePermissionWhereInput
  }

  /**
   * RolePermission without action
   */
  export type RolePermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RolePermission
     */
    select?: RolePermissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RolePermissionInclude<ExtArgs> | null
  }


  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    id: number | null
    regionId: number | null
    cityOrZoneId: number | null
    subCitiesOrTownId: number | null
    woreda: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type AddressSumAggregateOutputType = {
    id: bigint | null
    regionId: bigint | null
    cityOrZoneId: bigint | null
    subCitiesOrTownId: bigint | null
    woreda: bigint | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type AddressMinAggregateOutputType = {
    id: bigint | null
    kebele: string | null
    houseNumber: string | null
    regionId: bigint | null
    cityOrZoneId: bigint | null
    subCitiesOrTownId: bigint | null
    woreda: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type AddressMaxAggregateOutputType = {
    id: bigint | null
    kebele: string | null
    houseNumber: string | null
    regionId: bigint | null
    cityOrZoneId: bigint | null
    subCitiesOrTownId: bigint | null
    woreda: bigint | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    kebele: number
    houseNumber: number
    regionId: number
    cityOrZoneId: number
    subCitiesOrTownId: number
    woreda: number
    createdAt: number
    updatedAt: number
    createdBy: number
    updatedBy: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    id?: true
    regionId?: true
    cityOrZoneId?: true
    subCitiesOrTownId?: true
    woreda?: true
    createdBy?: true
    updatedBy?: true
  }

  export type AddressSumAggregateInputType = {
    id?: true
    regionId?: true
    cityOrZoneId?: true
    subCitiesOrTownId?: true
    woreda?: true
    createdBy?: true
    updatedBy?: true
  }

  export type AddressMinAggregateInputType = {
    id?: true
    kebele?: true
    houseNumber?: true
    regionId?: true
    cityOrZoneId?: true
    subCitiesOrTownId?: true
    woreda?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    kebele?: true
    houseNumber?: true
    regionId?: true
    cityOrZoneId?: true
    subCitiesOrTownId?: true
    woreda?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    kebele?: true
    houseNumber?: true
    regionId?: true
    cityOrZoneId?: true
    subCitiesOrTownId?: true
    woreda?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: bigint
    kebele: string
    houseNumber: string
    regionId: bigint
    cityOrZoneId: bigint
    subCitiesOrTownId: bigint
    woreda: bigint
    createdAt: Date
    updatedAt: Date
    createdBy: number
    updatedBy: number
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kebele?: boolean
    houseNumber?: boolean
    regionId?: boolean
    cityOrZoneId?: boolean
    subCitiesOrTownId?: boolean
    woreda?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    shareholders?: boolean | Address$shareholdersArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>


  export type AddressSelectScalar = {
    id?: boolean
    kebele?: boolean
    houseNumber?: boolean
    regionId?: boolean
    cityOrZoneId?: boolean
    subCitiesOrTownId?: boolean
    woreda?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }

  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareholders?: boolean | Address$shareholdersArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      shareholders: Prisma.$ShareholderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      kebele: string
      houseNumber: string
      regionId: bigint
      cityOrZoneId: bigint
      subCitiesOrTownId: bigint
      woreda: bigint
      createdAt: Date
      updatedAt: Date
      createdBy: number
      updatedBy: number
    }, ExtArgs["result"]["address"]>
    composites: {}
  }

  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AddressFindUniqueArgs>(args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Address that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs>(args: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AddressFindFirstArgs>(args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs>(args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AddressFindManyArgs>(args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
     */
    create<T extends AddressCreateArgs>(args: SelectSubset<T, AddressCreateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Addresses.
     * @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AddressCreateManyArgs>(args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
     */
    delete<T extends AddressDeleteArgs>(args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AddressUpdateArgs>(args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AddressDeleteManyArgs>(args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AddressUpdateManyArgs>(args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
     */
    upsert<T extends AddressUpsertArgs>(args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shareholders<T extends Address$shareholdersArgs<ExtArgs> = {}>(args?: Subset<T, Address$shareholdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Address model
   */ 
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'BigInt'>
    readonly kebele: FieldRef<"Address", 'String'>
    readonly houseNumber: FieldRef<"Address", 'String'>
    readonly regionId: FieldRef<"Address", 'BigInt'>
    readonly cityOrZoneId: FieldRef<"Address", 'BigInt'>
    readonly subCitiesOrTownId: FieldRef<"Address", 'BigInt'>
    readonly woreda: FieldRef<"Address", 'BigInt'>
    readonly createdAt: FieldRef<"Address", 'DateTime'>
    readonly updatedAt: FieldRef<"Address", 'DateTime'>
    readonly createdBy: FieldRef<"Address", 'Int'>
    readonly updatedBy: FieldRef<"Address", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }

  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
  }

  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }

  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
  }

  /**
   * Address.shareholders
   */
  export type Address$shareholdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
    where?: ShareholderWhereInput
    orderBy?: ShareholderOrderByWithRelationInput | ShareholderOrderByWithRelationInput[]
    cursor?: ShareholderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareholderScalarFieldEnum | ShareholderScalarFieldEnum[]
  }

  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
  }


  /**
   * Model Region
   */

  export type AggregateRegion = {
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  export type RegionMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RegionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RegionCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RegionMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RegionMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RegionCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RegionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Region to aggregate.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Regions
    **/
    _count?: true | RegionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegionMaxAggregateInputType
  }

  export type GetRegionAggregateType<T extends RegionAggregateArgs> = {
        [P in keyof T & keyof AggregateRegion]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegion[P]>
      : GetScalarType<T[P], AggregateRegion[P]>
  }




  export type RegionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RegionWhereInput
    orderBy?: RegionOrderByWithAggregationInput | RegionOrderByWithAggregationInput[]
    by: RegionScalarFieldEnum[] | RegionScalarFieldEnum
    having?: RegionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegionCountAggregateInputType | true
    _min?: RegionMinAggregateInputType
    _max?: RegionMaxAggregateInputType
  }

  export type RegionGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: RegionCountAggregateOutputType | null
    _min: RegionMinAggregateOutputType | null
    _max: RegionMaxAggregateOutputType | null
  }

  type GetRegionGroupByPayload<T extends RegionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegionGroupByOutputType[P]>
            : GetScalarType<T[P], RegionGroupByOutputType[P]>
        }
      >
    >


  export type RegionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    cities?: boolean | Region$citiesArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["region"]>


  export type RegionSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RegionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cities?: boolean | Region$citiesArgs<ExtArgs>
    _count?: boolean | RegionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $RegionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Region"
    objects: {
      cities: Prisma.$CityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["region"]>
    composites: {}
  }

  type RegionGetPayload<S extends boolean | null | undefined | RegionDefaultArgs> = $Result.GetResult<Prisma.$RegionPayload, S>

  type RegionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RegionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RegionCountAggregateInputType | true
    }

  export interface RegionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Region'], meta: { name: 'Region' } }
    /**
     * Find zero or one Region that matches the filter.
     * @param {RegionFindUniqueArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RegionFindUniqueArgs>(args: SelectSubset<T, RegionFindUniqueArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Region that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RegionFindUniqueOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RegionFindUniqueOrThrowArgs>(args: SelectSubset<T, RegionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Region that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RegionFindFirstArgs>(args?: SelectSubset<T, RegionFindFirstArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Region that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindFirstOrThrowArgs} args - Arguments to find a Region
     * @example
     * // Get one Region
     * const region = await prisma.region.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RegionFindFirstOrThrowArgs>(args?: SelectSubset<T, RegionFindFirstOrThrowArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Regions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Regions
     * const regions = await prisma.region.findMany()
     * 
     * // Get first 10 Regions
     * const regions = await prisma.region.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const regionWithIdOnly = await prisma.region.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RegionFindManyArgs>(args?: SelectSubset<T, RegionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Region.
     * @param {RegionCreateArgs} args - Arguments to create a Region.
     * @example
     * // Create one Region
     * const Region = await prisma.region.create({
     *   data: {
     *     // ... data to create a Region
     *   }
     * })
     * 
     */
    create<T extends RegionCreateArgs>(args: SelectSubset<T, RegionCreateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Regions.
     * @param {RegionCreateManyArgs} args - Arguments to create many Regions.
     * @example
     * // Create many Regions
     * const region = await prisma.region.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RegionCreateManyArgs>(args?: SelectSubset<T, RegionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Region.
     * @param {RegionDeleteArgs} args - Arguments to delete one Region.
     * @example
     * // Delete one Region
     * const Region = await prisma.region.delete({
     *   where: {
     *     // ... filter to delete one Region
     *   }
     * })
     * 
     */
    delete<T extends RegionDeleteArgs>(args: SelectSubset<T, RegionDeleteArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Region.
     * @param {RegionUpdateArgs} args - Arguments to update one Region.
     * @example
     * // Update one Region
     * const region = await prisma.region.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RegionUpdateArgs>(args: SelectSubset<T, RegionUpdateArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Regions.
     * @param {RegionDeleteManyArgs} args - Arguments to filter Regions to delete.
     * @example
     * // Delete a few Regions
     * const { count } = await prisma.region.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RegionDeleteManyArgs>(args?: SelectSubset<T, RegionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Regions
     * const region = await prisma.region.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RegionUpdateManyArgs>(args: SelectSubset<T, RegionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Region.
     * @param {RegionUpsertArgs} args - Arguments to update or create a Region.
     * @example
     * // Update or create a Region
     * const region = await prisma.region.upsert({
     *   create: {
     *     // ... data to create a Region
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Region we want to update
     *   }
     * })
     */
    upsert<T extends RegionUpsertArgs>(args: SelectSubset<T, RegionUpsertArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Regions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionCountArgs} args - Arguments to filter Regions to count.
     * @example
     * // Count the number of Regions
     * const count = await prisma.region.count({
     *   where: {
     *     // ... the filter for the Regions we want to count
     *   }
     * })
    **/
    count<T extends RegionCountArgs>(
      args?: Subset<T, RegionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegionAggregateArgs>(args: Subset<T, RegionAggregateArgs>): Prisma.PrismaPromise<GetRegionAggregateType<T>>

    /**
     * Group by Region.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RegionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RegionGroupByArgs['orderBy'] }
        : { orderBy?: RegionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RegionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Region model
   */
  readonly fields: RegionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Region.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RegionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cities<T extends Region$citiesArgs<ExtArgs> = {}>(args?: Subset<T, Region$citiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Region model
   */ 
  interface RegionFieldRefs {
    readonly id: FieldRef<"Region", 'String'>
    readonly name: FieldRef<"Region", 'String'>
    readonly createdAt: FieldRef<"Region", 'DateTime'>
    readonly updatedAt: FieldRef<"Region", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Region findUnique
   */
  export type RegionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findUniqueOrThrow
   */
  export type RegionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region findFirst
   */
  export type RegionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findFirstOrThrow
   */
  export type RegionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Region to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Regions.
     */
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region findMany
   */
  export type RegionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter, which Regions to fetch.
     */
    where?: RegionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Regions to fetch.
     */
    orderBy?: RegionOrderByWithRelationInput | RegionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Regions.
     */
    cursor?: RegionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Regions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Regions.
     */
    skip?: number
    distinct?: RegionScalarFieldEnum | RegionScalarFieldEnum[]
  }

  /**
   * Region create
   */
  export type RegionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to create a Region.
     */
    data: XOR<RegionCreateInput, RegionUncheckedCreateInput>
  }

  /**
   * Region createMany
   */
  export type RegionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Regions.
     */
    data: RegionCreateManyInput | RegionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Region update
   */
  export type RegionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The data needed to update a Region.
     */
    data: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
    /**
     * Choose, which Region to update.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region updateMany
   */
  export type RegionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Regions.
     */
    data: XOR<RegionUpdateManyMutationInput, RegionUncheckedUpdateManyInput>
    /**
     * Filter which Regions to update
     */
    where?: RegionWhereInput
  }

  /**
   * Region upsert
   */
  export type RegionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * The filter to search for the Region to update in case it exists.
     */
    where: RegionWhereUniqueInput
    /**
     * In case the Region found by the `where` argument doesn't exist, create a new Region with this data.
     */
    create: XOR<RegionCreateInput, RegionUncheckedCreateInput>
    /**
     * In case the Region was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RegionUpdateInput, RegionUncheckedUpdateInput>
  }

  /**
   * Region delete
   */
  export type RegionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
    /**
     * Filter which Region to delete.
     */
    where: RegionWhereUniqueInput
  }

  /**
   * Region deleteMany
   */
  export type RegionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Regions to delete
     */
    where?: RegionWhereInput
  }

  /**
   * Region.cities
   */
  export type Region$citiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    where?: CityWhereInput
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    cursor?: CityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * Region without action
   */
  export type RegionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Region
     */
    select?: RegionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RegionInclude<ExtArgs> | null
  }


  /**
   * Model City
   */

  export type AggregateCity = {
    _count: CityCountAggregateOutputType | null
    _min: CityMinAggregateOutputType | null
    _max: CityMaxAggregateOutputType | null
  }

  export type CityMinAggregateOutputType = {
    id: string | null
    name: string | null
    regionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CityMaxAggregateOutputType = {
    id: string | null
    name: string | null
    regionId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CityCountAggregateOutputType = {
    id: number
    name: number
    regionId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CityMinAggregateInputType = {
    id?: true
    name?: true
    regionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CityMaxAggregateInputType = {
    id?: true
    name?: true
    regionId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CityCountAggregateInputType = {
    id?: true
    name?: true
    regionId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which City to aggregate.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cities
    **/
    _count?: true | CityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CityMaxAggregateInputType
  }

  export type GetCityAggregateType<T extends CityAggregateArgs> = {
        [P in keyof T & keyof AggregateCity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCity[P]>
      : GetScalarType<T[P], AggregateCity[P]>
  }




  export type CityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CityWhereInput
    orderBy?: CityOrderByWithAggregationInput | CityOrderByWithAggregationInput[]
    by: CityScalarFieldEnum[] | CityScalarFieldEnum
    having?: CityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CityCountAggregateInputType | true
    _min?: CityMinAggregateInputType
    _max?: CityMaxAggregateInputType
  }

  export type CityGroupByOutputType = {
    id: string
    name: string
    regionId: string
    createdAt: Date
    updatedAt: Date
    _count: CityCountAggregateOutputType | null
    _min: CityMinAggregateOutputType | null
    _max: CityMaxAggregateOutputType | null
  }

  type GetCityGroupByPayload<T extends CityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CityGroupByOutputType[P]>
            : GetScalarType<T[P], CityGroupByOutputType[P]>
        }
      >
    >


  export type CitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    regionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    region?: boolean | RegionDefaultArgs<ExtArgs>
    subcities?: boolean | City$subcitiesArgs<ExtArgs>
    _count?: boolean | CityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["city"]>


  export type CitySelectScalar = {
    id?: boolean
    name?: boolean
    regionId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    region?: boolean | RegionDefaultArgs<ExtArgs>
    subcities?: boolean | City$subcitiesArgs<ExtArgs>
    _count?: boolean | CityCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "City"
    objects: {
      region: Prisma.$RegionPayload<ExtArgs>
      subcities: Prisma.$SubcityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      regionId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["city"]>
    composites: {}
  }

  type CityGetPayload<S extends boolean | null | undefined | CityDefaultArgs> = $Result.GetResult<Prisma.$CityPayload, S>

  type CityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CityCountAggregateInputType | true
    }

  export interface CityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['City'], meta: { name: 'City' } }
    /**
     * Find zero or one City that matches the filter.
     * @param {CityFindUniqueArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CityFindUniqueArgs>(args: SelectSubset<T, CityFindUniqueArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one City that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CityFindUniqueOrThrowArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CityFindUniqueOrThrowArgs>(args: SelectSubset<T, CityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first City that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindFirstArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CityFindFirstArgs>(args?: SelectSubset<T, CityFindFirstArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first City that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindFirstOrThrowArgs} args - Arguments to find a City
     * @example
     * // Get one City
     * const city = await prisma.city.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CityFindFirstOrThrowArgs>(args?: SelectSubset<T, CityFindFirstOrThrowArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cities
     * const cities = await prisma.city.findMany()
     * 
     * // Get first 10 Cities
     * const cities = await prisma.city.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const cityWithIdOnly = await prisma.city.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CityFindManyArgs>(args?: SelectSubset<T, CityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a City.
     * @param {CityCreateArgs} args - Arguments to create a City.
     * @example
     * // Create one City
     * const City = await prisma.city.create({
     *   data: {
     *     // ... data to create a City
     *   }
     * })
     * 
     */
    create<T extends CityCreateArgs>(args: SelectSubset<T, CityCreateArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cities.
     * @param {CityCreateManyArgs} args - Arguments to create many Cities.
     * @example
     * // Create many Cities
     * const city = await prisma.city.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CityCreateManyArgs>(args?: SelectSubset<T, CityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a City.
     * @param {CityDeleteArgs} args - Arguments to delete one City.
     * @example
     * // Delete one City
     * const City = await prisma.city.delete({
     *   where: {
     *     // ... filter to delete one City
     *   }
     * })
     * 
     */
    delete<T extends CityDeleteArgs>(args: SelectSubset<T, CityDeleteArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one City.
     * @param {CityUpdateArgs} args - Arguments to update one City.
     * @example
     * // Update one City
     * const city = await prisma.city.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CityUpdateArgs>(args: SelectSubset<T, CityUpdateArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cities.
     * @param {CityDeleteManyArgs} args - Arguments to filter Cities to delete.
     * @example
     * // Delete a few Cities
     * const { count } = await prisma.city.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CityDeleteManyArgs>(args?: SelectSubset<T, CityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cities
     * const city = await prisma.city.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CityUpdateManyArgs>(args: SelectSubset<T, CityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one City.
     * @param {CityUpsertArgs} args - Arguments to update or create a City.
     * @example
     * // Update or create a City
     * const city = await prisma.city.upsert({
     *   create: {
     *     // ... data to create a City
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the City we want to update
     *   }
     * })
     */
    upsert<T extends CityUpsertArgs>(args: SelectSubset<T, CityUpsertArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityCountArgs} args - Arguments to filter Cities to count.
     * @example
     * // Count the number of Cities
     * const count = await prisma.city.count({
     *   where: {
     *     // ... the filter for the Cities we want to count
     *   }
     * })
    **/
    count<T extends CityCountArgs>(
      args?: Subset<T, CityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a City.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CityAggregateArgs>(args: Subset<T, CityAggregateArgs>): Prisma.PrismaPromise<GetCityAggregateType<T>>

    /**
     * Group by City.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CityGroupByArgs['orderBy'] }
        : { orderBy?: CityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the City model
   */
  readonly fields: CityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for City.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    region<T extends RegionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RegionDefaultArgs<ExtArgs>>): Prisma__RegionClient<$Result.GetResult<Prisma.$RegionPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    subcities<T extends City$subcitiesArgs<ExtArgs> = {}>(args?: Subset<T, City$subcitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubcityPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the City model
   */ 
  interface CityFieldRefs {
    readonly id: FieldRef<"City", 'String'>
    readonly name: FieldRef<"City", 'String'>
    readonly regionId: FieldRef<"City", 'String'>
    readonly createdAt: FieldRef<"City", 'DateTime'>
    readonly updatedAt: FieldRef<"City", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * City findUnique
   */
  export type CityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City findUniqueOrThrow
   */
  export type CityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City findFirst
   */
  export type CityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cities.
     */
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * City findFirstOrThrow
   */
  export type CityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which City to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cities.
     */
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * City findMany
   */
  export type CityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter, which Cities to fetch.
     */
    where?: CityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cities to fetch.
     */
    orderBy?: CityOrderByWithRelationInput | CityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cities.
     */
    cursor?: CityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cities.
     */
    skip?: number
    distinct?: CityScalarFieldEnum | CityScalarFieldEnum[]
  }

  /**
   * City create
   */
  export type CityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * The data needed to create a City.
     */
    data: XOR<CityCreateInput, CityUncheckedCreateInput>
  }

  /**
   * City createMany
   */
  export type CityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cities.
     */
    data: CityCreateManyInput | CityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * City update
   */
  export type CityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * The data needed to update a City.
     */
    data: XOR<CityUpdateInput, CityUncheckedUpdateInput>
    /**
     * Choose, which City to update.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City updateMany
   */
  export type CityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cities.
     */
    data: XOR<CityUpdateManyMutationInput, CityUncheckedUpdateManyInput>
    /**
     * Filter which Cities to update
     */
    where?: CityWhereInput
  }

  /**
   * City upsert
   */
  export type CityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * The filter to search for the City to update in case it exists.
     */
    where: CityWhereUniqueInput
    /**
     * In case the City found by the `where` argument doesn't exist, create a new City with this data.
     */
    create: XOR<CityCreateInput, CityUncheckedCreateInput>
    /**
     * In case the City was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CityUpdateInput, CityUncheckedUpdateInput>
  }

  /**
   * City delete
   */
  export type CityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
    /**
     * Filter which City to delete.
     */
    where: CityWhereUniqueInput
  }

  /**
   * City deleteMany
   */
  export type CityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cities to delete
     */
    where?: CityWhereInput
  }

  /**
   * City.subcities
   */
  export type City$subcitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcity
     */
    select?: SubcitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcityInclude<ExtArgs> | null
    where?: SubcityWhereInput
    orderBy?: SubcityOrderByWithRelationInput | SubcityOrderByWithRelationInput[]
    cursor?: SubcityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubcityScalarFieldEnum | SubcityScalarFieldEnum[]
  }

  /**
   * City without action
   */
  export type CityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the City
     */
    select?: CitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CityInclude<ExtArgs> | null
  }


  /**
   * Model Subcity
   */

  export type AggregateSubcity = {
    _count: SubcityCountAggregateOutputType | null
    _min: SubcityMinAggregateOutputType | null
    _max: SubcityMaxAggregateOutputType | null
  }

  export type SubcityMinAggregateOutputType = {
    id: string | null
    name: string | null
    cityId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubcityMaxAggregateOutputType = {
    id: string | null
    name: string | null
    cityId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubcityCountAggregateOutputType = {
    id: number
    name: number
    cityId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubcityMinAggregateInputType = {
    id?: true
    name?: true
    cityId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubcityMaxAggregateInputType = {
    id?: true
    name?: true
    cityId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubcityCountAggregateInputType = {
    id?: true
    name?: true
    cityId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubcityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subcity to aggregate.
     */
    where?: SubcityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subcities to fetch.
     */
    orderBy?: SubcityOrderByWithRelationInput | SubcityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubcityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subcities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subcities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subcities
    **/
    _count?: true | SubcityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubcityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubcityMaxAggregateInputType
  }

  export type GetSubcityAggregateType<T extends SubcityAggregateArgs> = {
        [P in keyof T & keyof AggregateSubcity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubcity[P]>
      : GetScalarType<T[P], AggregateSubcity[P]>
  }




  export type SubcityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubcityWhereInput
    orderBy?: SubcityOrderByWithAggregationInput | SubcityOrderByWithAggregationInput[]
    by: SubcityScalarFieldEnum[] | SubcityScalarFieldEnum
    having?: SubcityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubcityCountAggregateInputType | true
    _min?: SubcityMinAggregateInputType
    _max?: SubcityMaxAggregateInputType
  }

  export type SubcityGroupByOutputType = {
    id: string
    name: string
    cityId: string
    createdAt: Date
    updatedAt: Date
    _count: SubcityCountAggregateOutputType | null
    _min: SubcityMinAggregateOutputType | null
    _max: SubcityMaxAggregateOutputType | null
  }

  type GetSubcityGroupByPayload<T extends SubcityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubcityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubcityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubcityGroupByOutputType[P]>
            : GetScalarType<T[P], SubcityGroupByOutputType[P]>
        }
      >
    >


  export type SubcitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    cityId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    city?: boolean | CityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subcity"]>


  export type SubcitySelectScalar = {
    id?: boolean
    name?: boolean
    cityId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubcityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    city?: boolean | CityDefaultArgs<ExtArgs>
  }

  export type $SubcityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subcity"
    objects: {
      city: Prisma.$CityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      cityId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subcity"]>
    composites: {}
  }

  type SubcityGetPayload<S extends boolean | null | undefined | SubcityDefaultArgs> = $Result.GetResult<Prisma.$SubcityPayload, S>

  type SubcityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubcityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubcityCountAggregateInputType | true
    }

  export interface SubcityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subcity'], meta: { name: 'Subcity' } }
    /**
     * Find zero or one Subcity that matches the filter.
     * @param {SubcityFindUniqueArgs} args - Arguments to find a Subcity
     * @example
     * // Get one Subcity
     * const subcity = await prisma.subcity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubcityFindUniqueArgs>(args: SelectSubset<T, SubcityFindUniqueArgs<ExtArgs>>): Prisma__SubcityClient<$Result.GetResult<Prisma.$SubcityPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Subcity that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SubcityFindUniqueOrThrowArgs} args - Arguments to find a Subcity
     * @example
     * // Get one Subcity
     * const subcity = await prisma.subcity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubcityFindUniqueOrThrowArgs>(args: SelectSubset<T, SubcityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubcityClient<$Result.GetResult<Prisma.$SubcityPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Subcity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcityFindFirstArgs} args - Arguments to find a Subcity
     * @example
     * // Get one Subcity
     * const subcity = await prisma.subcity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubcityFindFirstArgs>(args?: SelectSubset<T, SubcityFindFirstArgs<ExtArgs>>): Prisma__SubcityClient<$Result.GetResult<Prisma.$SubcityPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Subcity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcityFindFirstOrThrowArgs} args - Arguments to find a Subcity
     * @example
     * // Get one Subcity
     * const subcity = await prisma.subcity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubcityFindFirstOrThrowArgs>(args?: SelectSubset<T, SubcityFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubcityClient<$Result.GetResult<Prisma.$SubcityPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Subcities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subcities
     * const subcities = await prisma.subcity.findMany()
     * 
     * // Get first 10 Subcities
     * const subcities = await prisma.subcity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subcityWithIdOnly = await prisma.subcity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubcityFindManyArgs>(args?: SelectSubset<T, SubcityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubcityPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Subcity.
     * @param {SubcityCreateArgs} args - Arguments to create a Subcity.
     * @example
     * // Create one Subcity
     * const Subcity = await prisma.subcity.create({
     *   data: {
     *     // ... data to create a Subcity
     *   }
     * })
     * 
     */
    create<T extends SubcityCreateArgs>(args: SelectSubset<T, SubcityCreateArgs<ExtArgs>>): Prisma__SubcityClient<$Result.GetResult<Prisma.$SubcityPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Subcities.
     * @param {SubcityCreateManyArgs} args - Arguments to create many Subcities.
     * @example
     * // Create many Subcities
     * const subcity = await prisma.subcity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubcityCreateManyArgs>(args?: SelectSubset<T, SubcityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subcity.
     * @param {SubcityDeleteArgs} args - Arguments to delete one Subcity.
     * @example
     * // Delete one Subcity
     * const Subcity = await prisma.subcity.delete({
     *   where: {
     *     // ... filter to delete one Subcity
     *   }
     * })
     * 
     */
    delete<T extends SubcityDeleteArgs>(args: SelectSubset<T, SubcityDeleteArgs<ExtArgs>>): Prisma__SubcityClient<$Result.GetResult<Prisma.$SubcityPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Subcity.
     * @param {SubcityUpdateArgs} args - Arguments to update one Subcity.
     * @example
     * // Update one Subcity
     * const subcity = await prisma.subcity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubcityUpdateArgs>(args: SelectSubset<T, SubcityUpdateArgs<ExtArgs>>): Prisma__SubcityClient<$Result.GetResult<Prisma.$SubcityPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Subcities.
     * @param {SubcityDeleteManyArgs} args - Arguments to filter Subcities to delete.
     * @example
     * // Delete a few Subcities
     * const { count } = await prisma.subcity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubcityDeleteManyArgs>(args?: SelectSubset<T, SubcityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subcities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subcities
     * const subcity = await prisma.subcity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubcityUpdateManyArgs>(args: SelectSubset<T, SubcityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subcity.
     * @param {SubcityUpsertArgs} args - Arguments to update or create a Subcity.
     * @example
     * // Update or create a Subcity
     * const subcity = await prisma.subcity.upsert({
     *   create: {
     *     // ... data to create a Subcity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subcity we want to update
     *   }
     * })
     */
    upsert<T extends SubcityUpsertArgs>(args: SelectSubset<T, SubcityUpsertArgs<ExtArgs>>): Prisma__SubcityClient<$Result.GetResult<Prisma.$SubcityPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Subcities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcityCountArgs} args - Arguments to filter Subcities to count.
     * @example
     * // Count the number of Subcities
     * const count = await prisma.subcity.count({
     *   where: {
     *     // ... the filter for the Subcities we want to count
     *   }
     * })
    **/
    count<T extends SubcityCountArgs>(
      args?: Subset<T, SubcityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubcityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subcity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubcityAggregateArgs>(args: Subset<T, SubcityAggregateArgs>): Prisma.PrismaPromise<GetSubcityAggregateType<T>>

    /**
     * Group by Subcity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubcityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubcityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubcityGroupByArgs['orderBy'] }
        : { orderBy?: SubcityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubcityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubcityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subcity model
   */
  readonly fields: SubcityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subcity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubcityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    city<T extends CityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CityDefaultArgs<ExtArgs>>): Prisma__CityClient<$Result.GetResult<Prisma.$CityPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subcity model
   */ 
  interface SubcityFieldRefs {
    readonly id: FieldRef<"Subcity", 'String'>
    readonly name: FieldRef<"Subcity", 'String'>
    readonly cityId: FieldRef<"Subcity", 'String'>
    readonly createdAt: FieldRef<"Subcity", 'DateTime'>
    readonly updatedAt: FieldRef<"Subcity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subcity findUnique
   */
  export type SubcityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcity
     */
    select?: SubcitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcityInclude<ExtArgs> | null
    /**
     * Filter, which Subcity to fetch.
     */
    where: SubcityWhereUniqueInput
  }

  /**
   * Subcity findUniqueOrThrow
   */
  export type SubcityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcity
     */
    select?: SubcitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcityInclude<ExtArgs> | null
    /**
     * Filter, which Subcity to fetch.
     */
    where: SubcityWhereUniqueInput
  }

  /**
   * Subcity findFirst
   */
  export type SubcityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcity
     */
    select?: SubcitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcityInclude<ExtArgs> | null
    /**
     * Filter, which Subcity to fetch.
     */
    where?: SubcityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subcities to fetch.
     */
    orderBy?: SubcityOrderByWithRelationInput | SubcityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subcities.
     */
    cursor?: SubcityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subcities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subcities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subcities.
     */
    distinct?: SubcityScalarFieldEnum | SubcityScalarFieldEnum[]
  }

  /**
   * Subcity findFirstOrThrow
   */
  export type SubcityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcity
     */
    select?: SubcitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcityInclude<ExtArgs> | null
    /**
     * Filter, which Subcity to fetch.
     */
    where?: SubcityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subcities to fetch.
     */
    orderBy?: SubcityOrderByWithRelationInput | SubcityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subcities.
     */
    cursor?: SubcityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subcities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subcities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subcities.
     */
    distinct?: SubcityScalarFieldEnum | SubcityScalarFieldEnum[]
  }

  /**
   * Subcity findMany
   */
  export type SubcityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcity
     */
    select?: SubcitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcityInclude<ExtArgs> | null
    /**
     * Filter, which Subcities to fetch.
     */
    where?: SubcityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subcities to fetch.
     */
    orderBy?: SubcityOrderByWithRelationInput | SubcityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subcities.
     */
    cursor?: SubcityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subcities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subcities.
     */
    skip?: number
    distinct?: SubcityScalarFieldEnum | SubcityScalarFieldEnum[]
  }

  /**
   * Subcity create
   */
  export type SubcityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcity
     */
    select?: SubcitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcityInclude<ExtArgs> | null
    /**
     * The data needed to create a Subcity.
     */
    data: XOR<SubcityCreateInput, SubcityUncheckedCreateInput>
  }

  /**
   * Subcity createMany
   */
  export type SubcityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subcities.
     */
    data: SubcityCreateManyInput | SubcityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subcity update
   */
  export type SubcityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcity
     */
    select?: SubcitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcityInclude<ExtArgs> | null
    /**
     * The data needed to update a Subcity.
     */
    data: XOR<SubcityUpdateInput, SubcityUncheckedUpdateInput>
    /**
     * Choose, which Subcity to update.
     */
    where: SubcityWhereUniqueInput
  }

  /**
   * Subcity updateMany
   */
  export type SubcityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subcities.
     */
    data: XOR<SubcityUpdateManyMutationInput, SubcityUncheckedUpdateManyInput>
    /**
     * Filter which Subcities to update
     */
    where?: SubcityWhereInput
  }

  /**
   * Subcity upsert
   */
  export type SubcityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcity
     */
    select?: SubcitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcityInclude<ExtArgs> | null
    /**
     * The filter to search for the Subcity to update in case it exists.
     */
    where: SubcityWhereUniqueInput
    /**
     * In case the Subcity found by the `where` argument doesn't exist, create a new Subcity with this data.
     */
    create: XOR<SubcityCreateInput, SubcityUncheckedCreateInput>
    /**
     * In case the Subcity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubcityUpdateInput, SubcityUncheckedUpdateInput>
  }

  /**
   * Subcity delete
   */
  export type SubcityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcity
     */
    select?: SubcitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcityInclude<ExtArgs> | null
    /**
     * Filter which Subcity to delete.
     */
    where: SubcityWhereUniqueInput
  }

  /**
   * Subcity deleteMany
   */
  export type SubcityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subcities to delete
     */
    where?: SubcityWhereInput
  }

  /**
   * Subcity without action
   */
  export type SubcityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subcity
     */
    select?: SubcitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubcityInclude<ExtArgs> | null
  }


  /**
   * Model Message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageAvgAggregateOutputType = {
    createdBy: number | null
    checkedBy: number | null
  }

  export type MessageSumAggregateOutputType = {
    createdBy: number | null
    checkedBy: number | null
  }

  export type MessageMinAggregateOutputType = {
    id: string | null
    senderId: string | null
    receiverId: string | null
    netContent: string | null
    content: string | null
    messageType: string | null
    createdBy: number | null
    checkedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    status: boolean | null
  }

  export type MessageMaxAggregateOutputType = {
    id: string | null
    senderId: string | null
    receiverId: string | null
    netContent: string | null
    content: string | null
    messageType: string | null
    createdBy: number | null
    checkedBy: number | null
    createdAt: Date | null
    updatedAt: Date | null
    status: boolean | null
  }

  export type MessageCountAggregateOutputType = {
    id: number
    senderId: number
    receiverId: number
    netContent: number
    content: number
    messageType: number
    createdBy: number
    checkedBy: number
    createdAt: number
    updatedAt: number
    status: number
    _all: number
  }


  export type MessageAvgAggregateInputType = {
    createdBy?: true
    checkedBy?: true
  }

  export type MessageSumAggregateInputType = {
    createdBy?: true
    checkedBy?: true
  }

  export type MessageMinAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    netContent?: true
    content?: true
    messageType?: true
    createdBy?: true
    checkedBy?: true
    createdAt?: true
    updatedAt?: true
    status?: true
  }

  export type MessageMaxAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    netContent?: true
    content?: true
    messageType?: true
    createdBy?: true
    checkedBy?: true
    createdAt?: true
    updatedAt?: true
    status?: true
  }

  export type MessageCountAggregateInputType = {
    id?: true
    senderId?: true
    receiverId?: true
    netContent?: true
    content?: true
    messageType?: true
    createdBy?: true
    checkedBy?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Message to aggregate.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MessageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MessageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type MessageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MessageWhereInput
    orderBy?: MessageOrderByWithAggregationInput | MessageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: MessageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _avg?: MessageAvgAggregateInputType
    _sum?: MessageSumAggregateInputType
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    id: string
    senderId: string
    receiverId: string
    netContent: string
    content: string
    messageType: string
    createdBy: number | null
    checkedBy: number | null
    createdAt: Date
    updatedAt: Date
    status: boolean
    _count: MessageCountAggregateOutputType | null
    _avg: MessageAvgAggregateOutputType | null
    _sum: MessageSumAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends MessageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type MessageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    netContent?: boolean
    content?: boolean
    messageType?: boolean
    createdBy?: boolean
    checkedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>


  export type MessageSelectScalar = {
    id?: boolean
    senderId?: boolean
    receiverId?: boolean
    netContent?: boolean
    content?: boolean
    messageType?: boolean
    createdBy?: boolean
    checkedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
  }

  export type MessageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sender?: boolean | UserDefaultArgs<ExtArgs>
    receiver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MessagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Message"
    objects: {
      sender: Prisma.$UserPayload<ExtArgs>
      receiver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      senderId: string
      receiverId: string
      netContent: string
      content: string
      messageType: string
      createdBy: number | null
      checkedBy: number | null
      createdAt: Date
      updatedAt: Date
      status: boolean
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type MessageGetPayload<S extends boolean | null | undefined | MessageDefaultArgs> = $Result.GetResult<Prisma.$MessagePayload, S>

  type MessageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MessageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface MessageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Message'], meta: { name: 'Message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {MessageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MessageFindUniqueArgs>(args: SelectSubset<T, MessageFindUniqueArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MessageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MessageFindUniqueOrThrowArgs>(args: SelectSubset<T, MessageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MessageFindFirstArgs>(args?: SelectSubset<T, MessageFindFirstArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MessageFindFirstOrThrowArgs>(args?: SelectSubset<T, MessageFindFirstOrThrowArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const messageWithIdOnly = await prisma.message.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MessageFindManyArgs>(args?: SelectSubset<T, MessageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {MessageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends MessageCreateArgs>(args: SelectSubset<T, MessageCreateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {MessageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MessageCreateManyArgs>(args?: SelectSubset<T, MessageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {MessageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends MessageDeleteArgs>(args: SelectSubset<T, MessageDeleteArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {MessageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MessageUpdateArgs>(args: SelectSubset<T, MessageUpdateArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {MessageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MessageDeleteManyArgs>(args?: SelectSubset<T, MessageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MessageUpdateManyArgs>(args: SelectSubset<T, MessageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {MessageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends MessageUpsertArgs>(args: SelectSubset<T, MessageUpsertArgs<ExtArgs>>): Prisma__MessageClient<$Result.GetResult<Prisma.$MessagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends MessageCountArgs>(
      args?: Subset<T, MessageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MessageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MessageGroupByArgs['orderBy'] }
        : { orderBy?: MessageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MessageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Message model
   */
  readonly fields: MessageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MessageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sender<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    receiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Message model
   */ 
  interface MessageFieldRefs {
    readonly id: FieldRef<"Message", 'String'>
    readonly senderId: FieldRef<"Message", 'String'>
    readonly receiverId: FieldRef<"Message", 'String'>
    readonly netContent: FieldRef<"Message", 'String'>
    readonly content: FieldRef<"Message", 'String'>
    readonly messageType: FieldRef<"Message", 'String'>
    readonly createdBy: FieldRef<"Message", 'Int'>
    readonly checkedBy: FieldRef<"Message", 'Int'>
    readonly createdAt: FieldRef<"Message", 'DateTime'>
    readonly updatedAt: FieldRef<"Message", 'DateTime'>
    readonly status: FieldRef<"Message", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Message findUnique
   */
  export type MessageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findUniqueOrThrow
   */
  export type MessageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message findFirst
   */
  export type MessageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findFirstOrThrow
   */
  export type MessageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Message to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message findMany
   */
  export type MessageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter, which Messages to fetch.
     */
    where?: MessageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Messages to fetch.
     */
    orderBy?: MessageOrderByWithRelationInput | MessageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Messages.
     */
    cursor?: MessageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * Message create
   */
  export type MessageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to create a Message.
     */
    data: XOR<MessageCreateInput, MessageUncheckedCreateInput>
  }

  /**
   * Message createMany
   */
  export type MessageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Messages.
     */
    data: MessageCreateManyInput | MessageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Message update
   */
  export type MessageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The data needed to update a Message.
     */
    data: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
    /**
     * Choose, which Message to update.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message updateMany
   */
  export type MessageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Messages.
     */
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyInput>
    /**
     * Filter which Messages to update
     */
    where?: MessageWhereInput
  }

  /**
   * Message upsert
   */
  export type MessageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * The filter to search for the Message to update in case it exists.
     */
    where: MessageWhereUniqueInput
    /**
     * In case the Message found by the `where` argument doesn't exist, create a new Message with this data.
     */
    create: XOR<MessageCreateInput, MessageUncheckedCreateInput>
    /**
     * In case the Message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MessageUpdateInput, MessageUncheckedUpdateInput>
  }

  /**
   * Message delete
   */
  export type MessageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
    /**
     * Filter which Message to delete.
     */
    where: MessageWhereUniqueInput
  }

  /**
   * Message deleteMany
   */
  export type MessageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Messages to delete
     */
    where?: MessageWhereInput
  }

  /**
   * Message without action
   */
  export type MessageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Message
     */
    select?: MessageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MessageInclude<ExtArgs> | null
  }


  /**
   * Model ShareFile
   */

  export type AggregateShareFile = {
    _count: ShareFileCountAggregateOutputType | null
    _avg: ShareFileAvgAggregateOutputType | null
    _sum: ShareFileSumAggregateOutputType | null
    _min: ShareFileMinAggregateOutputType | null
    _max: ShareFileMaxAggregateOutputType | null
  }

  export type ShareFileAvgAggregateOutputType = {
    id: number | null
  }

  export type ShareFileSumAggregateOutputType = {
    id: bigint | null
  }

  export type ShareFileMinAggregateOutputType = {
    id: bigint | null
    url: string | null
    createdBy: string | null
    updatedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShareFileMaxAggregateOutputType = {
    id: bigint | null
    url: string | null
    createdBy: string | null
    updatedBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ShareFileCountAggregateOutputType = {
    id: number
    url: number
    createdBy: number
    updatedBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ShareFileAvgAggregateInputType = {
    id?: true
  }

  export type ShareFileSumAggregateInputType = {
    id?: true
  }

  export type ShareFileMinAggregateInputType = {
    id?: true
    url?: true
    createdBy?: true
    updatedBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShareFileMaxAggregateInputType = {
    id?: true
    url?: true
    createdBy?: true
    updatedBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ShareFileCountAggregateInputType = {
    id?: true
    url?: true
    createdBy?: true
    updatedBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ShareFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareFile to aggregate.
     */
    where?: ShareFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareFiles to fetch.
     */
    orderBy?: ShareFileOrderByWithRelationInput | ShareFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShareFiles
    **/
    _count?: true | ShareFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareFileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareFileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareFileMaxAggregateInputType
  }

  export type GetShareFileAggregateType<T extends ShareFileAggregateArgs> = {
        [P in keyof T & keyof AggregateShareFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShareFile[P]>
      : GetScalarType<T[P], AggregateShareFile[P]>
  }




  export type ShareFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareFileWhereInput
    orderBy?: ShareFileOrderByWithAggregationInput | ShareFileOrderByWithAggregationInput[]
    by: ShareFileScalarFieldEnum[] | ShareFileScalarFieldEnum
    having?: ShareFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareFileCountAggregateInputType | true
    _avg?: ShareFileAvgAggregateInputType
    _sum?: ShareFileSumAggregateInputType
    _min?: ShareFileMinAggregateInputType
    _max?: ShareFileMaxAggregateInputType
  }

  export type ShareFileGroupByOutputType = {
    id: bigint
    url: string
    createdBy: string
    updatedBy: string
    createdAt: Date
    updatedAt: Date
    _count: ShareFileCountAggregateOutputType | null
    _avg: ShareFileAvgAggregateOutputType | null
    _sum: ShareFileSumAggregateOutputType | null
    _min: ShareFileMinAggregateOutputType | null
    _max: ShareFileMaxAggregateOutputType | null
  }

  type GetShareFileGroupByPayload<T extends ShareFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareFileGroupByOutputType[P]>
            : GetScalarType<T[P], ShareFileGroupByOutputType[P]>
        }
      >
    >


  export type ShareFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    shareholders?: boolean | ShareFile$shareholdersArgs<ExtArgs>
    _count?: boolean | ShareFileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareFile"]>


  export type ShareFileSelectScalar = {
    id?: boolean
    url?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ShareFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareholders?: boolean | ShareFile$shareholdersArgs<ExtArgs>
    _count?: boolean | ShareFileCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ShareFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShareFile"
    objects: {
      shareholders: Prisma.$ShareholderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: bigint
      url: string
      createdBy: string
      updatedBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["shareFile"]>
    composites: {}
  }

  type ShareFileGetPayload<S extends boolean | null | undefined | ShareFileDefaultArgs> = $Result.GetResult<Prisma.$ShareFilePayload, S>

  type ShareFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShareFileFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShareFileCountAggregateInputType | true
    }

  export interface ShareFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShareFile'], meta: { name: 'ShareFile' } }
    /**
     * Find zero or one ShareFile that matches the filter.
     * @param {ShareFileFindUniqueArgs} args - Arguments to find a ShareFile
     * @example
     * // Get one ShareFile
     * const shareFile = await prisma.shareFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareFileFindUniqueArgs>(args: SelectSubset<T, ShareFileFindUniqueArgs<ExtArgs>>): Prisma__ShareFileClient<$Result.GetResult<Prisma.$ShareFilePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ShareFile that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShareFileFindUniqueOrThrowArgs} args - Arguments to find a ShareFile
     * @example
     * // Get one ShareFile
     * const shareFile = await prisma.shareFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareFileFindUniqueOrThrowArgs>(args: SelectSubset<T, ShareFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShareFileClient<$Result.GetResult<Prisma.$ShareFilePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ShareFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFileFindFirstArgs} args - Arguments to find a ShareFile
     * @example
     * // Get one ShareFile
     * const shareFile = await prisma.shareFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareFileFindFirstArgs>(args?: SelectSubset<T, ShareFileFindFirstArgs<ExtArgs>>): Prisma__ShareFileClient<$Result.GetResult<Prisma.$ShareFilePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ShareFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFileFindFirstOrThrowArgs} args - Arguments to find a ShareFile
     * @example
     * // Get one ShareFile
     * const shareFile = await prisma.shareFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareFileFindFirstOrThrowArgs>(args?: SelectSubset<T, ShareFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShareFileClient<$Result.GetResult<Prisma.$ShareFilePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ShareFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShareFiles
     * const shareFiles = await prisma.shareFile.findMany()
     * 
     * // Get first 10 ShareFiles
     * const shareFiles = await prisma.shareFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareFileWithIdOnly = await prisma.shareFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShareFileFindManyArgs>(args?: SelectSubset<T, ShareFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareFilePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ShareFile.
     * @param {ShareFileCreateArgs} args - Arguments to create a ShareFile.
     * @example
     * // Create one ShareFile
     * const ShareFile = await prisma.shareFile.create({
     *   data: {
     *     // ... data to create a ShareFile
     *   }
     * })
     * 
     */
    create<T extends ShareFileCreateArgs>(args: SelectSubset<T, ShareFileCreateArgs<ExtArgs>>): Prisma__ShareFileClient<$Result.GetResult<Prisma.$ShareFilePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ShareFiles.
     * @param {ShareFileCreateManyArgs} args - Arguments to create many ShareFiles.
     * @example
     * // Create many ShareFiles
     * const shareFile = await prisma.shareFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShareFileCreateManyArgs>(args?: SelectSubset<T, ShareFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ShareFile.
     * @param {ShareFileDeleteArgs} args - Arguments to delete one ShareFile.
     * @example
     * // Delete one ShareFile
     * const ShareFile = await prisma.shareFile.delete({
     *   where: {
     *     // ... filter to delete one ShareFile
     *   }
     * })
     * 
     */
    delete<T extends ShareFileDeleteArgs>(args: SelectSubset<T, ShareFileDeleteArgs<ExtArgs>>): Prisma__ShareFileClient<$Result.GetResult<Prisma.$ShareFilePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ShareFile.
     * @param {ShareFileUpdateArgs} args - Arguments to update one ShareFile.
     * @example
     * // Update one ShareFile
     * const shareFile = await prisma.shareFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShareFileUpdateArgs>(args: SelectSubset<T, ShareFileUpdateArgs<ExtArgs>>): Prisma__ShareFileClient<$Result.GetResult<Prisma.$ShareFilePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ShareFiles.
     * @param {ShareFileDeleteManyArgs} args - Arguments to filter ShareFiles to delete.
     * @example
     * // Delete a few ShareFiles
     * const { count } = await prisma.shareFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShareFileDeleteManyArgs>(args?: SelectSubset<T, ShareFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShareFiles
     * const shareFile = await prisma.shareFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShareFileUpdateManyArgs>(args: SelectSubset<T, ShareFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShareFile.
     * @param {ShareFileUpsertArgs} args - Arguments to update or create a ShareFile.
     * @example
     * // Update or create a ShareFile
     * const shareFile = await prisma.shareFile.upsert({
     *   create: {
     *     // ... data to create a ShareFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShareFile we want to update
     *   }
     * })
     */
    upsert<T extends ShareFileUpsertArgs>(args: SelectSubset<T, ShareFileUpsertArgs<ExtArgs>>): Prisma__ShareFileClient<$Result.GetResult<Prisma.$ShareFilePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ShareFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFileCountArgs} args - Arguments to filter ShareFiles to count.
     * @example
     * // Count the number of ShareFiles
     * const count = await prisma.shareFile.count({
     *   where: {
     *     // ... the filter for the ShareFiles we want to count
     *   }
     * })
    **/
    count<T extends ShareFileCountArgs>(
      args?: Subset<T, ShareFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShareFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareFileAggregateArgs>(args: Subset<T, ShareFileAggregateArgs>): Prisma.PrismaPromise<GetShareFileAggregateType<T>>

    /**
     * Group by ShareFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareFileGroupByArgs['orderBy'] }
        : { orderBy?: ShareFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShareFile model
   */
  readonly fields: ShareFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShareFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shareholders<T extends ShareFile$shareholdersArgs<ExtArgs> = {}>(args?: Subset<T, ShareFile$shareholdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShareFile model
   */ 
  interface ShareFileFieldRefs {
    readonly id: FieldRef<"ShareFile", 'BigInt'>
    readonly url: FieldRef<"ShareFile", 'String'>
    readonly createdBy: FieldRef<"ShareFile", 'String'>
    readonly updatedBy: FieldRef<"ShareFile", 'String'>
    readonly createdAt: FieldRef<"ShareFile", 'DateTime'>
    readonly updatedAt: FieldRef<"ShareFile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ShareFile findUnique
   */
  export type ShareFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareFile
     */
    select?: ShareFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareFileInclude<ExtArgs> | null
    /**
     * Filter, which ShareFile to fetch.
     */
    where: ShareFileWhereUniqueInput
  }

  /**
   * ShareFile findUniqueOrThrow
   */
  export type ShareFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareFile
     */
    select?: ShareFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareFileInclude<ExtArgs> | null
    /**
     * Filter, which ShareFile to fetch.
     */
    where: ShareFileWhereUniqueInput
  }

  /**
   * ShareFile findFirst
   */
  export type ShareFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareFile
     */
    select?: ShareFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareFileInclude<ExtArgs> | null
    /**
     * Filter, which ShareFile to fetch.
     */
    where?: ShareFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareFiles to fetch.
     */
    orderBy?: ShareFileOrderByWithRelationInput | ShareFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareFiles.
     */
    cursor?: ShareFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareFiles.
     */
    distinct?: ShareFileScalarFieldEnum | ShareFileScalarFieldEnum[]
  }

  /**
   * ShareFile findFirstOrThrow
   */
  export type ShareFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareFile
     */
    select?: ShareFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareFileInclude<ExtArgs> | null
    /**
     * Filter, which ShareFile to fetch.
     */
    where?: ShareFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareFiles to fetch.
     */
    orderBy?: ShareFileOrderByWithRelationInput | ShareFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareFiles.
     */
    cursor?: ShareFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareFiles.
     */
    distinct?: ShareFileScalarFieldEnum | ShareFileScalarFieldEnum[]
  }

  /**
   * ShareFile findMany
   */
  export type ShareFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareFile
     */
    select?: ShareFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareFileInclude<ExtArgs> | null
    /**
     * Filter, which ShareFiles to fetch.
     */
    where?: ShareFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareFiles to fetch.
     */
    orderBy?: ShareFileOrderByWithRelationInput | ShareFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShareFiles.
     */
    cursor?: ShareFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareFiles.
     */
    skip?: number
    distinct?: ShareFileScalarFieldEnum | ShareFileScalarFieldEnum[]
  }

  /**
   * ShareFile create
   */
  export type ShareFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareFile
     */
    select?: ShareFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareFileInclude<ExtArgs> | null
    /**
     * The data needed to create a ShareFile.
     */
    data: XOR<ShareFileCreateInput, ShareFileUncheckedCreateInput>
  }

  /**
   * ShareFile createMany
   */
  export type ShareFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShareFiles.
     */
    data: ShareFileCreateManyInput | ShareFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShareFile update
   */
  export type ShareFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareFile
     */
    select?: ShareFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareFileInclude<ExtArgs> | null
    /**
     * The data needed to update a ShareFile.
     */
    data: XOR<ShareFileUpdateInput, ShareFileUncheckedUpdateInput>
    /**
     * Choose, which ShareFile to update.
     */
    where: ShareFileWhereUniqueInput
  }

  /**
   * ShareFile updateMany
   */
  export type ShareFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShareFiles.
     */
    data: XOR<ShareFileUpdateManyMutationInput, ShareFileUncheckedUpdateManyInput>
    /**
     * Filter which ShareFiles to update
     */
    where?: ShareFileWhereInput
  }

  /**
   * ShareFile upsert
   */
  export type ShareFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareFile
     */
    select?: ShareFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareFileInclude<ExtArgs> | null
    /**
     * The filter to search for the ShareFile to update in case it exists.
     */
    where: ShareFileWhereUniqueInput
    /**
     * In case the ShareFile found by the `where` argument doesn't exist, create a new ShareFile with this data.
     */
    create: XOR<ShareFileCreateInput, ShareFileUncheckedCreateInput>
    /**
     * In case the ShareFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareFileUpdateInput, ShareFileUncheckedUpdateInput>
  }

  /**
   * ShareFile delete
   */
  export type ShareFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareFile
     */
    select?: ShareFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareFileInclude<ExtArgs> | null
    /**
     * Filter which ShareFile to delete.
     */
    where: ShareFileWhereUniqueInput
  }

  /**
   * ShareFile deleteMany
   */
  export type ShareFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareFiles to delete
     */
    where?: ShareFileWhereInput
  }

  /**
   * ShareFile.shareholders
   */
  export type ShareFile$shareholdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
    where?: ShareholderWhereInput
    orderBy?: ShareholderOrderByWithRelationInput | ShareholderOrderByWithRelationInput[]
    cursor?: ShareholderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareholderScalarFieldEnum | ShareholderScalarFieldEnum[]
  }

  /**
   * ShareFile without action
   */
  export type ShareFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareFile
     */
    select?: ShareFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareFileInclude<ExtArgs> | null
  }


  /**
   * Model Shareholder
   */

  export type AggregateShareholder = {
    _count: ShareholderCountAggregateOutputType | null
    _avg: ShareholderAvgAggregateOutputType | null
    _sum: ShareholderSumAggregateOutputType | null
    _min: ShareholderMinAggregateOutputType | null
    _max: ShareholderMaxAggregateOutputType | null
  }

  export type ShareholderAvgAggregateOutputType = {
    addressId: number | null
    fileId: number | null
    mode: number | null
  }

  export type ShareholderSumAggregateOutputType = {
    addressId: bigint | null
    fileId: bigint | null
    mode: number | null
  }

  export type ShareholderMinAggregateOutputType = {
    id: string | null
    ShareholderID: string | null
    engName: string | null
    amhName: string | null
    Sex: string | null
    ForeignID: string | null
    PassportNumber: string | null
    dateOfNationalityChange: string | null
    NationalID: string | null
    email: string | null
    Nationality: string | null
    addressId: bigint | null
    AccountNumber: string | null
    TinNumber: string | null
    MinorShareholders: Date | null
    MothersName: string | null
    Organisation: string | null
    NameOfLegalRepresentative: string | null
    LegalRepresentativePhone: string | null
    fileId: bigint | null
    shareId: string | null
    TelephoneNumber: string | null
    status: string | null
    shareholderTypeId: string | null
    registredAt: Date | null
    mode: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type ShareholderMaxAggregateOutputType = {
    id: string | null
    ShareholderID: string | null
    engName: string | null
    amhName: string | null
    Sex: string | null
    ForeignID: string | null
    PassportNumber: string | null
    dateOfNationalityChange: string | null
    NationalID: string | null
    email: string | null
    Nationality: string | null
    addressId: bigint | null
    AccountNumber: string | null
    TinNumber: string | null
    MinorShareholders: Date | null
    MothersName: string | null
    Organisation: string | null
    NameOfLegalRepresentative: string | null
    LegalRepresentativePhone: string | null
    fileId: bigint | null
    shareId: string | null
    TelephoneNumber: string | null
    status: string | null
    shareholderTypeId: string | null
    registredAt: Date | null
    mode: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type ShareholderCountAggregateOutputType = {
    id: number
    ShareholderID: number
    engName: number
    amhName: number
    Sex: number
    ForeignID: number
    PassportNumber: number
    dateOfNationalityChange: number
    NationalID: number
    email: number
    Nationality: number
    addressId: number
    AccountNumber: number
    TinNumber: number
    MinorShareholders: number
    MothersName: number
    Organisation: number
    NameOfLegalRepresentative: number
    LegalRepresentativePhone: number
    fileId: number
    shareId: number
    TelephoneNumber: number
    status: number
    shareholderTypeId: number
    registredAt: number
    mode: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type ShareholderAvgAggregateInputType = {
    addressId?: true
    fileId?: true
    mode?: true
  }

  export type ShareholderSumAggregateInputType = {
    addressId?: true
    fileId?: true
    mode?: true
  }

  export type ShareholderMinAggregateInputType = {
    id?: true
    ShareholderID?: true
    engName?: true
    amhName?: true
    Sex?: true
    ForeignID?: true
    PassportNumber?: true
    dateOfNationalityChange?: true
    NationalID?: true
    email?: true
    Nationality?: true
    addressId?: true
    AccountNumber?: true
    TinNumber?: true
    MinorShareholders?: true
    MothersName?: true
    Organisation?: true
    NameOfLegalRepresentative?: true
    LegalRepresentativePhone?: true
    fileId?: true
    shareId?: true
    TelephoneNumber?: true
    status?: true
    shareholderTypeId?: true
    registredAt?: true
    mode?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type ShareholderMaxAggregateInputType = {
    id?: true
    ShareholderID?: true
    engName?: true
    amhName?: true
    Sex?: true
    ForeignID?: true
    PassportNumber?: true
    dateOfNationalityChange?: true
    NationalID?: true
    email?: true
    Nationality?: true
    addressId?: true
    AccountNumber?: true
    TinNumber?: true
    MinorShareholders?: true
    MothersName?: true
    Organisation?: true
    NameOfLegalRepresentative?: true
    LegalRepresentativePhone?: true
    fileId?: true
    shareId?: true
    TelephoneNumber?: true
    status?: true
    shareholderTypeId?: true
    registredAt?: true
    mode?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type ShareholderCountAggregateInputType = {
    id?: true
    ShareholderID?: true
    engName?: true
    amhName?: true
    Sex?: true
    ForeignID?: true
    PassportNumber?: true
    dateOfNationalityChange?: true
    NationalID?: true
    email?: true
    Nationality?: true
    addressId?: true
    AccountNumber?: true
    TinNumber?: true
    MinorShareholders?: true
    MothersName?: true
    Organisation?: true
    NameOfLegalRepresentative?: true
    LegalRepresentativePhone?: true
    fileId?: true
    shareId?: true
    TelephoneNumber?: true
    status?: true
    shareholderTypeId?: true
    registredAt?: true
    mode?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type ShareholderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shareholder to aggregate.
     */
    where?: ShareholderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shareholders to fetch.
     */
    orderBy?: ShareholderOrderByWithRelationInput | ShareholderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareholderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shareholders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shareholders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shareholders
    **/
    _count?: true | ShareholderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareholderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareholderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareholderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareholderMaxAggregateInputType
  }

  export type GetShareholderAggregateType<T extends ShareholderAggregateArgs> = {
        [P in keyof T & keyof AggregateShareholder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShareholder[P]>
      : GetScalarType<T[P], AggregateShareholder[P]>
  }




  export type ShareholderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareholderWhereInput
    orderBy?: ShareholderOrderByWithAggregationInput | ShareholderOrderByWithAggregationInput[]
    by: ShareholderScalarFieldEnum[] | ShareholderScalarFieldEnum
    having?: ShareholderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareholderCountAggregateInputType | true
    _avg?: ShareholderAvgAggregateInputType
    _sum?: ShareholderSumAggregateInputType
    _min?: ShareholderMinAggregateInputType
    _max?: ShareholderMaxAggregateInputType
  }

  export type ShareholderGroupByOutputType = {
    id: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID: string | null
    email: string
    Nationality: string | null
    addressId: bigint
    AccountNumber: string
    TinNumber: string
    MinorShareholders: Date | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId: bigint | null
    shareId: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt: Date | null
    mode: number | null
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    updatedById: string | null
    _count: ShareholderCountAggregateOutputType | null
    _avg: ShareholderAvgAggregateOutputType | null
    _sum: ShareholderSumAggregateOutputType | null
    _min: ShareholderMinAggregateOutputType | null
    _max: ShareholderMaxAggregateOutputType | null
  }

  type GetShareholderGroupByPayload<T extends ShareholderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareholderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareholderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareholderGroupByOutputType[P]>
            : GetScalarType<T[P], ShareholderGroupByOutputType[P]>
        }
      >
    >


  export type ShareholderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ShareholderID?: boolean
    engName?: boolean
    amhName?: boolean
    Sex?: boolean
    ForeignID?: boolean
    PassportNumber?: boolean
    dateOfNationalityChange?: boolean
    NationalID?: boolean
    email?: boolean
    Nationality?: boolean
    addressId?: boolean
    AccountNumber?: boolean
    TinNumber?: boolean
    MinorShareholders?: boolean
    MothersName?: boolean
    Organisation?: boolean
    NameOfLegalRepresentative?: boolean
    LegalRepresentativePhone?: boolean
    fileId?: boolean
    shareId?: boolean
    TelephoneNumber?: boolean
    status?: boolean
    shareholderTypeId?: boolean
    registredAt?: boolean
    mode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    address?: boolean | Shareholder$addressArgs<ExtArgs>
    shareFile?: boolean | Shareholder$shareFileArgs<ExtArgs>
    share?: boolean | Shareholder$shareArgs<ExtArgs>
    createdBy?: boolean | Shareholder$createdByArgs<ExtArgs>
    updatedBy?: boolean | Shareholder$updatedByArgs<ExtArgs>
    shareholderLogs?: boolean | Shareholder$shareholderLogsArgs<ExtArgs>
    shareTransactions?: boolean | Shareholder$shareTransactionsArgs<ExtArgs>
    shareholding?: boolean | Shareholder$shareholdingArgs<ExtArgs>
    fromshareTransfer?: boolean | Shareholder$fromshareTransferArgs<ExtArgs>
    tohareTransfer?: boolean | Shareholder$tohareTransferArgs<ExtArgs>
    _count?: boolean | ShareholderCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareholder"]>


  export type ShareholderSelectScalar = {
    id?: boolean
    ShareholderID?: boolean
    engName?: boolean
    amhName?: boolean
    Sex?: boolean
    ForeignID?: boolean
    PassportNumber?: boolean
    dateOfNationalityChange?: boolean
    NationalID?: boolean
    email?: boolean
    Nationality?: boolean
    addressId?: boolean
    AccountNumber?: boolean
    TinNumber?: boolean
    MinorShareholders?: boolean
    MothersName?: boolean
    Organisation?: boolean
    NameOfLegalRepresentative?: boolean
    LegalRepresentativePhone?: boolean
    fileId?: boolean
    shareId?: boolean
    TelephoneNumber?: boolean
    status?: boolean
    shareholderTypeId?: boolean
    registredAt?: boolean
    mode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type ShareholderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | Shareholder$addressArgs<ExtArgs>
    shareFile?: boolean | Shareholder$shareFileArgs<ExtArgs>
    share?: boolean | Shareholder$shareArgs<ExtArgs>
    createdBy?: boolean | Shareholder$createdByArgs<ExtArgs>
    updatedBy?: boolean | Shareholder$updatedByArgs<ExtArgs>
    shareholderLogs?: boolean | Shareholder$shareholderLogsArgs<ExtArgs>
    shareTransactions?: boolean | Shareholder$shareTransactionsArgs<ExtArgs>
    shareholding?: boolean | Shareholder$shareholdingArgs<ExtArgs>
    fromshareTransfer?: boolean | Shareholder$fromshareTransferArgs<ExtArgs>
    tohareTransfer?: boolean | Shareholder$tohareTransferArgs<ExtArgs>
    _count?: boolean | ShareholderCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ShareholderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Shareholder"
    objects: {
      address: Prisma.$AddressPayload<ExtArgs> | null
      shareFile: Prisma.$ShareFilePayload<ExtArgs> | null
      share: Prisma.$SharePayload<ExtArgs> | null
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
      shareholderLogs: Prisma.$ShareholderLogPayload<ExtArgs>[]
      shareTransactions: Prisma.$ShareTransactionPayload<ExtArgs>[]
      shareholding: Prisma.$ShareholdingPayload<ExtArgs>[]
      fromshareTransfer: Prisma.$ShareTransferPayload<ExtArgs>[]
      tohareTransfer: Prisma.$ShareTransferPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      ShareholderID: string
      engName: string
      amhName: string
      Sex: string
      ForeignID: string
      PassportNumber: string
      dateOfNationalityChange: string
      NationalID: string | null
      email: string
      Nationality: string | null
      addressId: bigint
      AccountNumber: string
      TinNumber: string
      MinorShareholders: Date | null
      MothersName: string
      Organisation: string
      NameOfLegalRepresentative: string
      LegalRepresentativePhone: string
      fileId: bigint | null
      shareId: string | null
      TelephoneNumber: string
      status: string
      shareholderTypeId: string
      registredAt: Date | null
      mode: number | null
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["shareholder"]>
    composites: {}
  }

  type ShareholderGetPayload<S extends boolean | null | undefined | ShareholderDefaultArgs> = $Result.GetResult<Prisma.$ShareholderPayload, S>

  type ShareholderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShareholderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShareholderCountAggregateInputType | true
    }

  export interface ShareholderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shareholder'], meta: { name: 'Shareholder' } }
    /**
     * Find zero or one Shareholder that matches the filter.
     * @param {ShareholderFindUniqueArgs} args - Arguments to find a Shareholder
     * @example
     * // Get one Shareholder
     * const shareholder = await prisma.shareholder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareholderFindUniqueArgs>(args: SelectSubset<T, ShareholderFindUniqueArgs<ExtArgs>>): Prisma__ShareholderClient<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Shareholder that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShareholderFindUniqueOrThrowArgs} args - Arguments to find a Shareholder
     * @example
     * // Get one Shareholder
     * const shareholder = await prisma.shareholder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareholderFindUniqueOrThrowArgs>(args: SelectSubset<T, ShareholderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShareholderClient<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Shareholder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholderFindFirstArgs} args - Arguments to find a Shareholder
     * @example
     * // Get one Shareholder
     * const shareholder = await prisma.shareholder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareholderFindFirstArgs>(args?: SelectSubset<T, ShareholderFindFirstArgs<ExtArgs>>): Prisma__ShareholderClient<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Shareholder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholderFindFirstOrThrowArgs} args - Arguments to find a Shareholder
     * @example
     * // Get one Shareholder
     * const shareholder = await prisma.shareholder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareholderFindFirstOrThrowArgs>(args?: SelectSubset<T, ShareholderFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShareholderClient<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Shareholders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shareholders
     * const shareholders = await prisma.shareholder.findMany()
     * 
     * // Get first 10 Shareholders
     * const shareholders = await prisma.shareholder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareholderWithIdOnly = await prisma.shareholder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShareholderFindManyArgs>(args?: SelectSubset<T, ShareholderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Shareholder.
     * @param {ShareholderCreateArgs} args - Arguments to create a Shareholder.
     * @example
     * // Create one Shareholder
     * const Shareholder = await prisma.shareholder.create({
     *   data: {
     *     // ... data to create a Shareholder
     *   }
     * })
     * 
     */
    create<T extends ShareholderCreateArgs>(args: SelectSubset<T, ShareholderCreateArgs<ExtArgs>>): Prisma__ShareholderClient<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Shareholders.
     * @param {ShareholderCreateManyArgs} args - Arguments to create many Shareholders.
     * @example
     * // Create many Shareholders
     * const shareholder = await prisma.shareholder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShareholderCreateManyArgs>(args?: SelectSubset<T, ShareholderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Shareholder.
     * @param {ShareholderDeleteArgs} args - Arguments to delete one Shareholder.
     * @example
     * // Delete one Shareholder
     * const Shareholder = await prisma.shareholder.delete({
     *   where: {
     *     // ... filter to delete one Shareholder
     *   }
     * })
     * 
     */
    delete<T extends ShareholderDeleteArgs>(args: SelectSubset<T, ShareholderDeleteArgs<ExtArgs>>): Prisma__ShareholderClient<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Shareholder.
     * @param {ShareholderUpdateArgs} args - Arguments to update one Shareholder.
     * @example
     * // Update one Shareholder
     * const shareholder = await prisma.shareholder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShareholderUpdateArgs>(args: SelectSubset<T, ShareholderUpdateArgs<ExtArgs>>): Prisma__ShareholderClient<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Shareholders.
     * @param {ShareholderDeleteManyArgs} args - Arguments to filter Shareholders to delete.
     * @example
     * // Delete a few Shareholders
     * const { count } = await prisma.shareholder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShareholderDeleteManyArgs>(args?: SelectSubset<T, ShareholderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shareholders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shareholders
     * const shareholder = await prisma.shareholder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShareholderUpdateManyArgs>(args: SelectSubset<T, ShareholderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shareholder.
     * @param {ShareholderUpsertArgs} args - Arguments to update or create a Shareholder.
     * @example
     * // Update or create a Shareholder
     * const shareholder = await prisma.shareholder.upsert({
     *   create: {
     *     // ... data to create a Shareholder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shareholder we want to update
     *   }
     * })
     */
    upsert<T extends ShareholderUpsertArgs>(args: SelectSubset<T, ShareholderUpsertArgs<ExtArgs>>): Prisma__ShareholderClient<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Shareholders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholderCountArgs} args - Arguments to filter Shareholders to count.
     * @example
     * // Count the number of Shareholders
     * const count = await prisma.shareholder.count({
     *   where: {
     *     // ... the filter for the Shareholders we want to count
     *   }
     * })
    **/
    count<T extends ShareholderCountArgs>(
      args?: Subset<T, ShareholderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareholderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shareholder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareholderAggregateArgs>(args: Subset<T, ShareholderAggregateArgs>): Prisma.PrismaPromise<GetShareholderAggregateType<T>>

    /**
     * Group by Shareholder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareholderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareholderGroupByArgs['orderBy'] }
        : { orderBy?: ShareholderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareholderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareholderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shareholder model
   */
  readonly fields: ShareholderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shareholder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareholderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    address<T extends Shareholder$addressArgs<ExtArgs> = {}>(args?: Subset<T, Shareholder$addressArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    shareFile<T extends Shareholder$shareFileArgs<ExtArgs> = {}>(args?: Subset<T, Shareholder$shareFileArgs<ExtArgs>>): Prisma__ShareFileClient<$Result.GetResult<Prisma.$ShareFilePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    share<T extends Shareholder$shareArgs<ExtArgs> = {}>(args?: Subset<T, Shareholder$shareArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    createdBy<T extends Shareholder$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Shareholder$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    updatedBy<T extends Shareholder$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Shareholder$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    shareholderLogs<T extends Shareholder$shareholderLogsArgs<ExtArgs> = {}>(args?: Subset<T, Shareholder$shareholderLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareholderLogPayload<ExtArgs>, T, "findMany"> | Null>
    shareTransactions<T extends Shareholder$shareTransactionsArgs<ExtArgs> = {}>(args?: Subset<T, Shareholder$shareTransactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    shareholding<T extends Shareholder$shareholdingArgs<ExtArgs> = {}>(args?: Subset<T, Shareholder$shareholdingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareholdingPayload<ExtArgs>, T, "findMany"> | Null>
    fromshareTransfer<T extends Shareholder$fromshareTransferArgs<ExtArgs> = {}>(args?: Subset<T, Shareholder$fromshareTransferArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareTransferPayload<ExtArgs>, T, "findMany"> | Null>
    tohareTransfer<T extends Shareholder$tohareTransferArgs<ExtArgs> = {}>(args?: Subset<T, Shareholder$tohareTransferArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareTransferPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Shareholder model
   */ 
  interface ShareholderFieldRefs {
    readonly id: FieldRef<"Shareholder", 'String'>
    readonly ShareholderID: FieldRef<"Shareholder", 'String'>
    readonly engName: FieldRef<"Shareholder", 'String'>
    readonly amhName: FieldRef<"Shareholder", 'String'>
    readonly Sex: FieldRef<"Shareholder", 'String'>
    readonly ForeignID: FieldRef<"Shareholder", 'String'>
    readonly PassportNumber: FieldRef<"Shareholder", 'String'>
    readonly dateOfNationalityChange: FieldRef<"Shareholder", 'String'>
    readonly NationalID: FieldRef<"Shareholder", 'String'>
    readonly email: FieldRef<"Shareholder", 'String'>
    readonly Nationality: FieldRef<"Shareholder", 'String'>
    readonly addressId: FieldRef<"Shareholder", 'BigInt'>
    readonly AccountNumber: FieldRef<"Shareholder", 'String'>
    readonly TinNumber: FieldRef<"Shareholder", 'String'>
    readonly MinorShareholders: FieldRef<"Shareholder", 'DateTime'>
    readonly MothersName: FieldRef<"Shareholder", 'String'>
    readonly Organisation: FieldRef<"Shareholder", 'String'>
    readonly NameOfLegalRepresentative: FieldRef<"Shareholder", 'String'>
    readonly LegalRepresentativePhone: FieldRef<"Shareholder", 'String'>
    readonly fileId: FieldRef<"Shareholder", 'BigInt'>
    readonly shareId: FieldRef<"Shareholder", 'String'>
    readonly TelephoneNumber: FieldRef<"Shareholder", 'String'>
    readonly status: FieldRef<"Shareholder", 'String'>
    readonly shareholderTypeId: FieldRef<"Shareholder", 'String'>
    readonly registredAt: FieldRef<"Shareholder", 'DateTime'>
    readonly mode: FieldRef<"Shareholder", 'Int'>
    readonly createdAt: FieldRef<"Shareholder", 'DateTime'>
    readonly updatedAt: FieldRef<"Shareholder", 'DateTime'>
    readonly createdById: FieldRef<"Shareholder", 'String'>
    readonly updatedById: FieldRef<"Shareholder", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Shareholder findUnique
   */
  export type ShareholderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
    /**
     * Filter, which Shareholder to fetch.
     */
    where: ShareholderWhereUniqueInput
  }

  /**
   * Shareholder findUniqueOrThrow
   */
  export type ShareholderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
    /**
     * Filter, which Shareholder to fetch.
     */
    where: ShareholderWhereUniqueInput
  }

  /**
   * Shareholder findFirst
   */
  export type ShareholderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
    /**
     * Filter, which Shareholder to fetch.
     */
    where?: ShareholderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shareholders to fetch.
     */
    orderBy?: ShareholderOrderByWithRelationInput | ShareholderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shareholders.
     */
    cursor?: ShareholderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shareholders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shareholders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shareholders.
     */
    distinct?: ShareholderScalarFieldEnum | ShareholderScalarFieldEnum[]
  }

  /**
   * Shareholder findFirstOrThrow
   */
  export type ShareholderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
    /**
     * Filter, which Shareholder to fetch.
     */
    where?: ShareholderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shareholders to fetch.
     */
    orderBy?: ShareholderOrderByWithRelationInput | ShareholderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shareholders.
     */
    cursor?: ShareholderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shareholders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shareholders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shareholders.
     */
    distinct?: ShareholderScalarFieldEnum | ShareholderScalarFieldEnum[]
  }

  /**
   * Shareholder findMany
   */
  export type ShareholderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
    /**
     * Filter, which Shareholders to fetch.
     */
    where?: ShareholderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shareholders to fetch.
     */
    orderBy?: ShareholderOrderByWithRelationInput | ShareholderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shareholders.
     */
    cursor?: ShareholderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shareholders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shareholders.
     */
    skip?: number
    distinct?: ShareholderScalarFieldEnum | ShareholderScalarFieldEnum[]
  }

  /**
   * Shareholder create
   */
  export type ShareholderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
    /**
     * The data needed to create a Shareholder.
     */
    data: XOR<ShareholderCreateInput, ShareholderUncheckedCreateInput>
  }

  /**
   * Shareholder createMany
   */
  export type ShareholderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shareholders.
     */
    data: ShareholderCreateManyInput | ShareholderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Shareholder update
   */
  export type ShareholderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
    /**
     * The data needed to update a Shareholder.
     */
    data: XOR<ShareholderUpdateInput, ShareholderUncheckedUpdateInput>
    /**
     * Choose, which Shareholder to update.
     */
    where: ShareholderWhereUniqueInput
  }

  /**
   * Shareholder updateMany
   */
  export type ShareholderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shareholders.
     */
    data: XOR<ShareholderUpdateManyMutationInput, ShareholderUncheckedUpdateManyInput>
    /**
     * Filter which Shareholders to update
     */
    where?: ShareholderWhereInput
  }

  /**
   * Shareholder upsert
   */
  export type ShareholderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
    /**
     * The filter to search for the Shareholder to update in case it exists.
     */
    where: ShareholderWhereUniqueInput
    /**
     * In case the Shareholder found by the `where` argument doesn't exist, create a new Shareholder with this data.
     */
    create: XOR<ShareholderCreateInput, ShareholderUncheckedCreateInput>
    /**
     * In case the Shareholder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareholderUpdateInput, ShareholderUncheckedUpdateInput>
  }

  /**
   * Shareholder delete
   */
  export type ShareholderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
    /**
     * Filter which Shareholder to delete.
     */
    where: ShareholderWhereUniqueInput
  }

  /**
   * Shareholder deleteMany
   */
  export type ShareholderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shareholders to delete
     */
    where?: ShareholderWhereInput
  }

  /**
   * Shareholder.address
   */
  export type Shareholder$addressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
  }

  /**
   * Shareholder.shareFile
   */
  export type Shareholder$shareFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareFile
     */
    select?: ShareFileSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareFileInclude<ExtArgs> | null
    where?: ShareFileWhereInput
  }

  /**
   * Shareholder.share
   */
  export type Shareholder$shareArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    where?: ShareWhereInput
  }

  /**
   * Shareholder.createdBy
   */
  export type Shareholder$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Shareholder.updatedBy
   */
  export type Shareholder$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Shareholder.shareholderLogs
   */
  export type Shareholder$shareholderLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareholderLog
     */
    select?: ShareholderLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderLogInclude<ExtArgs> | null
    where?: ShareholderLogWhereInput
    orderBy?: ShareholderLogOrderByWithRelationInput | ShareholderLogOrderByWithRelationInput[]
    cursor?: ShareholderLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareholderLogScalarFieldEnum | ShareholderLogScalarFieldEnum[]
  }

  /**
   * Shareholder.shareTransactions
   */
  export type Shareholder$shareTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransaction
     */
    select?: ShareTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransactionInclude<ExtArgs> | null
    where?: ShareTransactionWhereInput
    orderBy?: ShareTransactionOrderByWithRelationInput | ShareTransactionOrderByWithRelationInput[]
    cursor?: ShareTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareTransactionScalarFieldEnum | ShareTransactionScalarFieldEnum[]
  }

  /**
   * Shareholder.shareholding
   */
  export type Shareholder$shareholdingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholding
     */
    select?: ShareholdingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholdingInclude<ExtArgs> | null
    where?: ShareholdingWhereInput
    orderBy?: ShareholdingOrderByWithRelationInput | ShareholdingOrderByWithRelationInput[]
    cursor?: ShareholdingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareholdingScalarFieldEnum | ShareholdingScalarFieldEnum[]
  }

  /**
   * Shareholder.fromshareTransfer
   */
  export type Shareholder$fromshareTransferArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransfer
     */
    select?: ShareTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransferInclude<ExtArgs> | null
    where?: ShareTransferWhereInput
    orderBy?: ShareTransferOrderByWithRelationInput | ShareTransferOrderByWithRelationInput[]
    cursor?: ShareTransferWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareTransferScalarFieldEnum | ShareTransferScalarFieldEnum[]
  }

  /**
   * Shareholder.tohareTransfer
   */
  export type Shareholder$tohareTransferArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransfer
     */
    select?: ShareTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransferInclude<ExtArgs> | null
    where?: ShareTransferWhereInput
    orderBy?: ShareTransferOrderByWithRelationInput | ShareTransferOrderByWithRelationInput[]
    cursor?: ShareTransferWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareTransferScalarFieldEnum | ShareTransferScalarFieldEnum[]
  }

  /**
   * Shareholder without action
   */
  export type ShareholderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
  }


  /**
   * Model ShareholderLog
   */

  export type AggregateShareholderLog = {
    _count: ShareholderLogCountAggregateOutputType | null
    _avg: ShareholderLogAvgAggregateOutputType | null
    _sum: ShareholderLogSumAggregateOutputType | null
    _min: ShareholderLogMinAggregateOutputType | null
    _max: ShareholderLogMaxAggregateOutputType | null
  }

  export type ShareholderLogAvgAggregateOutputType = {
    id: number | null
    mode: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareholderLogSumAggregateOutputType = {
    id: number | null
    mode: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareholderLogMinAggregateOutputType = {
    id: number | null
    shareholderId: string | null
    mode: number | null
    columnName: string | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareholderLogMaxAggregateOutputType = {
    id: number | null
    shareholderId: string | null
    mode: number | null
    columnName: string | null
    value: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareholderLogCountAggregateOutputType = {
    id: number
    shareholderId: number
    mode: number
    columnName: number
    value: number
    createdAt: number
    updatedAt: number
    createdBy: number
    updatedBy: number
    _all: number
  }


  export type ShareholderLogAvgAggregateInputType = {
    id?: true
    mode?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareholderLogSumAggregateInputType = {
    id?: true
    mode?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareholderLogMinAggregateInputType = {
    id?: true
    shareholderId?: true
    mode?: true
    columnName?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareholderLogMaxAggregateInputType = {
    id?: true
    shareholderId?: true
    mode?: true
    columnName?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareholderLogCountAggregateInputType = {
    id?: true
    shareholderId?: true
    mode?: true
    columnName?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
    _all?: true
  }

  export type ShareholderLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareholderLog to aggregate.
     */
    where?: ShareholderLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareholderLogs to fetch.
     */
    orderBy?: ShareholderLogOrderByWithRelationInput | ShareholderLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareholderLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareholderLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareholderLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShareholderLogs
    **/
    _count?: true | ShareholderLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareholderLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareholderLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareholderLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareholderLogMaxAggregateInputType
  }

  export type GetShareholderLogAggregateType<T extends ShareholderLogAggregateArgs> = {
        [P in keyof T & keyof AggregateShareholderLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShareholderLog[P]>
      : GetScalarType<T[P], AggregateShareholderLog[P]>
  }




  export type ShareholderLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareholderLogWhereInput
    orderBy?: ShareholderLogOrderByWithAggregationInput | ShareholderLogOrderByWithAggregationInput[]
    by: ShareholderLogScalarFieldEnum[] | ShareholderLogScalarFieldEnum
    having?: ShareholderLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareholderLogCountAggregateInputType | true
    _avg?: ShareholderLogAvgAggregateInputType
    _sum?: ShareholderLogSumAggregateInputType
    _min?: ShareholderLogMinAggregateInputType
    _max?: ShareholderLogMaxAggregateInputType
  }

  export type ShareholderLogGroupByOutputType = {
    id: number
    shareholderId: string
    mode: number
    columnName: string
    value: string
    createdAt: Date
    updatedAt: Date
    createdBy: number | null
    updatedBy: number | null
    _count: ShareholderLogCountAggregateOutputType | null
    _avg: ShareholderLogAvgAggregateOutputType | null
    _sum: ShareholderLogSumAggregateOutputType | null
    _min: ShareholderLogMinAggregateOutputType | null
    _max: ShareholderLogMaxAggregateOutputType | null
  }

  type GetShareholderLogGroupByPayload<T extends ShareholderLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareholderLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareholderLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareholderLogGroupByOutputType[P]>
            : GetScalarType<T[P], ShareholderLogGroupByOutputType[P]>
        }
      >
    >


  export type ShareholderLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareholderId?: boolean
    mode?: boolean
    columnName?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    shareholder?: boolean | ShareholderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareholderLog"]>


  export type ShareholderLogSelectScalar = {
    id?: boolean
    shareholderId?: boolean
    mode?: boolean
    columnName?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }

  export type ShareholderLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareholder?: boolean | ShareholderDefaultArgs<ExtArgs>
  }

  export type $ShareholderLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShareholderLog"
    objects: {
      shareholder: Prisma.$ShareholderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      shareholderId: string
      mode: number
      columnName: string
      value: string
      createdAt: Date
      updatedAt: Date
      createdBy: number | null
      updatedBy: number | null
    }, ExtArgs["result"]["shareholderLog"]>
    composites: {}
  }

  type ShareholderLogGetPayload<S extends boolean | null | undefined | ShareholderLogDefaultArgs> = $Result.GetResult<Prisma.$ShareholderLogPayload, S>

  type ShareholderLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShareholderLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShareholderLogCountAggregateInputType | true
    }

  export interface ShareholderLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShareholderLog'], meta: { name: 'ShareholderLog' } }
    /**
     * Find zero or one ShareholderLog that matches the filter.
     * @param {ShareholderLogFindUniqueArgs} args - Arguments to find a ShareholderLog
     * @example
     * // Get one ShareholderLog
     * const shareholderLog = await prisma.shareholderLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareholderLogFindUniqueArgs>(args: SelectSubset<T, ShareholderLogFindUniqueArgs<ExtArgs>>): Prisma__ShareholderLogClient<$Result.GetResult<Prisma.$ShareholderLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ShareholderLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShareholderLogFindUniqueOrThrowArgs} args - Arguments to find a ShareholderLog
     * @example
     * // Get one ShareholderLog
     * const shareholderLog = await prisma.shareholderLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareholderLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ShareholderLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShareholderLogClient<$Result.GetResult<Prisma.$ShareholderLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ShareholderLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholderLogFindFirstArgs} args - Arguments to find a ShareholderLog
     * @example
     * // Get one ShareholderLog
     * const shareholderLog = await prisma.shareholderLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareholderLogFindFirstArgs>(args?: SelectSubset<T, ShareholderLogFindFirstArgs<ExtArgs>>): Prisma__ShareholderLogClient<$Result.GetResult<Prisma.$ShareholderLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ShareholderLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholderLogFindFirstOrThrowArgs} args - Arguments to find a ShareholderLog
     * @example
     * // Get one ShareholderLog
     * const shareholderLog = await prisma.shareholderLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareholderLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ShareholderLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShareholderLogClient<$Result.GetResult<Prisma.$ShareholderLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ShareholderLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholderLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShareholderLogs
     * const shareholderLogs = await prisma.shareholderLog.findMany()
     * 
     * // Get first 10 ShareholderLogs
     * const shareholderLogs = await prisma.shareholderLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareholderLogWithIdOnly = await prisma.shareholderLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShareholderLogFindManyArgs>(args?: SelectSubset<T, ShareholderLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareholderLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ShareholderLog.
     * @param {ShareholderLogCreateArgs} args - Arguments to create a ShareholderLog.
     * @example
     * // Create one ShareholderLog
     * const ShareholderLog = await prisma.shareholderLog.create({
     *   data: {
     *     // ... data to create a ShareholderLog
     *   }
     * })
     * 
     */
    create<T extends ShareholderLogCreateArgs>(args: SelectSubset<T, ShareholderLogCreateArgs<ExtArgs>>): Prisma__ShareholderLogClient<$Result.GetResult<Prisma.$ShareholderLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ShareholderLogs.
     * @param {ShareholderLogCreateManyArgs} args - Arguments to create many ShareholderLogs.
     * @example
     * // Create many ShareholderLogs
     * const shareholderLog = await prisma.shareholderLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShareholderLogCreateManyArgs>(args?: SelectSubset<T, ShareholderLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ShareholderLog.
     * @param {ShareholderLogDeleteArgs} args - Arguments to delete one ShareholderLog.
     * @example
     * // Delete one ShareholderLog
     * const ShareholderLog = await prisma.shareholderLog.delete({
     *   where: {
     *     // ... filter to delete one ShareholderLog
     *   }
     * })
     * 
     */
    delete<T extends ShareholderLogDeleteArgs>(args: SelectSubset<T, ShareholderLogDeleteArgs<ExtArgs>>): Prisma__ShareholderLogClient<$Result.GetResult<Prisma.$ShareholderLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ShareholderLog.
     * @param {ShareholderLogUpdateArgs} args - Arguments to update one ShareholderLog.
     * @example
     * // Update one ShareholderLog
     * const shareholderLog = await prisma.shareholderLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShareholderLogUpdateArgs>(args: SelectSubset<T, ShareholderLogUpdateArgs<ExtArgs>>): Prisma__ShareholderLogClient<$Result.GetResult<Prisma.$ShareholderLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ShareholderLogs.
     * @param {ShareholderLogDeleteManyArgs} args - Arguments to filter ShareholderLogs to delete.
     * @example
     * // Delete a few ShareholderLogs
     * const { count } = await prisma.shareholderLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShareholderLogDeleteManyArgs>(args?: SelectSubset<T, ShareholderLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareholderLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholderLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShareholderLogs
     * const shareholderLog = await prisma.shareholderLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShareholderLogUpdateManyArgs>(args: SelectSubset<T, ShareholderLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShareholderLog.
     * @param {ShareholderLogUpsertArgs} args - Arguments to update or create a ShareholderLog.
     * @example
     * // Update or create a ShareholderLog
     * const shareholderLog = await prisma.shareholderLog.upsert({
     *   create: {
     *     // ... data to create a ShareholderLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShareholderLog we want to update
     *   }
     * })
     */
    upsert<T extends ShareholderLogUpsertArgs>(args: SelectSubset<T, ShareholderLogUpsertArgs<ExtArgs>>): Prisma__ShareholderLogClient<$Result.GetResult<Prisma.$ShareholderLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ShareholderLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholderLogCountArgs} args - Arguments to filter ShareholderLogs to count.
     * @example
     * // Count the number of ShareholderLogs
     * const count = await prisma.shareholderLog.count({
     *   where: {
     *     // ... the filter for the ShareholderLogs we want to count
     *   }
     * })
    **/
    count<T extends ShareholderLogCountArgs>(
      args?: Subset<T, ShareholderLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareholderLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShareholderLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholderLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareholderLogAggregateArgs>(args: Subset<T, ShareholderLogAggregateArgs>): Prisma.PrismaPromise<GetShareholderLogAggregateType<T>>

    /**
     * Group by ShareholderLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholderLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareholderLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareholderLogGroupByArgs['orderBy'] }
        : { orderBy?: ShareholderLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareholderLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareholderLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShareholderLog model
   */
  readonly fields: ShareholderLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShareholderLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareholderLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shareholder<T extends ShareholderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShareholderDefaultArgs<ExtArgs>>): Prisma__ShareholderClient<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShareholderLog model
   */ 
  interface ShareholderLogFieldRefs {
    readonly id: FieldRef<"ShareholderLog", 'Int'>
    readonly shareholderId: FieldRef<"ShareholderLog", 'String'>
    readonly mode: FieldRef<"ShareholderLog", 'Int'>
    readonly columnName: FieldRef<"ShareholderLog", 'String'>
    readonly value: FieldRef<"ShareholderLog", 'String'>
    readonly createdAt: FieldRef<"ShareholderLog", 'DateTime'>
    readonly updatedAt: FieldRef<"ShareholderLog", 'DateTime'>
    readonly createdBy: FieldRef<"ShareholderLog", 'Int'>
    readonly updatedBy: FieldRef<"ShareholderLog", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ShareholderLog findUnique
   */
  export type ShareholderLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareholderLog
     */
    select?: ShareholderLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderLogInclude<ExtArgs> | null
    /**
     * Filter, which ShareholderLog to fetch.
     */
    where: ShareholderLogWhereUniqueInput
  }

  /**
   * ShareholderLog findUniqueOrThrow
   */
  export type ShareholderLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareholderLog
     */
    select?: ShareholderLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderLogInclude<ExtArgs> | null
    /**
     * Filter, which ShareholderLog to fetch.
     */
    where: ShareholderLogWhereUniqueInput
  }

  /**
   * ShareholderLog findFirst
   */
  export type ShareholderLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareholderLog
     */
    select?: ShareholderLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderLogInclude<ExtArgs> | null
    /**
     * Filter, which ShareholderLog to fetch.
     */
    where?: ShareholderLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareholderLogs to fetch.
     */
    orderBy?: ShareholderLogOrderByWithRelationInput | ShareholderLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareholderLogs.
     */
    cursor?: ShareholderLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareholderLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareholderLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareholderLogs.
     */
    distinct?: ShareholderLogScalarFieldEnum | ShareholderLogScalarFieldEnum[]
  }

  /**
   * ShareholderLog findFirstOrThrow
   */
  export type ShareholderLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareholderLog
     */
    select?: ShareholderLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderLogInclude<ExtArgs> | null
    /**
     * Filter, which ShareholderLog to fetch.
     */
    where?: ShareholderLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareholderLogs to fetch.
     */
    orderBy?: ShareholderLogOrderByWithRelationInput | ShareholderLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareholderLogs.
     */
    cursor?: ShareholderLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareholderLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareholderLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareholderLogs.
     */
    distinct?: ShareholderLogScalarFieldEnum | ShareholderLogScalarFieldEnum[]
  }

  /**
   * ShareholderLog findMany
   */
  export type ShareholderLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareholderLog
     */
    select?: ShareholderLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderLogInclude<ExtArgs> | null
    /**
     * Filter, which ShareholderLogs to fetch.
     */
    where?: ShareholderLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareholderLogs to fetch.
     */
    orderBy?: ShareholderLogOrderByWithRelationInput | ShareholderLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShareholderLogs.
     */
    cursor?: ShareholderLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareholderLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareholderLogs.
     */
    skip?: number
    distinct?: ShareholderLogScalarFieldEnum | ShareholderLogScalarFieldEnum[]
  }

  /**
   * ShareholderLog create
   */
  export type ShareholderLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareholderLog
     */
    select?: ShareholderLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ShareholderLog.
     */
    data: XOR<ShareholderLogCreateInput, ShareholderLogUncheckedCreateInput>
  }

  /**
   * ShareholderLog createMany
   */
  export type ShareholderLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShareholderLogs.
     */
    data: ShareholderLogCreateManyInput | ShareholderLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShareholderLog update
   */
  export type ShareholderLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareholderLog
     */
    select?: ShareholderLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ShareholderLog.
     */
    data: XOR<ShareholderLogUpdateInput, ShareholderLogUncheckedUpdateInput>
    /**
     * Choose, which ShareholderLog to update.
     */
    where: ShareholderLogWhereUniqueInput
  }

  /**
   * ShareholderLog updateMany
   */
  export type ShareholderLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShareholderLogs.
     */
    data: XOR<ShareholderLogUpdateManyMutationInput, ShareholderLogUncheckedUpdateManyInput>
    /**
     * Filter which ShareholderLogs to update
     */
    where?: ShareholderLogWhereInput
  }

  /**
   * ShareholderLog upsert
   */
  export type ShareholderLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareholderLog
     */
    select?: ShareholderLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ShareholderLog to update in case it exists.
     */
    where: ShareholderLogWhereUniqueInput
    /**
     * In case the ShareholderLog found by the `where` argument doesn't exist, create a new ShareholderLog with this data.
     */
    create: XOR<ShareholderLogCreateInput, ShareholderLogUncheckedCreateInput>
    /**
     * In case the ShareholderLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareholderLogUpdateInput, ShareholderLogUncheckedUpdateInput>
  }

  /**
   * ShareholderLog delete
   */
  export type ShareholderLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareholderLog
     */
    select?: ShareholderLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderLogInclude<ExtArgs> | null
    /**
     * Filter which ShareholderLog to delete.
     */
    where: ShareholderLogWhereUniqueInput
  }

  /**
   * ShareholderLog deleteMany
   */
  export type ShareholderLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareholderLogs to delete
     */
    where?: ShareholderLogWhereInput
  }

  /**
   * ShareholderLog without action
   */
  export type ShareholderLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareholderLog
     */
    select?: ShareholderLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderLogInclude<ExtArgs> | null
  }


  /**
   * Model Share
   */

  export type AggregateShare = {
    _count: ShareCountAggregateOutputType | null
    _avg: ShareAvgAggregateOutputType | null
    _sum: ShareSumAggregateOutputType | null
    _min: ShareMinAggregateOutputType | null
    _max: ShareMaxAggregateOutputType | null
  }

  export type ShareAvgAggregateOutputType = {
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareSumAggregateOutputType = {
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareMinAggregateOutputType = {
    id: string | null
    noOfShare: string | null
    totalSubscribedAmount: string | null
    totalPaidAmount: string | null
    premiumAmount: string | null
    serviceChargeAmount: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareMaxAggregateOutputType = {
    id: string | null
    noOfShare: string | null
    totalSubscribedAmount: string | null
    totalPaidAmount: string | null
    premiumAmount: string | null
    serviceChargeAmount: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareCountAggregateOutputType = {
    id: number
    noOfShare: number
    totalSubscribedAmount: number
    totalPaidAmount: number
    premiumAmount: number
    serviceChargeAmount: number
    createdAt: number
    updatedAt: number
    createdBy: number
    updatedBy: number
    _all: number
  }


  export type ShareAvgAggregateInputType = {
    createdBy?: true
    updatedBy?: true
  }

  export type ShareSumAggregateInputType = {
    createdBy?: true
    updatedBy?: true
  }

  export type ShareMinAggregateInputType = {
    id?: true
    noOfShare?: true
    totalSubscribedAmount?: true
    totalPaidAmount?: true
    premiumAmount?: true
    serviceChargeAmount?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareMaxAggregateInputType = {
    id?: true
    noOfShare?: true
    totalSubscribedAmount?: true
    totalPaidAmount?: true
    premiumAmount?: true
    serviceChargeAmount?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareCountAggregateInputType = {
    id?: true
    noOfShare?: true
    totalSubscribedAmount?: true
    totalPaidAmount?: true
    premiumAmount?: true
    serviceChargeAmount?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
    _all?: true
  }

  export type ShareAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Share to aggregate.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shares
    **/
    _count?: true | ShareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareMaxAggregateInputType
  }

  export type GetShareAggregateType<T extends ShareAggregateArgs> = {
        [P in keyof T & keyof AggregateShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShare[P]>
      : GetScalarType<T[P], AggregateShare[P]>
  }




  export type ShareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareWhereInput
    orderBy?: ShareOrderByWithAggregationInput | ShareOrderByWithAggregationInput[]
    by: ShareScalarFieldEnum[] | ShareScalarFieldEnum
    having?: ShareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareCountAggregateInputType | true
    _avg?: ShareAvgAggregateInputType
    _sum?: ShareSumAggregateInputType
    _min?: ShareMinAggregateInputType
    _max?: ShareMaxAggregateInputType
  }

  export type ShareGroupByOutputType = {
    id: string
    noOfShare: string
    totalSubscribedAmount: string
    totalPaidAmount: string
    premiumAmount: string
    serviceChargeAmount: string
    createdAt: Date
    updatedAt: Date
    createdBy: number | null
    updatedBy: number | null
    _count: ShareCountAggregateOutputType | null
    _avg: ShareAvgAggregateOutputType | null
    _sum: ShareSumAggregateOutputType | null
    _min: ShareMinAggregateOutputType | null
    _max: ShareMaxAggregateOutputType | null
  }

  type GetShareGroupByPayload<T extends ShareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareGroupByOutputType[P]>
            : GetScalarType<T[P], ShareGroupByOutputType[P]>
        }
      >
    >


  export type ShareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    noOfShare?: boolean
    totalSubscribedAmount?: boolean
    totalPaidAmount?: boolean
    premiumAmount?: boolean
    serviceChargeAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    shareholders?: boolean | Share$shareholdersArgs<ExtArgs>
    _count?: boolean | ShareCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["share"]>


  export type ShareSelectScalar = {
    id?: boolean
    noOfShare?: boolean
    totalSubscribedAmount?: boolean
    totalPaidAmount?: boolean
    premiumAmount?: boolean
    serviceChargeAmount?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }

  export type ShareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareholders?: boolean | Share$shareholdersArgs<ExtArgs>
    _count?: boolean | ShareCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SharePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Share"
    objects: {
      shareholders: Prisma.$ShareholderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      noOfShare: string
      totalSubscribedAmount: string
      totalPaidAmount: string
      premiumAmount: string
      serviceChargeAmount: string
      createdAt: Date
      updatedAt: Date
      createdBy: number | null
      updatedBy: number | null
    }, ExtArgs["result"]["share"]>
    composites: {}
  }

  type ShareGetPayload<S extends boolean | null | undefined | ShareDefaultArgs> = $Result.GetResult<Prisma.$SharePayload, S>

  type ShareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShareFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShareCountAggregateInputType | true
    }

  export interface ShareDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Share'], meta: { name: 'Share' } }
    /**
     * Find zero or one Share that matches the filter.
     * @param {ShareFindUniqueArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareFindUniqueArgs>(args: SelectSubset<T, ShareFindUniqueArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Share that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShareFindUniqueOrThrowArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareFindUniqueOrThrowArgs>(args: SelectSubset<T, ShareFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Share that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindFirstArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareFindFirstArgs>(args?: SelectSubset<T, ShareFindFirstArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Share that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindFirstOrThrowArgs} args - Arguments to find a Share
     * @example
     * // Get one Share
     * const share = await prisma.share.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareFindFirstOrThrowArgs>(args?: SelectSubset<T, ShareFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Shares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shares
     * const shares = await prisma.share.findMany()
     * 
     * // Get first 10 Shares
     * const shares = await prisma.share.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareWithIdOnly = await prisma.share.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShareFindManyArgs>(args?: SelectSubset<T, ShareFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Share.
     * @param {ShareCreateArgs} args - Arguments to create a Share.
     * @example
     * // Create one Share
     * const Share = await prisma.share.create({
     *   data: {
     *     // ... data to create a Share
     *   }
     * })
     * 
     */
    create<T extends ShareCreateArgs>(args: SelectSubset<T, ShareCreateArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Shares.
     * @param {ShareCreateManyArgs} args - Arguments to create many Shares.
     * @example
     * // Create many Shares
     * const share = await prisma.share.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShareCreateManyArgs>(args?: SelectSubset<T, ShareCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Share.
     * @param {ShareDeleteArgs} args - Arguments to delete one Share.
     * @example
     * // Delete one Share
     * const Share = await prisma.share.delete({
     *   where: {
     *     // ... filter to delete one Share
     *   }
     * })
     * 
     */
    delete<T extends ShareDeleteArgs>(args: SelectSubset<T, ShareDeleteArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Share.
     * @param {ShareUpdateArgs} args - Arguments to update one Share.
     * @example
     * // Update one Share
     * const share = await prisma.share.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShareUpdateArgs>(args: SelectSubset<T, ShareUpdateArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Shares.
     * @param {ShareDeleteManyArgs} args - Arguments to filter Shares to delete.
     * @example
     * // Delete a few Shares
     * const { count } = await prisma.share.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShareDeleteManyArgs>(args?: SelectSubset<T, ShareDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shares
     * const share = await prisma.share.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShareUpdateManyArgs>(args: SelectSubset<T, ShareUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Share.
     * @param {ShareUpsertArgs} args - Arguments to update or create a Share.
     * @example
     * // Update or create a Share
     * const share = await prisma.share.upsert({
     *   create: {
     *     // ... data to create a Share
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Share we want to update
     *   }
     * })
     */
    upsert<T extends ShareUpsertArgs>(args: SelectSubset<T, ShareUpsertArgs<ExtArgs>>): Prisma__ShareClient<$Result.GetResult<Prisma.$SharePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Shares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareCountArgs} args - Arguments to filter Shares to count.
     * @example
     * // Count the number of Shares
     * const count = await prisma.share.count({
     *   where: {
     *     // ... the filter for the Shares we want to count
     *   }
     * })
    **/
    count<T extends ShareCountArgs>(
      args?: Subset<T, ShareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Share.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareAggregateArgs>(args: Subset<T, ShareAggregateArgs>): Prisma.PrismaPromise<GetShareAggregateType<T>>

    /**
     * Group by Share.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareGroupByArgs['orderBy'] }
        : { orderBy?: ShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Share model
   */
  readonly fields: ShareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Share.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shareholders<T extends Share$shareholdersArgs<ExtArgs> = {}>(args?: Subset<T, Share$shareholdersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Share model
   */ 
  interface ShareFieldRefs {
    readonly id: FieldRef<"Share", 'String'>
    readonly noOfShare: FieldRef<"Share", 'String'>
    readonly totalSubscribedAmount: FieldRef<"Share", 'String'>
    readonly totalPaidAmount: FieldRef<"Share", 'String'>
    readonly premiumAmount: FieldRef<"Share", 'String'>
    readonly serviceChargeAmount: FieldRef<"Share", 'String'>
    readonly createdAt: FieldRef<"Share", 'DateTime'>
    readonly updatedAt: FieldRef<"Share", 'DateTime'>
    readonly createdBy: FieldRef<"Share", 'Int'>
    readonly updatedBy: FieldRef<"Share", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Share findUnique
   */
  export type ShareFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * Filter, which Share to fetch.
     */
    where: ShareWhereUniqueInput
  }

  /**
   * Share findUniqueOrThrow
   */
  export type ShareFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * Filter, which Share to fetch.
     */
    where: ShareWhereUniqueInput
  }

  /**
   * Share findFirst
   */
  export type ShareFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * Filter, which Share to fetch.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shares.
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shares.
     */
    distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[]
  }

  /**
   * Share findFirstOrThrow
   */
  export type ShareFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * Filter, which Share to fetch.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shares.
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shares.
     */
    distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[]
  }

  /**
   * Share findMany
   */
  export type ShareFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * Filter, which Shares to fetch.
     */
    where?: ShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shares to fetch.
     */
    orderBy?: ShareOrderByWithRelationInput | ShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shares.
     */
    cursor?: ShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shares.
     */
    skip?: number
    distinct?: ShareScalarFieldEnum | ShareScalarFieldEnum[]
  }

  /**
   * Share create
   */
  export type ShareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * The data needed to create a Share.
     */
    data: XOR<ShareCreateInput, ShareUncheckedCreateInput>
  }

  /**
   * Share createMany
   */
  export type ShareCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shares.
     */
    data: ShareCreateManyInput | ShareCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Share update
   */
  export type ShareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * The data needed to update a Share.
     */
    data: XOR<ShareUpdateInput, ShareUncheckedUpdateInput>
    /**
     * Choose, which Share to update.
     */
    where: ShareWhereUniqueInput
  }

  /**
   * Share updateMany
   */
  export type ShareUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shares.
     */
    data: XOR<ShareUpdateManyMutationInput, ShareUncheckedUpdateManyInput>
    /**
     * Filter which Shares to update
     */
    where?: ShareWhereInput
  }

  /**
   * Share upsert
   */
  export type ShareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * The filter to search for the Share to update in case it exists.
     */
    where: ShareWhereUniqueInput
    /**
     * In case the Share found by the `where` argument doesn't exist, create a new Share with this data.
     */
    create: XOR<ShareCreateInput, ShareUncheckedCreateInput>
    /**
     * In case the Share was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareUpdateInput, ShareUncheckedUpdateInput>
  }

  /**
   * Share delete
   */
  export type ShareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
    /**
     * Filter which Share to delete.
     */
    where: ShareWhereUniqueInput
  }

  /**
   * Share deleteMany
   */
  export type ShareDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shares to delete
     */
    where?: ShareWhereInput
  }

  /**
   * Share.shareholders
   */
  export type Share$shareholdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholder
     */
    select?: ShareholderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholderInclude<ExtArgs> | null
    where?: ShareholderWhereInput
    orderBy?: ShareholderOrderByWithRelationInput | ShareholderOrderByWithRelationInput[]
    cursor?: ShareholderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareholderScalarFieldEnum | ShareholderScalarFieldEnum[]
  }

  /**
   * Share without action
   */
  export type ShareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Share
     */
    select?: ShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareInclude<ExtArgs> | null
  }


  /**
   * Model ShareTransaction
   */

  export type AggregateShareTransaction = {
    _count: ShareTransactionCountAggregateOutputType | null
    _avg: ShareTransactionAvgAggregateOutputType | null
    _sum: ShareTransactionSumAggregateOutputType | null
    _min: ShareTransactionMinAggregateOutputType | null
    _max: ShareTransactionMaxAggregateOutputType | null
  }

  export type ShareTransactionAvgAggregateOutputType = {
    id: number | null
    fycType: number | null
    paymentReason: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareTransactionSumAggregateOutputType = {
    id: number | null
    fycType: number | null
    paymentReason: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareTransactionMinAggregateOutputType = {
    id: number | null
    shareholderId: string | null
    shareholdingId: string | null
    paidAmount: string | null
    fycType: number | null
    paymentReason: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareTransactionMaxAggregateOutputType = {
    id: number | null
    shareholderId: string | null
    shareholdingId: string | null
    paidAmount: string | null
    fycType: number | null
    paymentReason: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareTransactionCountAggregateOutputType = {
    id: number
    shareholderId: number
    shareholdingId: number
    paidAmount: number
    fycType: number
    paymentReason: number
    createdAt: number
    updatedAt: number
    createdBy: number
    updatedBy: number
    _all: number
  }


  export type ShareTransactionAvgAggregateInputType = {
    id?: true
    fycType?: true
    paymentReason?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareTransactionSumAggregateInputType = {
    id?: true
    fycType?: true
    paymentReason?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareTransactionMinAggregateInputType = {
    id?: true
    shareholderId?: true
    shareholdingId?: true
    paidAmount?: true
    fycType?: true
    paymentReason?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareTransactionMaxAggregateInputType = {
    id?: true
    shareholderId?: true
    shareholdingId?: true
    paidAmount?: true
    fycType?: true
    paymentReason?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareTransactionCountAggregateInputType = {
    id?: true
    shareholderId?: true
    shareholdingId?: true
    paidAmount?: true
    fycType?: true
    paymentReason?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
    _all?: true
  }

  export type ShareTransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareTransaction to aggregate.
     */
    where?: ShareTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareTransactions to fetch.
     */
    orderBy?: ShareTransactionOrderByWithRelationInput | ShareTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShareTransactions
    **/
    _count?: true | ShareTransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareTransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareTransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareTransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareTransactionMaxAggregateInputType
  }

  export type GetShareTransactionAggregateType<T extends ShareTransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateShareTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShareTransaction[P]>
      : GetScalarType<T[P], AggregateShareTransaction[P]>
  }




  export type ShareTransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareTransactionWhereInput
    orderBy?: ShareTransactionOrderByWithAggregationInput | ShareTransactionOrderByWithAggregationInput[]
    by: ShareTransactionScalarFieldEnum[] | ShareTransactionScalarFieldEnum
    having?: ShareTransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareTransactionCountAggregateInputType | true
    _avg?: ShareTransactionAvgAggregateInputType
    _sum?: ShareTransactionSumAggregateInputType
    _min?: ShareTransactionMinAggregateInputType
    _max?: ShareTransactionMaxAggregateInputType
  }

  export type ShareTransactionGroupByOutputType = {
    id: number
    shareholderId: string
    shareholdingId: string
    paidAmount: string
    fycType: number
    paymentReason: number
    createdAt: Date
    updatedAt: Date
    createdBy: number | null
    updatedBy: number | null
    _count: ShareTransactionCountAggregateOutputType | null
    _avg: ShareTransactionAvgAggregateOutputType | null
    _sum: ShareTransactionSumAggregateOutputType | null
    _min: ShareTransactionMinAggregateOutputType | null
    _max: ShareTransactionMaxAggregateOutputType | null
  }

  type GetShareTransactionGroupByPayload<T extends ShareTransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareTransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareTransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareTransactionGroupByOutputType[P]>
            : GetScalarType<T[P], ShareTransactionGroupByOutputType[P]>
        }
      >
    >


  export type ShareTransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareholderId?: boolean
    shareholdingId?: boolean
    paidAmount?: boolean
    fycType?: boolean
    paymentReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    shareholder?: boolean | ShareholderDefaultArgs<ExtArgs>
    shareholding?: boolean | ShareholdingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareTransaction"]>


  export type ShareTransactionSelectScalar = {
    id?: boolean
    shareholderId?: boolean
    shareholdingId?: boolean
    paidAmount?: boolean
    fycType?: boolean
    paymentReason?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }

  export type ShareTransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareholder?: boolean | ShareholderDefaultArgs<ExtArgs>
    shareholding?: boolean | ShareholdingDefaultArgs<ExtArgs>
  }

  export type $ShareTransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShareTransaction"
    objects: {
      shareholder: Prisma.$ShareholderPayload<ExtArgs>
      shareholding: Prisma.$ShareholdingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      shareholderId: string
      shareholdingId: string
      paidAmount: string
      fycType: number
      paymentReason: number
      createdAt: Date
      updatedAt: Date
      createdBy: number | null
      updatedBy: number | null
    }, ExtArgs["result"]["shareTransaction"]>
    composites: {}
  }

  type ShareTransactionGetPayload<S extends boolean | null | undefined | ShareTransactionDefaultArgs> = $Result.GetResult<Prisma.$ShareTransactionPayload, S>

  type ShareTransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShareTransactionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShareTransactionCountAggregateInputType | true
    }

  export interface ShareTransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShareTransaction'], meta: { name: 'ShareTransaction' } }
    /**
     * Find zero or one ShareTransaction that matches the filter.
     * @param {ShareTransactionFindUniqueArgs} args - Arguments to find a ShareTransaction
     * @example
     * // Get one ShareTransaction
     * const shareTransaction = await prisma.shareTransaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareTransactionFindUniqueArgs>(args: SelectSubset<T, ShareTransactionFindUniqueArgs<ExtArgs>>): Prisma__ShareTransactionClient<$Result.GetResult<Prisma.$ShareTransactionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ShareTransaction that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShareTransactionFindUniqueOrThrowArgs} args - Arguments to find a ShareTransaction
     * @example
     * // Get one ShareTransaction
     * const shareTransaction = await prisma.shareTransaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareTransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, ShareTransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShareTransactionClient<$Result.GetResult<Prisma.$ShareTransactionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ShareTransaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareTransactionFindFirstArgs} args - Arguments to find a ShareTransaction
     * @example
     * // Get one ShareTransaction
     * const shareTransaction = await prisma.shareTransaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareTransactionFindFirstArgs>(args?: SelectSubset<T, ShareTransactionFindFirstArgs<ExtArgs>>): Prisma__ShareTransactionClient<$Result.GetResult<Prisma.$ShareTransactionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ShareTransaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareTransactionFindFirstOrThrowArgs} args - Arguments to find a ShareTransaction
     * @example
     * // Get one ShareTransaction
     * const shareTransaction = await prisma.shareTransaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareTransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, ShareTransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShareTransactionClient<$Result.GetResult<Prisma.$ShareTransactionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ShareTransactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareTransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShareTransactions
     * const shareTransactions = await prisma.shareTransaction.findMany()
     * 
     * // Get first 10 ShareTransactions
     * const shareTransactions = await prisma.shareTransaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareTransactionWithIdOnly = await prisma.shareTransaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShareTransactionFindManyArgs>(args?: SelectSubset<T, ShareTransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareTransactionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ShareTransaction.
     * @param {ShareTransactionCreateArgs} args - Arguments to create a ShareTransaction.
     * @example
     * // Create one ShareTransaction
     * const ShareTransaction = await prisma.shareTransaction.create({
     *   data: {
     *     // ... data to create a ShareTransaction
     *   }
     * })
     * 
     */
    create<T extends ShareTransactionCreateArgs>(args: SelectSubset<T, ShareTransactionCreateArgs<ExtArgs>>): Prisma__ShareTransactionClient<$Result.GetResult<Prisma.$ShareTransactionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ShareTransactions.
     * @param {ShareTransactionCreateManyArgs} args - Arguments to create many ShareTransactions.
     * @example
     * // Create many ShareTransactions
     * const shareTransaction = await prisma.shareTransaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShareTransactionCreateManyArgs>(args?: SelectSubset<T, ShareTransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ShareTransaction.
     * @param {ShareTransactionDeleteArgs} args - Arguments to delete one ShareTransaction.
     * @example
     * // Delete one ShareTransaction
     * const ShareTransaction = await prisma.shareTransaction.delete({
     *   where: {
     *     // ... filter to delete one ShareTransaction
     *   }
     * })
     * 
     */
    delete<T extends ShareTransactionDeleteArgs>(args: SelectSubset<T, ShareTransactionDeleteArgs<ExtArgs>>): Prisma__ShareTransactionClient<$Result.GetResult<Prisma.$ShareTransactionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ShareTransaction.
     * @param {ShareTransactionUpdateArgs} args - Arguments to update one ShareTransaction.
     * @example
     * // Update one ShareTransaction
     * const shareTransaction = await prisma.shareTransaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShareTransactionUpdateArgs>(args: SelectSubset<T, ShareTransactionUpdateArgs<ExtArgs>>): Prisma__ShareTransactionClient<$Result.GetResult<Prisma.$ShareTransactionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ShareTransactions.
     * @param {ShareTransactionDeleteManyArgs} args - Arguments to filter ShareTransactions to delete.
     * @example
     * // Delete a few ShareTransactions
     * const { count } = await prisma.shareTransaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShareTransactionDeleteManyArgs>(args?: SelectSubset<T, ShareTransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareTransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShareTransactions
     * const shareTransaction = await prisma.shareTransaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShareTransactionUpdateManyArgs>(args: SelectSubset<T, ShareTransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShareTransaction.
     * @param {ShareTransactionUpsertArgs} args - Arguments to update or create a ShareTransaction.
     * @example
     * // Update or create a ShareTransaction
     * const shareTransaction = await prisma.shareTransaction.upsert({
     *   create: {
     *     // ... data to create a ShareTransaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShareTransaction we want to update
     *   }
     * })
     */
    upsert<T extends ShareTransactionUpsertArgs>(args: SelectSubset<T, ShareTransactionUpsertArgs<ExtArgs>>): Prisma__ShareTransactionClient<$Result.GetResult<Prisma.$ShareTransactionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ShareTransactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareTransactionCountArgs} args - Arguments to filter ShareTransactions to count.
     * @example
     * // Count the number of ShareTransactions
     * const count = await prisma.shareTransaction.count({
     *   where: {
     *     // ... the filter for the ShareTransactions we want to count
     *   }
     * })
    **/
    count<T extends ShareTransactionCountArgs>(
      args?: Subset<T, ShareTransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareTransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShareTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareTransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareTransactionAggregateArgs>(args: Subset<T, ShareTransactionAggregateArgs>): Prisma.PrismaPromise<GetShareTransactionAggregateType<T>>

    /**
     * Group by ShareTransaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareTransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareTransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareTransactionGroupByArgs['orderBy'] }
        : { orderBy?: ShareTransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareTransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShareTransaction model
   */
  readonly fields: ShareTransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShareTransaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareTransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shareholder<T extends ShareholderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShareholderDefaultArgs<ExtArgs>>): Prisma__ShareholderClient<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    shareholding<T extends ShareholdingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShareholdingDefaultArgs<ExtArgs>>): Prisma__ShareholdingClient<$Result.GetResult<Prisma.$ShareholdingPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShareTransaction model
   */ 
  interface ShareTransactionFieldRefs {
    readonly id: FieldRef<"ShareTransaction", 'Int'>
    readonly shareholderId: FieldRef<"ShareTransaction", 'String'>
    readonly shareholdingId: FieldRef<"ShareTransaction", 'String'>
    readonly paidAmount: FieldRef<"ShareTransaction", 'String'>
    readonly fycType: FieldRef<"ShareTransaction", 'Int'>
    readonly paymentReason: FieldRef<"ShareTransaction", 'Int'>
    readonly createdAt: FieldRef<"ShareTransaction", 'DateTime'>
    readonly updatedAt: FieldRef<"ShareTransaction", 'DateTime'>
    readonly createdBy: FieldRef<"ShareTransaction", 'Int'>
    readonly updatedBy: FieldRef<"ShareTransaction", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ShareTransaction findUnique
   */
  export type ShareTransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransaction
     */
    select?: ShareTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ShareTransaction to fetch.
     */
    where: ShareTransactionWhereUniqueInput
  }

  /**
   * ShareTransaction findUniqueOrThrow
   */
  export type ShareTransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransaction
     */
    select?: ShareTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ShareTransaction to fetch.
     */
    where: ShareTransactionWhereUniqueInput
  }

  /**
   * ShareTransaction findFirst
   */
  export type ShareTransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransaction
     */
    select?: ShareTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ShareTransaction to fetch.
     */
    where?: ShareTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareTransactions to fetch.
     */
    orderBy?: ShareTransactionOrderByWithRelationInput | ShareTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareTransactions.
     */
    cursor?: ShareTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareTransactions.
     */
    distinct?: ShareTransactionScalarFieldEnum | ShareTransactionScalarFieldEnum[]
  }

  /**
   * ShareTransaction findFirstOrThrow
   */
  export type ShareTransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransaction
     */
    select?: ShareTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ShareTransaction to fetch.
     */
    where?: ShareTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareTransactions to fetch.
     */
    orderBy?: ShareTransactionOrderByWithRelationInput | ShareTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareTransactions.
     */
    cursor?: ShareTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareTransactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareTransactions.
     */
    distinct?: ShareTransactionScalarFieldEnum | ShareTransactionScalarFieldEnum[]
  }

  /**
   * ShareTransaction findMany
   */
  export type ShareTransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransaction
     */
    select?: ShareTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransactionInclude<ExtArgs> | null
    /**
     * Filter, which ShareTransactions to fetch.
     */
    where?: ShareTransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareTransactions to fetch.
     */
    orderBy?: ShareTransactionOrderByWithRelationInput | ShareTransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShareTransactions.
     */
    cursor?: ShareTransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareTransactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareTransactions.
     */
    skip?: number
    distinct?: ShareTransactionScalarFieldEnum | ShareTransactionScalarFieldEnum[]
  }

  /**
   * ShareTransaction create
   */
  export type ShareTransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransaction
     */
    select?: ShareTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a ShareTransaction.
     */
    data: XOR<ShareTransactionCreateInput, ShareTransactionUncheckedCreateInput>
  }

  /**
   * ShareTransaction createMany
   */
  export type ShareTransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShareTransactions.
     */
    data: ShareTransactionCreateManyInput | ShareTransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShareTransaction update
   */
  export type ShareTransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransaction
     */
    select?: ShareTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a ShareTransaction.
     */
    data: XOR<ShareTransactionUpdateInput, ShareTransactionUncheckedUpdateInput>
    /**
     * Choose, which ShareTransaction to update.
     */
    where: ShareTransactionWhereUniqueInput
  }

  /**
   * ShareTransaction updateMany
   */
  export type ShareTransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShareTransactions.
     */
    data: XOR<ShareTransactionUpdateManyMutationInput, ShareTransactionUncheckedUpdateManyInput>
    /**
     * Filter which ShareTransactions to update
     */
    where?: ShareTransactionWhereInput
  }

  /**
   * ShareTransaction upsert
   */
  export type ShareTransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransaction
     */
    select?: ShareTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the ShareTransaction to update in case it exists.
     */
    where: ShareTransactionWhereUniqueInput
    /**
     * In case the ShareTransaction found by the `where` argument doesn't exist, create a new ShareTransaction with this data.
     */
    create: XOR<ShareTransactionCreateInput, ShareTransactionUncheckedCreateInput>
    /**
     * In case the ShareTransaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareTransactionUpdateInput, ShareTransactionUncheckedUpdateInput>
  }

  /**
   * ShareTransaction delete
   */
  export type ShareTransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransaction
     */
    select?: ShareTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransactionInclude<ExtArgs> | null
    /**
     * Filter which ShareTransaction to delete.
     */
    where: ShareTransactionWhereUniqueInput
  }

  /**
   * ShareTransaction deleteMany
   */
  export type ShareTransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareTransactions to delete
     */
    where?: ShareTransactionWhereInput
  }

  /**
   * ShareTransaction without action
   */
  export type ShareTransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransaction
     */
    select?: ShareTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransactionInclude<ExtArgs> | null
  }


  /**
   * Model Shareholding
   */

  export type AggregateShareholding = {
    _count: ShareholdingCountAggregateOutputType | null
    _avg: ShareholdingAvgAggregateOutputType | null
    _sum: ShareholdingSumAggregateOutputType | null
    _min: ShareholdingMinAggregateOutputType | null
    _max: ShareholdingMaxAggregateOutputType | null
  }

  export type ShareholdingAvgAggregateOutputType = {
    serialNumber: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareholdingSumAggregateOutputType = {
    serialNumber: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareholdingMinAggregateOutputType = {
    id: string | null
    shareholderId: string | null
    serialNumber: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareholdingMaxAggregateOutputType = {
    id: string | null
    shareholderId: string | null
    serialNumber: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareholdingCountAggregateOutputType = {
    id: number
    shareholderId: number
    serialNumber: number
    createdAt: number
    updatedAt: number
    createdBy: number
    updatedBy: number
    _all: number
  }


  export type ShareholdingAvgAggregateInputType = {
    serialNumber?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareholdingSumAggregateInputType = {
    serialNumber?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareholdingMinAggregateInputType = {
    id?: true
    shareholderId?: true
    serialNumber?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareholdingMaxAggregateInputType = {
    id?: true
    shareholderId?: true
    serialNumber?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareholdingCountAggregateInputType = {
    id?: true
    shareholderId?: true
    serialNumber?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
    _all?: true
  }

  export type ShareholdingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shareholding to aggregate.
     */
    where?: ShareholdingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shareholdings to fetch.
     */
    orderBy?: ShareholdingOrderByWithRelationInput | ShareholdingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareholdingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shareholdings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shareholdings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Shareholdings
    **/
    _count?: true | ShareholdingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareholdingAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareholdingSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareholdingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareholdingMaxAggregateInputType
  }

  export type GetShareholdingAggregateType<T extends ShareholdingAggregateArgs> = {
        [P in keyof T & keyof AggregateShareholding]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShareholding[P]>
      : GetScalarType<T[P], AggregateShareholding[P]>
  }




  export type ShareholdingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareholdingWhereInput
    orderBy?: ShareholdingOrderByWithAggregationInput | ShareholdingOrderByWithAggregationInput[]
    by: ShareholdingScalarFieldEnum[] | ShareholdingScalarFieldEnum
    having?: ShareholdingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareholdingCountAggregateInputType | true
    _avg?: ShareholdingAvgAggregateInputType
    _sum?: ShareholdingSumAggregateInputType
    _min?: ShareholdingMinAggregateInputType
    _max?: ShareholdingMaxAggregateInputType
  }

  export type ShareholdingGroupByOutputType = {
    id: string
    shareholderId: string
    serialNumber: number
    createdAt: Date
    updatedAt: Date
    createdBy: number | null
    updatedBy: number | null
    _count: ShareholdingCountAggregateOutputType | null
    _avg: ShareholdingAvgAggregateOutputType | null
    _sum: ShareholdingSumAggregateOutputType | null
    _min: ShareholdingMinAggregateOutputType | null
    _max: ShareholdingMaxAggregateOutputType | null
  }

  type GetShareholdingGroupByPayload<T extends ShareholdingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareholdingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareholdingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareholdingGroupByOutputType[P]>
            : GetScalarType<T[P], ShareholdingGroupByOutputType[P]>
        }
      >
    >


  export type ShareholdingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    shareholderId?: boolean
    serialNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    shareholder?: boolean | ShareholderDefaultArgs<ExtArgs>
    shareTransaction?: boolean | Shareholding$shareTransactionArgs<ExtArgs>
    _count?: boolean | ShareholdingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareholding"]>


  export type ShareholdingSelectScalar = {
    id?: boolean
    shareholderId?: boolean
    serialNumber?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }

  export type ShareholdingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    shareholder?: boolean | ShareholderDefaultArgs<ExtArgs>
    shareTransaction?: boolean | Shareholding$shareTransactionArgs<ExtArgs>
    _count?: boolean | ShareholdingCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ShareholdingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Shareholding"
    objects: {
      shareholder: Prisma.$ShareholderPayload<ExtArgs>
      shareTransaction: Prisma.$ShareTransactionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      shareholderId: string
      serialNumber: number
      createdAt: Date
      updatedAt: Date
      createdBy: number | null
      updatedBy: number | null
    }, ExtArgs["result"]["shareholding"]>
    composites: {}
  }

  type ShareholdingGetPayload<S extends boolean | null | undefined | ShareholdingDefaultArgs> = $Result.GetResult<Prisma.$ShareholdingPayload, S>

  type ShareholdingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShareholdingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShareholdingCountAggregateInputType | true
    }

  export interface ShareholdingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Shareholding'], meta: { name: 'Shareholding' } }
    /**
     * Find zero or one Shareholding that matches the filter.
     * @param {ShareholdingFindUniqueArgs} args - Arguments to find a Shareholding
     * @example
     * // Get one Shareholding
     * const shareholding = await prisma.shareholding.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareholdingFindUniqueArgs>(args: SelectSubset<T, ShareholdingFindUniqueArgs<ExtArgs>>): Prisma__ShareholdingClient<$Result.GetResult<Prisma.$ShareholdingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Shareholding that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShareholdingFindUniqueOrThrowArgs} args - Arguments to find a Shareholding
     * @example
     * // Get one Shareholding
     * const shareholding = await prisma.shareholding.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareholdingFindUniqueOrThrowArgs>(args: SelectSubset<T, ShareholdingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShareholdingClient<$Result.GetResult<Prisma.$ShareholdingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Shareholding that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholdingFindFirstArgs} args - Arguments to find a Shareholding
     * @example
     * // Get one Shareholding
     * const shareholding = await prisma.shareholding.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareholdingFindFirstArgs>(args?: SelectSubset<T, ShareholdingFindFirstArgs<ExtArgs>>): Prisma__ShareholdingClient<$Result.GetResult<Prisma.$ShareholdingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Shareholding that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholdingFindFirstOrThrowArgs} args - Arguments to find a Shareholding
     * @example
     * // Get one Shareholding
     * const shareholding = await prisma.shareholding.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareholdingFindFirstOrThrowArgs>(args?: SelectSubset<T, ShareholdingFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShareholdingClient<$Result.GetResult<Prisma.$ShareholdingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Shareholdings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholdingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shareholdings
     * const shareholdings = await prisma.shareholding.findMany()
     * 
     * // Get first 10 Shareholdings
     * const shareholdings = await prisma.shareholding.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareholdingWithIdOnly = await prisma.shareholding.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShareholdingFindManyArgs>(args?: SelectSubset<T, ShareholdingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareholdingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Shareholding.
     * @param {ShareholdingCreateArgs} args - Arguments to create a Shareholding.
     * @example
     * // Create one Shareholding
     * const Shareholding = await prisma.shareholding.create({
     *   data: {
     *     // ... data to create a Shareholding
     *   }
     * })
     * 
     */
    create<T extends ShareholdingCreateArgs>(args: SelectSubset<T, ShareholdingCreateArgs<ExtArgs>>): Prisma__ShareholdingClient<$Result.GetResult<Prisma.$ShareholdingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Shareholdings.
     * @param {ShareholdingCreateManyArgs} args - Arguments to create many Shareholdings.
     * @example
     * // Create many Shareholdings
     * const shareholding = await prisma.shareholding.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShareholdingCreateManyArgs>(args?: SelectSubset<T, ShareholdingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Shareholding.
     * @param {ShareholdingDeleteArgs} args - Arguments to delete one Shareholding.
     * @example
     * // Delete one Shareholding
     * const Shareholding = await prisma.shareholding.delete({
     *   where: {
     *     // ... filter to delete one Shareholding
     *   }
     * })
     * 
     */
    delete<T extends ShareholdingDeleteArgs>(args: SelectSubset<T, ShareholdingDeleteArgs<ExtArgs>>): Prisma__ShareholdingClient<$Result.GetResult<Prisma.$ShareholdingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Shareholding.
     * @param {ShareholdingUpdateArgs} args - Arguments to update one Shareholding.
     * @example
     * // Update one Shareholding
     * const shareholding = await prisma.shareholding.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShareholdingUpdateArgs>(args: SelectSubset<T, ShareholdingUpdateArgs<ExtArgs>>): Prisma__ShareholdingClient<$Result.GetResult<Prisma.$ShareholdingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Shareholdings.
     * @param {ShareholdingDeleteManyArgs} args - Arguments to filter Shareholdings to delete.
     * @example
     * // Delete a few Shareholdings
     * const { count } = await prisma.shareholding.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShareholdingDeleteManyArgs>(args?: SelectSubset<T, ShareholdingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shareholdings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholdingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shareholdings
     * const shareholding = await prisma.shareholding.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShareholdingUpdateManyArgs>(args: SelectSubset<T, ShareholdingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Shareholding.
     * @param {ShareholdingUpsertArgs} args - Arguments to update or create a Shareholding.
     * @example
     * // Update or create a Shareholding
     * const shareholding = await prisma.shareholding.upsert({
     *   create: {
     *     // ... data to create a Shareholding
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shareholding we want to update
     *   }
     * })
     */
    upsert<T extends ShareholdingUpsertArgs>(args: SelectSubset<T, ShareholdingUpsertArgs<ExtArgs>>): Prisma__ShareholdingClient<$Result.GetResult<Prisma.$ShareholdingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Shareholdings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholdingCountArgs} args - Arguments to filter Shareholdings to count.
     * @example
     * // Count the number of Shareholdings
     * const count = await prisma.shareholding.count({
     *   where: {
     *     // ... the filter for the Shareholdings we want to count
     *   }
     * })
    **/
    count<T extends ShareholdingCountArgs>(
      args?: Subset<T, ShareholdingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareholdingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shareholding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholdingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareholdingAggregateArgs>(args: Subset<T, ShareholdingAggregateArgs>): Prisma.PrismaPromise<GetShareholdingAggregateType<T>>

    /**
     * Group by Shareholding.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareholdingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareholdingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareholdingGroupByArgs['orderBy'] }
        : { orderBy?: ShareholdingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareholdingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareholdingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Shareholding model
   */
  readonly fields: ShareholdingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Shareholding.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareholdingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    shareholder<T extends ShareholderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShareholderDefaultArgs<ExtArgs>>): Prisma__ShareholderClient<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    shareTransaction<T extends Shareholding$shareTransactionArgs<ExtArgs> = {}>(args?: Subset<T, Shareholding$shareTransactionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareTransactionPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Shareholding model
   */ 
  interface ShareholdingFieldRefs {
    readonly id: FieldRef<"Shareholding", 'String'>
    readonly shareholderId: FieldRef<"Shareholding", 'String'>
    readonly serialNumber: FieldRef<"Shareholding", 'Int'>
    readonly createdAt: FieldRef<"Shareholding", 'DateTime'>
    readonly updatedAt: FieldRef<"Shareholding", 'DateTime'>
    readonly createdBy: FieldRef<"Shareholding", 'Int'>
    readonly updatedBy: FieldRef<"Shareholding", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Shareholding findUnique
   */
  export type ShareholdingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholding
     */
    select?: ShareholdingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholdingInclude<ExtArgs> | null
    /**
     * Filter, which Shareholding to fetch.
     */
    where: ShareholdingWhereUniqueInput
  }

  /**
   * Shareholding findUniqueOrThrow
   */
  export type ShareholdingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholding
     */
    select?: ShareholdingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholdingInclude<ExtArgs> | null
    /**
     * Filter, which Shareholding to fetch.
     */
    where: ShareholdingWhereUniqueInput
  }

  /**
   * Shareholding findFirst
   */
  export type ShareholdingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholding
     */
    select?: ShareholdingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholdingInclude<ExtArgs> | null
    /**
     * Filter, which Shareholding to fetch.
     */
    where?: ShareholdingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shareholdings to fetch.
     */
    orderBy?: ShareholdingOrderByWithRelationInput | ShareholdingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shareholdings.
     */
    cursor?: ShareholdingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shareholdings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shareholdings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shareholdings.
     */
    distinct?: ShareholdingScalarFieldEnum | ShareholdingScalarFieldEnum[]
  }

  /**
   * Shareholding findFirstOrThrow
   */
  export type ShareholdingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholding
     */
    select?: ShareholdingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholdingInclude<ExtArgs> | null
    /**
     * Filter, which Shareholding to fetch.
     */
    where?: ShareholdingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shareholdings to fetch.
     */
    orderBy?: ShareholdingOrderByWithRelationInput | ShareholdingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Shareholdings.
     */
    cursor?: ShareholdingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shareholdings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shareholdings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Shareholdings.
     */
    distinct?: ShareholdingScalarFieldEnum | ShareholdingScalarFieldEnum[]
  }

  /**
   * Shareholding findMany
   */
  export type ShareholdingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholding
     */
    select?: ShareholdingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholdingInclude<ExtArgs> | null
    /**
     * Filter, which Shareholdings to fetch.
     */
    where?: ShareholdingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Shareholdings to fetch.
     */
    orderBy?: ShareholdingOrderByWithRelationInput | ShareholdingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Shareholdings.
     */
    cursor?: ShareholdingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Shareholdings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Shareholdings.
     */
    skip?: number
    distinct?: ShareholdingScalarFieldEnum | ShareholdingScalarFieldEnum[]
  }

  /**
   * Shareholding create
   */
  export type ShareholdingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholding
     */
    select?: ShareholdingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholdingInclude<ExtArgs> | null
    /**
     * The data needed to create a Shareholding.
     */
    data: XOR<ShareholdingCreateInput, ShareholdingUncheckedCreateInput>
  }

  /**
   * Shareholding createMany
   */
  export type ShareholdingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Shareholdings.
     */
    data: ShareholdingCreateManyInput | ShareholdingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Shareholding update
   */
  export type ShareholdingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholding
     */
    select?: ShareholdingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholdingInclude<ExtArgs> | null
    /**
     * The data needed to update a Shareholding.
     */
    data: XOR<ShareholdingUpdateInput, ShareholdingUncheckedUpdateInput>
    /**
     * Choose, which Shareholding to update.
     */
    where: ShareholdingWhereUniqueInput
  }

  /**
   * Shareholding updateMany
   */
  export type ShareholdingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Shareholdings.
     */
    data: XOR<ShareholdingUpdateManyMutationInput, ShareholdingUncheckedUpdateManyInput>
    /**
     * Filter which Shareholdings to update
     */
    where?: ShareholdingWhereInput
  }

  /**
   * Shareholding upsert
   */
  export type ShareholdingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholding
     */
    select?: ShareholdingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholdingInclude<ExtArgs> | null
    /**
     * The filter to search for the Shareholding to update in case it exists.
     */
    where: ShareholdingWhereUniqueInput
    /**
     * In case the Shareholding found by the `where` argument doesn't exist, create a new Shareholding with this data.
     */
    create: XOR<ShareholdingCreateInput, ShareholdingUncheckedCreateInput>
    /**
     * In case the Shareholding was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareholdingUpdateInput, ShareholdingUncheckedUpdateInput>
  }

  /**
   * Shareholding delete
   */
  export type ShareholdingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholding
     */
    select?: ShareholdingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholdingInclude<ExtArgs> | null
    /**
     * Filter which Shareholding to delete.
     */
    where: ShareholdingWhereUniqueInput
  }

  /**
   * Shareholding deleteMany
   */
  export type ShareholdingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Shareholdings to delete
     */
    where?: ShareholdingWhereInput
  }

  /**
   * Shareholding.shareTransaction
   */
  export type Shareholding$shareTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransaction
     */
    select?: ShareTransactionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransactionInclude<ExtArgs> | null
    where?: ShareTransactionWhereInput
    orderBy?: ShareTransactionOrderByWithRelationInput | ShareTransactionOrderByWithRelationInput[]
    cursor?: ShareTransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ShareTransactionScalarFieldEnum | ShareTransactionScalarFieldEnum[]
  }

  /**
   * Shareholding without action
   */
  export type ShareholdingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Shareholding
     */
    select?: ShareholdingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareholdingInclude<ExtArgs> | null
  }


  /**
   * Model ShareTransfer
   */

  export type AggregateShareTransfer = {
    _count: ShareTransferCountAggregateOutputType | null
    _avg: ShareTransferAvgAggregateOutputType | null
    _sum: ShareTransferSumAggregateOutputType | null
    _min: ShareTransferMinAggregateOutputType | null
    _max: ShareTransferMaxAggregateOutputType | null
  }

  export type ShareTransferAvgAggregateOutputType = {
    id: number | null
    placeOfTransferId: number | null
    transferType: number | null
    serialNumber: number | null
    fycType: number | null
    paymentReason: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareTransferSumAggregateOutputType = {
    id: number | null
    placeOfTransferId: number | null
    transferType: number | null
    serialNumber: number | null
    fycType: number | null
    paymentReason: number | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareTransferMinAggregateOutputType = {
    id: number | null
    fromShareholderId: string | null
    toShareholderId: string | null
    placeOfTransferId: number | null
    transferType: number | null
    serialNumber: number | null
    fycType: number | null
    paymentReason: number | null
    transferDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareTransferMaxAggregateOutputType = {
    id: number | null
    fromShareholderId: string | null
    toShareholderId: string | null
    placeOfTransferId: number | null
    transferType: number | null
    serialNumber: number | null
    fycType: number | null
    paymentReason: number | null
    transferDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdBy: number | null
    updatedBy: number | null
  }

  export type ShareTransferCountAggregateOutputType = {
    id: number
    fromShareholderId: number
    toShareholderId: number
    placeOfTransferId: number
    transferType: number
    serialNumber: number
    fycType: number
    paymentReason: number
    transferDate: number
    createdAt: number
    updatedAt: number
    createdBy: number
    updatedBy: number
    _all: number
  }


  export type ShareTransferAvgAggregateInputType = {
    id?: true
    placeOfTransferId?: true
    transferType?: true
    serialNumber?: true
    fycType?: true
    paymentReason?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareTransferSumAggregateInputType = {
    id?: true
    placeOfTransferId?: true
    transferType?: true
    serialNumber?: true
    fycType?: true
    paymentReason?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareTransferMinAggregateInputType = {
    id?: true
    fromShareholderId?: true
    toShareholderId?: true
    placeOfTransferId?: true
    transferType?: true
    serialNumber?: true
    fycType?: true
    paymentReason?: true
    transferDate?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareTransferMaxAggregateInputType = {
    id?: true
    fromShareholderId?: true
    toShareholderId?: true
    placeOfTransferId?: true
    transferType?: true
    serialNumber?: true
    fycType?: true
    paymentReason?: true
    transferDate?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
  }

  export type ShareTransferCountAggregateInputType = {
    id?: true
    fromShareholderId?: true
    toShareholderId?: true
    placeOfTransferId?: true
    transferType?: true
    serialNumber?: true
    fycType?: true
    paymentReason?: true
    transferDate?: true
    createdAt?: true
    updatedAt?: true
    createdBy?: true
    updatedBy?: true
    _all?: true
  }

  export type ShareTransferAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareTransfer to aggregate.
     */
    where?: ShareTransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareTransfers to fetch.
     */
    orderBy?: ShareTransferOrderByWithRelationInput | ShareTransferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ShareTransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareTransfers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareTransfers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ShareTransfers
    **/
    _count?: true | ShareTransferCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShareTransferAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShareTransferSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShareTransferMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShareTransferMaxAggregateInputType
  }

  export type GetShareTransferAggregateType<T extends ShareTransferAggregateArgs> = {
        [P in keyof T & keyof AggregateShareTransfer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShareTransfer[P]>
      : GetScalarType<T[P], AggregateShareTransfer[P]>
  }




  export type ShareTransferGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ShareTransferWhereInput
    orderBy?: ShareTransferOrderByWithAggregationInput | ShareTransferOrderByWithAggregationInput[]
    by: ShareTransferScalarFieldEnum[] | ShareTransferScalarFieldEnum
    having?: ShareTransferScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShareTransferCountAggregateInputType | true
    _avg?: ShareTransferAvgAggregateInputType
    _sum?: ShareTransferSumAggregateInputType
    _min?: ShareTransferMinAggregateInputType
    _max?: ShareTransferMaxAggregateInputType
  }

  export type ShareTransferGroupByOutputType = {
    id: number
    fromShareholderId: string
    toShareholderId: string
    placeOfTransferId: number
    transferType: number
    serialNumber: number
    fycType: number
    paymentReason: number
    transferDate: Date
    createdAt: Date
    updatedAt: Date
    createdBy: number | null
    updatedBy: number | null
    _count: ShareTransferCountAggregateOutputType | null
    _avg: ShareTransferAvgAggregateOutputType | null
    _sum: ShareTransferSumAggregateOutputType | null
    _min: ShareTransferMinAggregateOutputType | null
    _max: ShareTransferMaxAggregateOutputType | null
  }

  type GetShareTransferGroupByPayload<T extends ShareTransferGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ShareTransferGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShareTransferGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShareTransferGroupByOutputType[P]>
            : GetScalarType<T[P], ShareTransferGroupByOutputType[P]>
        }
      >
    >


  export type ShareTransferSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fromShareholderId?: boolean
    toShareholderId?: boolean
    placeOfTransferId?: boolean
    transferType?: boolean
    serialNumber?: boolean
    fycType?: boolean
    paymentReason?: boolean
    transferDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
    fromShareholder?: boolean | ShareholderDefaultArgs<ExtArgs>
    toShareholder?: boolean | ShareholderDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["shareTransfer"]>


  export type ShareTransferSelectScalar = {
    id?: boolean
    fromShareholderId?: boolean
    toShareholderId?: boolean
    placeOfTransferId?: boolean
    transferType?: boolean
    serialNumber?: boolean
    fycType?: boolean
    paymentReason?: boolean
    transferDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean
    updatedBy?: boolean
  }

  export type ShareTransferInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    fromShareholder?: boolean | ShareholderDefaultArgs<ExtArgs>
    toShareholder?: boolean | ShareholderDefaultArgs<ExtArgs>
  }

  export type $ShareTransferPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ShareTransfer"
    objects: {
      fromShareholder: Prisma.$ShareholderPayload<ExtArgs>
      toShareholder: Prisma.$ShareholderPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fromShareholderId: string
      toShareholderId: string
      placeOfTransferId: number
      transferType: number
      serialNumber: number
      fycType: number
      paymentReason: number
      transferDate: Date
      createdAt: Date
      updatedAt: Date
      createdBy: number | null
      updatedBy: number | null
    }, ExtArgs["result"]["shareTransfer"]>
    composites: {}
  }

  type ShareTransferGetPayload<S extends boolean | null | undefined | ShareTransferDefaultArgs> = $Result.GetResult<Prisma.$ShareTransferPayload, S>

  type ShareTransferCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ShareTransferFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ShareTransferCountAggregateInputType | true
    }

  export interface ShareTransferDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ShareTransfer'], meta: { name: 'ShareTransfer' } }
    /**
     * Find zero or one ShareTransfer that matches the filter.
     * @param {ShareTransferFindUniqueArgs} args - Arguments to find a ShareTransfer
     * @example
     * // Get one ShareTransfer
     * const shareTransfer = await prisma.shareTransfer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ShareTransferFindUniqueArgs>(args: SelectSubset<T, ShareTransferFindUniqueArgs<ExtArgs>>): Prisma__ShareTransferClient<$Result.GetResult<Prisma.$ShareTransferPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ShareTransfer that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ShareTransferFindUniqueOrThrowArgs} args - Arguments to find a ShareTransfer
     * @example
     * // Get one ShareTransfer
     * const shareTransfer = await prisma.shareTransfer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ShareTransferFindUniqueOrThrowArgs>(args: SelectSubset<T, ShareTransferFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ShareTransferClient<$Result.GetResult<Prisma.$ShareTransferPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ShareTransfer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareTransferFindFirstArgs} args - Arguments to find a ShareTransfer
     * @example
     * // Get one ShareTransfer
     * const shareTransfer = await prisma.shareTransfer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ShareTransferFindFirstArgs>(args?: SelectSubset<T, ShareTransferFindFirstArgs<ExtArgs>>): Prisma__ShareTransferClient<$Result.GetResult<Prisma.$ShareTransferPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ShareTransfer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareTransferFindFirstOrThrowArgs} args - Arguments to find a ShareTransfer
     * @example
     * // Get one ShareTransfer
     * const shareTransfer = await prisma.shareTransfer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ShareTransferFindFirstOrThrowArgs>(args?: SelectSubset<T, ShareTransferFindFirstOrThrowArgs<ExtArgs>>): Prisma__ShareTransferClient<$Result.GetResult<Prisma.$ShareTransferPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ShareTransfers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareTransferFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ShareTransfers
     * const shareTransfers = await prisma.shareTransfer.findMany()
     * 
     * // Get first 10 ShareTransfers
     * const shareTransfers = await prisma.shareTransfer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shareTransferWithIdOnly = await prisma.shareTransfer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ShareTransferFindManyArgs>(args?: SelectSubset<T, ShareTransferFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ShareTransferPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ShareTransfer.
     * @param {ShareTransferCreateArgs} args - Arguments to create a ShareTransfer.
     * @example
     * // Create one ShareTransfer
     * const ShareTransfer = await prisma.shareTransfer.create({
     *   data: {
     *     // ... data to create a ShareTransfer
     *   }
     * })
     * 
     */
    create<T extends ShareTransferCreateArgs>(args: SelectSubset<T, ShareTransferCreateArgs<ExtArgs>>): Prisma__ShareTransferClient<$Result.GetResult<Prisma.$ShareTransferPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ShareTransfers.
     * @param {ShareTransferCreateManyArgs} args - Arguments to create many ShareTransfers.
     * @example
     * // Create many ShareTransfers
     * const shareTransfer = await prisma.shareTransfer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ShareTransferCreateManyArgs>(args?: SelectSubset<T, ShareTransferCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ShareTransfer.
     * @param {ShareTransferDeleteArgs} args - Arguments to delete one ShareTransfer.
     * @example
     * // Delete one ShareTransfer
     * const ShareTransfer = await prisma.shareTransfer.delete({
     *   where: {
     *     // ... filter to delete one ShareTransfer
     *   }
     * })
     * 
     */
    delete<T extends ShareTransferDeleteArgs>(args: SelectSubset<T, ShareTransferDeleteArgs<ExtArgs>>): Prisma__ShareTransferClient<$Result.GetResult<Prisma.$ShareTransferPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ShareTransfer.
     * @param {ShareTransferUpdateArgs} args - Arguments to update one ShareTransfer.
     * @example
     * // Update one ShareTransfer
     * const shareTransfer = await prisma.shareTransfer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ShareTransferUpdateArgs>(args: SelectSubset<T, ShareTransferUpdateArgs<ExtArgs>>): Prisma__ShareTransferClient<$Result.GetResult<Prisma.$ShareTransferPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ShareTransfers.
     * @param {ShareTransferDeleteManyArgs} args - Arguments to filter ShareTransfers to delete.
     * @example
     * // Delete a few ShareTransfers
     * const { count } = await prisma.shareTransfer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ShareTransferDeleteManyArgs>(args?: SelectSubset<T, ShareTransferDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ShareTransfers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareTransferUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ShareTransfers
     * const shareTransfer = await prisma.shareTransfer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ShareTransferUpdateManyArgs>(args: SelectSubset<T, ShareTransferUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ShareTransfer.
     * @param {ShareTransferUpsertArgs} args - Arguments to update or create a ShareTransfer.
     * @example
     * // Update or create a ShareTransfer
     * const shareTransfer = await prisma.shareTransfer.upsert({
     *   create: {
     *     // ... data to create a ShareTransfer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ShareTransfer we want to update
     *   }
     * })
     */
    upsert<T extends ShareTransferUpsertArgs>(args: SelectSubset<T, ShareTransferUpsertArgs<ExtArgs>>): Prisma__ShareTransferClient<$Result.GetResult<Prisma.$ShareTransferPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ShareTransfers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareTransferCountArgs} args - Arguments to filter ShareTransfers to count.
     * @example
     * // Count the number of ShareTransfers
     * const count = await prisma.shareTransfer.count({
     *   where: {
     *     // ... the filter for the ShareTransfers we want to count
     *   }
     * })
    **/
    count<T extends ShareTransferCountArgs>(
      args?: Subset<T, ShareTransferCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShareTransferCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ShareTransfer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareTransferAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShareTransferAggregateArgs>(args: Subset<T, ShareTransferAggregateArgs>): Prisma.PrismaPromise<GetShareTransferAggregateType<T>>

    /**
     * Group by ShareTransfer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShareTransferGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShareTransferGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShareTransferGroupByArgs['orderBy'] }
        : { orderBy?: ShareTransferGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShareTransferGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShareTransferGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ShareTransfer model
   */
  readonly fields: ShareTransferFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ShareTransfer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ShareTransferClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    fromShareholder<T extends ShareholderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShareholderDefaultArgs<ExtArgs>>): Prisma__ShareholderClient<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    toShareholder<T extends ShareholderDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ShareholderDefaultArgs<ExtArgs>>): Prisma__ShareholderClient<$Result.GetResult<Prisma.$ShareholderPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ShareTransfer model
   */ 
  interface ShareTransferFieldRefs {
    readonly id: FieldRef<"ShareTransfer", 'Int'>
    readonly fromShareholderId: FieldRef<"ShareTransfer", 'String'>
    readonly toShareholderId: FieldRef<"ShareTransfer", 'String'>
    readonly placeOfTransferId: FieldRef<"ShareTransfer", 'Int'>
    readonly transferType: FieldRef<"ShareTransfer", 'Int'>
    readonly serialNumber: FieldRef<"ShareTransfer", 'Int'>
    readonly fycType: FieldRef<"ShareTransfer", 'Int'>
    readonly paymentReason: FieldRef<"ShareTransfer", 'Int'>
    readonly transferDate: FieldRef<"ShareTransfer", 'DateTime'>
    readonly createdAt: FieldRef<"ShareTransfer", 'DateTime'>
    readonly updatedAt: FieldRef<"ShareTransfer", 'DateTime'>
    readonly createdBy: FieldRef<"ShareTransfer", 'Int'>
    readonly updatedBy: FieldRef<"ShareTransfer", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ShareTransfer findUnique
   */
  export type ShareTransferFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransfer
     */
    select?: ShareTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransferInclude<ExtArgs> | null
    /**
     * Filter, which ShareTransfer to fetch.
     */
    where: ShareTransferWhereUniqueInput
  }

  /**
   * ShareTransfer findUniqueOrThrow
   */
  export type ShareTransferFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransfer
     */
    select?: ShareTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransferInclude<ExtArgs> | null
    /**
     * Filter, which ShareTransfer to fetch.
     */
    where: ShareTransferWhereUniqueInput
  }

  /**
   * ShareTransfer findFirst
   */
  export type ShareTransferFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransfer
     */
    select?: ShareTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransferInclude<ExtArgs> | null
    /**
     * Filter, which ShareTransfer to fetch.
     */
    where?: ShareTransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareTransfers to fetch.
     */
    orderBy?: ShareTransferOrderByWithRelationInput | ShareTransferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareTransfers.
     */
    cursor?: ShareTransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareTransfers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareTransfers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareTransfers.
     */
    distinct?: ShareTransferScalarFieldEnum | ShareTransferScalarFieldEnum[]
  }

  /**
   * ShareTransfer findFirstOrThrow
   */
  export type ShareTransferFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransfer
     */
    select?: ShareTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransferInclude<ExtArgs> | null
    /**
     * Filter, which ShareTransfer to fetch.
     */
    where?: ShareTransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareTransfers to fetch.
     */
    orderBy?: ShareTransferOrderByWithRelationInput | ShareTransferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ShareTransfers.
     */
    cursor?: ShareTransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareTransfers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareTransfers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ShareTransfers.
     */
    distinct?: ShareTransferScalarFieldEnum | ShareTransferScalarFieldEnum[]
  }

  /**
   * ShareTransfer findMany
   */
  export type ShareTransferFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransfer
     */
    select?: ShareTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransferInclude<ExtArgs> | null
    /**
     * Filter, which ShareTransfers to fetch.
     */
    where?: ShareTransferWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ShareTransfers to fetch.
     */
    orderBy?: ShareTransferOrderByWithRelationInput | ShareTransferOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ShareTransfers.
     */
    cursor?: ShareTransferWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ShareTransfers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ShareTransfers.
     */
    skip?: number
    distinct?: ShareTransferScalarFieldEnum | ShareTransferScalarFieldEnum[]
  }

  /**
   * ShareTransfer create
   */
  export type ShareTransferCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransfer
     */
    select?: ShareTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransferInclude<ExtArgs> | null
    /**
     * The data needed to create a ShareTransfer.
     */
    data: XOR<ShareTransferCreateInput, ShareTransferUncheckedCreateInput>
  }

  /**
   * ShareTransfer createMany
   */
  export type ShareTransferCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ShareTransfers.
     */
    data: ShareTransferCreateManyInput | ShareTransferCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ShareTransfer update
   */
  export type ShareTransferUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransfer
     */
    select?: ShareTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransferInclude<ExtArgs> | null
    /**
     * The data needed to update a ShareTransfer.
     */
    data: XOR<ShareTransferUpdateInput, ShareTransferUncheckedUpdateInput>
    /**
     * Choose, which ShareTransfer to update.
     */
    where: ShareTransferWhereUniqueInput
  }

  /**
   * ShareTransfer updateMany
   */
  export type ShareTransferUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ShareTransfers.
     */
    data: XOR<ShareTransferUpdateManyMutationInput, ShareTransferUncheckedUpdateManyInput>
    /**
     * Filter which ShareTransfers to update
     */
    where?: ShareTransferWhereInput
  }

  /**
   * ShareTransfer upsert
   */
  export type ShareTransferUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransfer
     */
    select?: ShareTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransferInclude<ExtArgs> | null
    /**
     * The filter to search for the ShareTransfer to update in case it exists.
     */
    where: ShareTransferWhereUniqueInput
    /**
     * In case the ShareTransfer found by the `where` argument doesn't exist, create a new ShareTransfer with this data.
     */
    create: XOR<ShareTransferCreateInput, ShareTransferUncheckedCreateInput>
    /**
     * In case the ShareTransfer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ShareTransferUpdateInput, ShareTransferUncheckedUpdateInput>
  }

  /**
   * ShareTransfer delete
   */
  export type ShareTransferDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransfer
     */
    select?: ShareTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransferInclude<ExtArgs> | null
    /**
     * Filter which ShareTransfer to delete.
     */
    where: ShareTransferWhereUniqueInput
  }

  /**
   * ShareTransfer deleteMany
   */
  export type ShareTransferDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ShareTransfers to delete
     */
    where?: ShareTransferWhereInput
  }

  /**
   * ShareTransfer without action
   */
  export type ShareTransferDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ShareTransfer
     */
    select?: ShareTransferSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ShareTransferInclude<ExtArgs> | null
  }


  /**
   * Model SystemLog
   */

  export type AggregateSystemLog = {
    _count: SystemLogCountAggregateOutputType | null
    _avg: SystemLogAvgAggregateOutputType | null
    _sum: SystemLogSumAggregateOutputType | null
    _min: SystemLogMinAggregateOutputType | null
    _max: SystemLogMaxAggregateOutputType | null
  }

  export type SystemLogAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SystemLogSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type SystemLogMinAggregateOutputType = {
    id: number | null
    tableName: string | null
    activity: string | null
    userId: number | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemLogMaxAggregateOutputType = {
    id: number | null
    tableName: string | null
    activity: string | null
    userId: number | null
    date: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SystemLogCountAggregateOutputType = {
    id: number
    tableName: number
    activity: number
    userId: number
    date: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SystemLogAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SystemLogSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type SystemLogMinAggregateInputType = {
    id?: true
    tableName?: true
    activity?: true
    userId?: true
    date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemLogMaxAggregateInputType = {
    id?: true
    tableName?: true
    activity?: true
    userId?: true
    date?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SystemLogCountAggregateInputType = {
    id?: true
    tableName?: true
    activity?: true
    userId?: true
    date?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SystemLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemLog to aggregate.
     */
    where?: SystemLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogOrderByWithRelationInput | SystemLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SystemLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SystemLogs
    **/
    _count?: true | SystemLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SystemLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SystemLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SystemLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SystemLogMaxAggregateInputType
  }

  export type GetSystemLogAggregateType<T extends SystemLogAggregateArgs> = {
        [P in keyof T & keyof AggregateSystemLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSystemLog[P]>
      : GetScalarType<T[P], AggregateSystemLog[P]>
  }




  export type SystemLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SystemLogWhereInput
    orderBy?: SystemLogOrderByWithAggregationInput | SystemLogOrderByWithAggregationInput[]
    by: SystemLogScalarFieldEnum[] | SystemLogScalarFieldEnum
    having?: SystemLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SystemLogCountAggregateInputType | true
    _avg?: SystemLogAvgAggregateInputType
    _sum?: SystemLogSumAggregateInputType
    _min?: SystemLogMinAggregateInputType
    _max?: SystemLogMaxAggregateInputType
  }

  export type SystemLogGroupByOutputType = {
    id: number
    tableName: string
    activity: string
    userId: number | null
    date: Date
    createdAt: Date
    updatedAt: Date
    _count: SystemLogCountAggregateOutputType | null
    _avg: SystemLogAvgAggregateOutputType | null
    _sum: SystemLogSumAggregateOutputType | null
    _min: SystemLogMinAggregateOutputType | null
    _max: SystemLogMaxAggregateOutputType | null
  }

  type GetSystemLogGroupByPayload<T extends SystemLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SystemLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SystemLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SystemLogGroupByOutputType[P]>
            : GetScalarType<T[P], SystemLogGroupByOutputType[P]>
        }
      >
    >


  export type SystemLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tableName?: boolean
    activity?: boolean
    userId?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["systemLog"]>


  export type SystemLogSelectScalar = {
    id?: boolean
    tableName?: boolean
    activity?: boolean
    userId?: boolean
    date?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $SystemLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SystemLog"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tableName: string
      activity: string
      userId: number | null
      date: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["systemLog"]>
    composites: {}
  }

  type SystemLogGetPayload<S extends boolean | null | undefined | SystemLogDefaultArgs> = $Result.GetResult<Prisma.$SystemLogPayload, S>

  type SystemLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SystemLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SystemLogCountAggregateInputType | true
    }

  export interface SystemLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SystemLog'], meta: { name: 'SystemLog' } }
    /**
     * Find zero or one SystemLog that matches the filter.
     * @param {SystemLogFindUniqueArgs} args - Arguments to find a SystemLog
     * @example
     * // Get one SystemLog
     * const systemLog = await prisma.systemLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SystemLogFindUniqueArgs>(args: SelectSubset<T, SystemLogFindUniqueArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SystemLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SystemLogFindUniqueOrThrowArgs} args - Arguments to find a SystemLog
     * @example
     * // Get one SystemLog
     * const systemLog = await prisma.systemLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SystemLogFindUniqueOrThrowArgs>(args: SelectSubset<T, SystemLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SystemLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogFindFirstArgs} args - Arguments to find a SystemLog
     * @example
     * // Get one SystemLog
     * const systemLog = await prisma.systemLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SystemLogFindFirstArgs>(args?: SelectSubset<T, SystemLogFindFirstArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SystemLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogFindFirstOrThrowArgs} args - Arguments to find a SystemLog
     * @example
     * // Get one SystemLog
     * const systemLog = await prisma.systemLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SystemLogFindFirstOrThrowArgs>(args?: SelectSubset<T, SystemLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SystemLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SystemLogs
     * const systemLogs = await prisma.systemLog.findMany()
     * 
     * // Get first 10 SystemLogs
     * const systemLogs = await prisma.systemLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const systemLogWithIdOnly = await prisma.systemLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SystemLogFindManyArgs>(args?: SelectSubset<T, SystemLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SystemLog.
     * @param {SystemLogCreateArgs} args - Arguments to create a SystemLog.
     * @example
     * // Create one SystemLog
     * const SystemLog = await prisma.systemLog.create({
     *   data: {
     *     // ... data to create a SystemLog
     *   }
     * })
     * 
     */
    create<T extends SystemLogCreateArgs>(args: SelectSubset<T, SystemLogCreateArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SystemLogs.
     * @param {SystemLogCreateManyArgs} args - Arguments to create many SystemLogs.
     * @example
     * // Create many SystemLogs
     * const systemLog = await prisma.systemLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SystemLogCreateManyArgs>(args?: SelectSubset<T, SystemLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SystemLog.
     * @param {SystemLogDeleteArgs} args - Arguments to delete one SystemLog.
     * @example
     * // Delete one SystemLog
     * const SystemLog = await prisma.systemLog.delete({
     *   where: {
     *     // ... filter to delete one SystemLog
     *   }
     * })
     * 
     */
    delete<T extends SystemLogDeleteArgs>(args: SelectSubset<T, SystemLogDeleteArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SystemLog.
     * @param {SystemLogUpdateArgs} args - Arguments to update one SystemLog.
     * @example
     * // Update one SystemLog
     * const systemLog = await prisma.systemLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SystemLogUpdateArgs>(args: SelectSubset<T, SystemLogUpdateArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SystemLogs.
     * @param {SystemLogDeleteManyArgs} args - Arguments to filter SystemLogs to delete.
     * @example
     * // Delete a few SystemLogs
     * const { count } = await prisma.systemLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SystemLogDeleteManyArgs>(args?: SelectSubset<T, SystemLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SystemLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SystemLogs
     * const systemLog = await prisma.systemLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SystemLogUpdateManyArgs>(args: SelectSubset<T, SystemLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SystemLog.
     * @param {SystemLogUpsertArgs} args - Arguments to update or create a SystemLog.
     * @example
     * // Update or create a SystemLog
     * const systemLog = await prisma.systemLog.upsert({
     *   create: {
     *     // ... data to create a SystemLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SystemLog we want to update
     *   }
     * })
     */
    upsert<T extends SystemLogUpsertArgs>(args: SelectSubset<T, SystemLogUpsertArgs<ExtArgs>>): Prisma__SystemLogClient<$Result.GetResult<Prisma.$SystemLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SystemLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogCountArgs} args - Arguments to filter SystemLogs to count.
     * @example
     * // Count the number of SystemLogs
     * const count = await prisma.systemLog.count({
     *   where: {
     *     // ... the filter for the SystemLogs we want to count
     *   }
     * })
    **/
    count<T extends SystemLogCountArgs>(
      args?: Subset<T, SystemLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SystemLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SystemLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SystemLogAggregateArgs>(args: Subset<T, SystemLogAggregateArgs>): Prisma.PrismaPromise<GetSystemLogAggregateType<T>>

    /**
     * Group by SystemLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SystemLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SystemLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SystemLogGroupByArgs['orderBy'] }
        : { orderBy?: SystemLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SystemLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSystemLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SystemLog model
   */
  readonly fields: SystemLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SystemLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SystemLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SystemLog model
   */ 
  interface SystemLogFieldRefs {
    readonly id: FieldRef<"SystemLog", 'Int'>
    readonly tableName: FieldRef<"SystemLog", 'String'>
    readonly activity: FieldRef<"SystemLog", 'String'>
    readonly userId: FieldRef<"SystemLog", 'Int'>
    readonly date: FieldRef<"SystemLog", 'DateTime'>
    readonly createdAt: FieldRef<"SystemLog", 'DateTime'>
    readonly updatedAt: FieldRef<"SystemLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SystemLog findUnique
   */
  export type SystemLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Filter, which SystemLog to fetch.
     */
    where: SystemLogWhereUniqueInput
  }

  /**
   * SystemLog findUniqueOrThrow
   */
  export type SystemLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Filter, which SystemLog to fetch.
     */
    where: SystemLogWhereUniqueInput
  }

  /**
   * SystemLog findFirst
   */
  export type SystemLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Filter, which SystemLog to fetch.
     */
    where?: SystemLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogOrderByWithRelationInput | SystemLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemLogs.
     */
    cursor?: SystemLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemLogs.
     */
    distinct?: SystemLogScalarFieldEnum | SystemLogScalarFieldEnum[]
  }

  /**
   * SystemLog findFirstOrThrow
   */
  export type SystemLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Filter, which SystemLog to fetch.
     */
    where?: SystemLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogOrderByWithRelationInput | SystemLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SystemLogs.
     */
    cursor?: SystemLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SystemLogs.
     */
    distinct?: SystemLogScalarFieldEnum | SystemLogScalarFieldEnum[]
  }

  /**
   * SystemLog findMany
   */
  export type SystemLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Filter, which SystemLogs to fetch.
     */
    where?: SystemLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SystemLogs to fetch.
     */
    orderBy?: SystemLogOrderByWithRelationInput | SystemLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SystemLogs.
     */
    cursor?: SystemLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SystemLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SystemLogs.
     */
    skip?: number
    distinct?: SystemLogScalarFieldEnum | SystemLogScalarFieldEnum[]
  }

  /**
   * SystemLog create
   */
  export type SystemLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * The data needed to create a SystemLog.
     */
    data: XOR<SystemLogCreateInput, SystemLogUncheckedCreateInput>
  }

  /**
   * SystemLog createMany
   */
  export type SystemLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SystemLogs.
     */
    data: SystemLogCreateManyInput | SystemLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SystemLog update
   */
  export type SystemLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * The data needed to update a SystemLog.
     */
    data: XOR<SystemLogUpdateInput, SystemLogUncheckedUpdateInput>
    /**
     * Choose, which SystemLog to update.
     */
    where: SystemLogWhereUniqueInput
  }

  /**
   * SystemLog updateMany
   */
  export type SystemLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SystemLogs.
     */
    data: XOR<SystemLogUpdateManyMutationInput, SystemLogUncheckedUpdateManyInput>
    /**
     * Filter which SystemLogs to update
     */
    where?: SystemLogWhereInput
  }

  /**
   * SystemLog upsert
   */
  export type SystemLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * The filter to search for the SystemLog to update in case it exists.
     */
    where: SystemLogWhereUniqueInput
    /**
     * In case the SystemLog found by the `where` argument doesn't exist, create a new SystemLog with this data.
     */
    create: XOR<SystemLogCreateInput, SystemLogUncheckedCreateInput>
    /**
     * In case the SystemLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SystemLogUpdateInput, SystemLogUncheckedUpdateInput>
  }

  /**
   * SystemLog delete
   */
  export type SystemLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
    /**
     * Filter which SystemLog to delete.
     */
    where: SystemLogWhereUniqueInput
  }

  /**
   * SystemLog deleteMany
   */
  export type SystemLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SystemLogs to delete
     */
    where?: SystemLogWhereInput
  }

  /**
   * SystemLog without action
   */
  export type SystemLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SystemLog
     */
    select?: SystemLogSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    fullName: 'fullName',
    email: 'email',
    phoneNumber: 'phoneNumber',
    password: 'password',
    username: 'username',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedById: 'updatedById',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedById: 'updatedById',
    updatedAt: 'updatedAt'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const UserRoleScalarFieldEnum: {
    userId: 'userId',
    roleId: 'roleId'
  };

  export type UserRoleScalarFieldEnum = (typeof UserRoleScalarFieldEnum)[keyof typeof UserRoleScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const RolePermissionScalarFieldEnum: {
    roleId: 'roleId',
    permissionId: 'permissionId'
  };

  export type RolePermissionScalarFieldEnum = (typeof RolePermissionScalarFieldEnum)[keyof typeof RolePermissionScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    kebele: 'kebele',
    houseNumber: 'houseNumber',
    regionId: 'regionId',
    cityOrZoneId: 'cityOrZoneId',
    subCitiesOrTownId: 'subCitiesOrTownId',
    woreda: 'woreda',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const RegionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RegionScalarFieldEnum = (typeof RegionScalarFieldEnum)[keyof typeof RegionScalarFieldEnum]


  export const CityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    regionId: 'regionId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CityScalarFieldEnum = (typeof CityScalarFieldEnum)[keyof typeof CityScalarFieldEnum]


  export const SubcityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    cityId: 'cityId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubcityScalarFieldEnum = (typeof SubcityScalarFieldEnum)[keyof typeof SubcityScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    id: 'id',
    senderId: 'senderId',
    receiverId: 'receiverId',
    netContent: 'netContent',
    content: 'content',
    messageType: 'messageType',
    createdBy: 'createdBy',
    checkedBy: 'checkedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const ShareFileScalarFieldEnum: {
    id: 'id',
    url: 'url',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ShareFileScalarFieldEnum = (typeof ShareFileScalarFieldEnum)[keyof typeof ShareFileScalarFieldEnum]


  export const ShareholderScalarFieldEnum: {
    id: 'id',
    ShareholderID: 'ShareholderID',
    engName: 'engName',
    amhName: 'amhName',
    Sex: 'Sex',
    ForeignID: 'ForeignID',
    PassportNumber: 'PassportNumber',
    dateOfNationalityChange: 'dateOfNationalityChange',
    NationalID: 'NationalID',
    email: 'email',
    Nationality: 'Nationality',
    addressId: 'addressId',
    AccountNumber: 'AccountNumber',
    TinNumber: 'TinNumber',
    MinorShareholders: 'MinorShareholders',
    MothersName: 'MothersName',
    Organisation: 'Organisation',
    NameOfLegalRepresentative: 'NameOfLegalRepresentative',
    LegalRepresentativePhone: 'LegalRepresentativePhone',
    fileId: 'fileId',
    shareId: 'shareId',
    TelephoneNumber: 'TelephoneNumber',
    status: 'status',
    shareholderTypeId: 'shareholderTypeId',
    registredAt: 'registredAt',
    mode: 'mode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type ShareholderScalarFieldEnum = (typeof ShareholderScalarFieldEnum)[keyof typeof ShareholderScalarFieldEnum]


  export const ShareholderLogScalarFieldEnum: {
    id: 'id',
    shareholderId: 'shareholderId',
    mode: 'mode',
    columnName: 'columnName',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type ShareholderLogScalarFieldEnum = (typeof ShareholderLogScalarFieldEnum)[keyof typeof ShareholderLogScalarFieldEnum]


  export const ShareScalarFieldEnum: {
    id: 'id',
    noOfShare: 'noOfShare',
    totalSubscribedAmount: 'totalSubscribedAmount',
    totalPaidAmount: 'totalPaidAmount',
    premiumAmount: 'premiumAmount',
    serviceChargeAmount: 'serviceChargeAmount',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type ShareScalarFieldEnum = (typeof ShareScalarFieldEnum)[keyof typeof ShareScalarFieldEnum]


  export const ShareTransactionScalarFieldEnum: {
    id: 'id',
    shareholderId: 'shareholderId',
    shareholdingId: 'shareholdingId',
    paidAmount: 'paidAmount',
    fycType: 'fycType',
    paymentReason: 'paymentReason',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type ShareTransactionScalarFieldEnum = (typeof ShareTransactionScalarFieldEnum)[keyof typeof ShareTransactionScalarFieldEnum]


  export const ShareholdingScalarFieldEnum: {
    id: 'id',
    shareholderId: 'shareholderId',
    serialNumber: 'serialNumber',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type ShareholdingScalarFieldEnum = (typeof ShareholdingScalarFieldEnum)[keyof typeof ShareholdingScalarFieldEnum]


  export const ShareTransferScalarFieldEnum: {
    id: 'id',
    fromShareholderId: 'fromShareholderId',
    toShareholderId: 'toShareholderId',
    placeOfTransferId: 'placeOfTransferId',
    transferType: 'transferType',
    serialNumber: 'serialNumber',
    fycType: 'fycType',
    paymentReason: 'paymentReason',
    transferDate: 'transferDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdBy: 'createdBy',
    updatedBy: 'updatedBy'
  };

  export type ShareTransferScalarFieldEnum = (typeof ShareTransferScalarFieldEnum)[keyof typeof ShareTransferScalarFieldEnum]


  export const SystemLogScalarFieldEnum: {
    id: 'id',
    tableName: 'tableName',
    activity: 'activity',
    userId: 'userId',
    date: 'date',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SystemLogScalarFieldEnum = (typeof SystemLogScalarFieldEnum)[keyof typeof SystemLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    createdById?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedById?: StringFilter<"User"> | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    roles?: UserRoleListRelationFilter
    messagesSent?: MessageListRelationFilter
    messagesReceived?: MessageListRelationFilter
    updatedUsers?: UserListRelationFilter
    createdUsers?: UserListRelationFilter
    updatedRoles?: RoleListRelationFilter
    createdRoles?: RoleListRelationFilter
    updatedPermissions?: PermissionListRelationFilter
    createdPermissions?: PermissionListRelationFilter
    updatedShareholders?: ShareholderListRelationFilter
    createdShareholders?: ShareholderListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    username?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    roles?: UserRoleOrderByRelationAggregateInput
    messagesSent?: MessageOrderByRelationAggregateInput
    messagesReceived?: MessageOrderByRelationAggregateInput
    updatedUsers?: UserOrderByRelationAggregateInput
    createdUsers?: UserOrderByRelationAggregateInput
    updatedRoles?: RoleOrderByRelationAggregateInput
    createdRoles?: RoleOrderByRelationAggregateInput
    updatedPermissions?: PermissionOrderByRelationAggregateInput
    createdPermissions?: PermissionOrderByRelationAggregateInput
    updatedShareholders?: ShareholderOrderByRelationAggregateInput
    createdShareholders?: ShareholderOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    fullName?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    createdById?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedById?: StringFilter<"User"> | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    roles?: UserRoleListRelationFilter
    messagesSent?: MessageListRelationFilter
    messagesReceived?: MessageListRelationFilter
    updatedUsers?: UserListRelationFilter
    createdUsers?: UserListRelationFilter
    updatedRoles?: RoleListRelationFilter
    createdRoles?: RoleListRelationFilter
    updatedPermissions?: PermissionListRelationFilter
    createdPermissions?: PermissionListRelationFilter
    updatedShareholders?: ShareholderListRelationFilter
    createdShareholders?: ShareholderListRelationFilter
  }, "id" | "id" | "email" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    username?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    fullName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    username?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdById?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedById?: StringWithAggregatesFilter<"User"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    createdById?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedById?: StringFilter<"Role"> | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    users?: UserRoleListRelationFilter
    permissions?: RolePermissionListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    users?: UserRoleOrderByRelationAggregateInput
    permissions?: RolePermissionOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    name?: StringFilter<"Role"> | string
    createdById?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedById?: StringFilter<"Role"> | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    users?: UserRoleListRelationFilter
    permissions?: RolePermissionListRelationFilter
  }, "id" | "id">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
    createdById?: StringWithAggregatesFilter<"Role"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
    updatedById?: StringWithAggregatesFilter<"Role"> | string
    updatedAt?: DateTimeWithAggregatesFilter<"Role"> | Date | string
  }

  export type UserRoleWhereInput = {
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }

  export type UserRoleOrderByWithRelationInput = {
    userId?: SortOrder
    roleId?: SortOrder
    user?: UserOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
  }

  export type UserRoleWhereUniqueInput = Prisma.AtLeast<{
    userId_roleId?: UserRoleUserIdRoleIdCompoundUniqueInput
    AND?: UserRoleWhereInput | UserRoleWhereInput[]
    OR?: UserRoleWhereInput[]
    NOT?: UserRoleWhereInput | UserRoleWhereInput[]
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    role?: XOR<RoleRelationFilter, RoleWhereInput>
  }, "userId_roleId">

  export type UserRoleOrderByWithAggregationInput = {
    userId?: SortOrder
    roleId?: SortOrder
    _count?: UserRoleCountOrderByAggregateInput
    _max?: UserRoleMaxOrderByAggregateInput
    _min?: UserRoleMinOrderByAggregateInput
  }

  export type UserRoleScalarWhereWithAggregatesInput = {
    AND?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    OR?: UserRoleScalarWhereWithAggregatesInput[]
    NOT?: UserRoleScalarWhereWithAggregatesInput | UserRoleScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserRole"> | string
    roleId?: StringWithAggregatesFilter<"UserRole"> | string
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: StringFilter<"Permission"> | string
    name?: StringFilter<"Permission"> | string
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    createdById?: StringFilter<"Permission"> | string
    updatedById?: StringFilter<"Permission"> | string
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    roles?: RolePermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    roles?: RolePermissionOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    name?: StringFilter<"Permission"> | string
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    createdById?: StringFilter<"Permission"> | string
    updatedById?: StringFilter<"Permission"> | string
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    roles?: RolePermissionListRelationFilter
  }, "id" | "id">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Permission"> | string
    name?: StringWithAggregatesFilter<"Permission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
    createdById?: StringWithAggregatesFilter<"Permission"> | string
    updatedById?: StringWithAggregatesFilter<"Permission"> | string
  }

  export type RolePermissionWhereInput = {
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }

  export type RolePermissionOrderByWithRelationInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
    role?: RoleOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
  }

  export type RolePermissionWhereUniqueInput = Prisma.AtLeast<{
    roleId_permissionId?: RolePermissionRoleIdPermissionIdCompoundUniqueInput
    AND?: RolePermissionWhereInput | RolePermissionWhereInput[]
    OR?: RolePermissionWhereInput[]
    NOT?: RolePermissionWhereInput | RolePermissionWhereInput[]
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
    role?: XOR<RoleRelationFilter, RoleWhereInput>
    permission?: XOR<PermissionRelationFilter, PermissionWhereInput>
  }, "roleId_permissionId">

  export type RolePermissionOrderByWithAggregationInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
    _count?: RolePermissionCountOrderByAggregateInput
    _max?: RolePermissionMaxOrderByAggregateInput
    _min?: RolePermissionMinOrderByAggregateInput
  }

  export type RolePermissionScalarWhereWithAggregatesInput = {
    AND?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    OR?: RolePermissionScalarWhereWithAggregatesInput[]
    NOT?: RolePermissionScalarWhereWithAggregatesInput | RolePermissionScalarWhereWithAggregatesInput[]
    roleId?: StringWithAggregatesFilter<"RolePermission"> | string
    permissionId?: StringWithAggregatesFilter<"RolePermission"> | string
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: BigIntFilter<"Address"> | bigint | number
    kebele?: StringFilter<"Address"> | string
    houseNumber?: StringFilter<"Address"> | string
    regionId?: BigIntFilter<"Address"> | bigint | number
    cityOrZoneId?: BigIntFilter<"Address"> | bigint | number
    subCitiesOrTownId?: BigIntFilter<"Address"> | bigint | number
    woreda?: BigIntFilter<"Address"> | bigint | number
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    createdBy?: IntFilter<"Address"> | number
    updatedBy?: IntFilter<"Address"> | number
    shareholders?: ShareholderListRelationFilter
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    kebele?: SortOrder
    houseNumber?: SortOrder
    regionId?: SortOrder
    cityOrZoneId?: SortOrder
    subCitiesOrTownId?: SortOrder
    woreda?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    shareholders?: ShareholderOrderByRelationAggregateInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    kebele?: StringFilter<"Address"> | string
    houseNumber?: StringFilter<"Address"> | string
    regionId?: BigIntFilter<"Address"> | bigint | number
    cityOrZoneId?: BigIntFilter<"Address"> | bigint | number
    subCitiesOrTownId?: BigIntFilter<"Address"> | bigint | number
    woreda?: BigIntFilter<"Address"> | bigint | number
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    createdBy?: IntFilter<"Address"> | number
    updatedBy?: IntFilter<"Address"> | number
    shareholders?: ShareholderListRelationFilter
  }, "id">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    kebele?: SortOrder
    houseNumber?: SortOrder
    regionId?: SortOrder
    cityOrZoneId?: SortOrder
    subCitiesOrTownId?: SortOrder
    woreda?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _avg?: AddressAvgOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
    _sum?: AddressSumOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"Address"> | bigint | number
    kebele?: StringWithAggregatesFilter<"Address"> | string
    houseNumber?: StringWithAggregatesFilter<"Address"> | string
    regionId?: BigIntWithAggregatesFilter<"Address"> | bigint | number
    cityOrZoneId?: BigIntWithAggregatesFilter<"Address"> | bigint | number
    subCitiesOrTownId?: BigIntWithAggregatesFilter<"Address"> | bigint | number
    woreda?: BigIntWithAggregatesFilter<"Address"> | bigint | number
    createdAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
    createdBy?: IntWithAggregatesFilter<"Address"> | number
    updatedBy?: IntWithAggregatesFilter<"Address"> | number
  }

  export type RegionWhereInput = {
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    id?: StringFilter<"Region"> | string
    name?: StringFilter<"Region"> | string
    createdAt?: DateTimeFilter<"Region"> | Date | string
    updatedAt?: DateTimeFilter<"Region"> | Date | string
    cities?: CityListRelationFilter
  }

  export type RegionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    cities?: CityOrderByRelationAggregateInput
  }

  export type RegionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RegionWhereInput | RegionWhereInput[]
    OR?: RegionWhereInput[]
    NOT?: RegionWhereInput | RegionWhereInput[]
    createdAt?: DateTimeFilter<"Region"> | Date | string
    updatedAt?: DateTimeFilter<"Region"> | Date | string
    cities?: CityListRelationFilter
  }, "id" | "id" | "name">

  export type RegionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RegionCountOrderByAggregateInput
    _max?: RegionMaxOrderByAggregateInput
    _min?: RegionMinOrderByAggregateInput
  }

  export type RegionScalarWhereWithAggregatesInput = {
    AND?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    OR?: RegionScalarWhereWithAggregatesInput[]
    NOT?: RegionScalarWhereWithAggregatesInput | RegionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Region"> | string
    name?: StringWithAggregatesFilter<"Region"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Region"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Region"> | Date | string
  }

  export type CityWhereInput = {
    AND?: CityWhereInput | CityWhereInput[]
    OR?: CityWhereInput[]
    NOT?: CityWhereInput | CityWhereInput[]
    id?: StringFilter<"City"> | string
    name?: StringFilter<"City"> | string
    regionId?: StringFilter<"City"> | string
    createdAt?: DateTimeFilter<"City"> | Date | string
    updatedAt?: DateTimeFilter<"City"> | Date | string
    region?: XOR<RegionRelationFilter, RegionWhereInput>
    subcities?: SubcityListRelationFilter
  }

  export type CityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    regionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    region?: RegionOrderByWithRelationInput
    subcities?: SubcityOrderByRelationAggregateInput
  }

  export type CityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: CityWhereInput | CityWhereInput[]
    OR?: CityWhereInput[]
    NOT?: CityWhereInput | CityWhereInput[]
    regionId?: StringFilter<"City"> | string
    createdAt?: DateTimeFilter<"City"> | Date | string
    updatedAt?: DateTimeFilter<"City"> | Date | string
    region?: XOR<RegionRelationFilter, RegionWhereInput>
    subcities?: SubcityListRelationFilter
  }, "id" | "id" | "name">

  export type CityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    regionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CityCountOrderByAggregateInput
    _max?: CityMaxOrderByAggregateInput
    _min?: CityMinOrderByAggregateInput
  }

  export type CityScalarWhereWithAggregatesInput = {
    AND?: CityScalarWhereWithAggregatesInput | CityScalarWhereWithAggregatesInput[]
    OR?: CityScalarWhereWithAggregatesInput[]
    NOT?: CityScalarWhereWithAggregatesInput | CityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"City"> | string
    name?: StringWithAggregatesFilter<"City"> | string
    regionId?: StringWithAggregatesFilter<"City"> | string
    createdAt?: DateTimeWithAggregatesFilter<"City"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"City"> | Date | string
  }

  export type SubcityWhereInput = {
    AND?: SubcityWhereInput | SubcityWhereInput[]
    OR?: SubcityWhereInput[]
    NOT?: SubcityWhereInput | SubcityWhereInput[]
    id?: StringFilter<"Subcity"> | string
    name?: StringFilter<"Subcity"> | string
    cityId?: StringFilter<"Subcity"> | string
    createdAt?: DateTimeFilter<"Subcity"> | Date | string
    updatedAt?: DateTimeFilter<"Subcity"> | Date | string
    city?: XOR<CityRelationFilter, CityWhereInput>
  }

  export type SubcityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    cityId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    city?: CityOrderByWithRelationInput
  }

  export type SubcityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubcityWhereInput | SubcityWhereInput[]
    OR?: SubcityWhereInput[]
    NOT?: SubcityWhereInput | SubcityWhereInput[]
    name?: StringFilter<"Subcity"> | string
    cityId?: StringFilter<"Subcity"> | string
    createdAt?: DateTimeFilter<"Subcity"> | Date | string
    updatedAt?: DateTimeFilter<"Subcity"> | Date | string
    city?: XOR<CityRelationFilter, CityWhereInput>
  }, "id" | "id">

  export type SubcityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    cityId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubcityCountOrderByAggregateInput
    _max?: SubcityMaxOrderByAggregateInput
    _min?: SubcityMinOrderByAggregateInput
  }

  export type SubcityScalarWhereWithAggregatesInput = {
    AND?: SubcityScalarWhereWithAggregatesInput | SubcityScalarWhereWithAggregatesInput[]
    OR?: SubcityScalarWhereWithAggregatesInput[]
    NOT?: SubcityScalarWhereWithAggregatesInput | SubcityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subcity"> | string
    name?: StringWithAggregatesFilter<"Subcity"> | string
    cityId?: StringWithAggregatesFilter<"Subcity"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Subcity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subcity"> | Date | string
  }

  export type MessageWhereInput = {
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    id?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    receiverId?: StringFilter<"Message"> | string
    netContent?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    messageType?: StringFilter<"Message"> | string
    createdBy?: IntNullableFilter<"Message"> | number | null
    checkedBy?: IntNullableFilter<"Message"> | number | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    status?: BoolFilter<"Message"> | boolean
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type MessageOrderByWithRelationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    netContent?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    checkedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    sender?: UserOrderByWithRelationInput
    receiver?: UserOrderByWithRelationInput
  }

  export type MessageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MessageWhereInput | MessageWhereInput[]
    OR?: MessageWhereInput[]
    NOT?: MessageWhereInput | MessageWhereInput[]
    senderId?: StringFilter<"Message"> | string
    receiverId?: StringFilter<"Message"> | string
    netContent?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    messageType?: StringFilter<"Message"> | string
    createdBy?: IntNullableFilter<"Message"> | number | null
    checkedBy?: IntNullableFilter<"Message"> | number | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    status?: BoolFilter<"Message"> | boolean
    sender?: XOR<UserRelationFilter, UserWhereInput>
    receiver?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "id">

  export type MessageOrderByWithAggregationInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    netContent?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    checkedBy?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    _count?: MessageCountOrderByAggregateInput
    _avg?: MessageAvgOrderByAggregateInput
    _max?: MessageMaxOrderByAggregateInput
    _min?: MessageMinOrderByAggregateInput
    _sum?: MessageSumOrderByAggregateInput
  }

  export type MessageScalarWhereWithAggregatesInput = {
    AND?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    OR?: MessageScalarWhereWithAggregatesInput[]
    NOT?: MessageScalarWhereWithAggregatesInput | MessageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Message"> | string
    senderId?: StringWithAggregatesFilter<"Message"> | string
    receiverId?: StringWithAggregatesFilter<"Message"> | string
    netContent?: StringWithAggregatesFilter<"Message"> | string
    content?: StringWithAggregatesFilter<"Message"> | string
    messageType?: StringWithAggregatesFilter<"Message"> | string
    createdBy?: IntNullableWithAggregatesFilter<"Message"> | number | null
    checkedBy?: IntNullableWithAggregatesFilter<"Message"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Message"> | Date | string
    status?: BoolWithAggregatesFilter<"Message"> | boolean
  }

  export type ShareFileWhereInput = {
    AND?: ShareFileWhereInput | ShareFileWhereInput[]
    OR?: ShareFileWhereInput[]
    NOT?: ShareFileWhereInput | ShareFileWhereInput[]
    id?: BigIntFilter<"ShareFile"> | bigint | number
    url?: StringFilter<"ShareFile"> | string
    createdBy?: StringFilter<"ShareFile"> | string
    updatedBy?: StringFilter<"ShareFile"> | string
    createdAt?: DateTimeFilter<"ShareFile"> | Date | string
    updatedAt?: DateTimeFilter<"ShareFile"> | Date | string
    shareholders?: ShareholderListRelationFilter
  }

  export type ShareFileOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    shareholders?: ShareholderOrderByRelationAggregateInput
  }

  export type ShareFileWhereUniqueInput = Prisma.AtLeast<{
    id?: bigint | number
    AND?: ShareFileWhereInput | ShareFileWhereInput[]
    OR?: ShareFileWhereInput[]
    NOT?: ShareFileWhereInput | ShareFileWhereInput[]
    url?: StringFilter<"ShareFile"> | string
    createdBy?: StringFilter<"ShareFile"> | string
    updatedBy?: StringFilter<"ShareFile"> | string
    createdAt?: DateTimeFilter<"ShareFile"> | Date | string
    updatedAt?: DateTimeFilter<"ShareFile"> | Date | string
    shareholders?: ShareholderListRelationFilter
  }, "id">

  export type ShareFileOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ShareFileCountOrderByAggregateInput
    _avg?: ShareFileAvgOrderByAggregateInput
    _max?: ShareFileMaxOrderByAggregateInput
    _min?: ShareFileMinOrderByAggregateInput
    _sum?: ShareFileSumOrderByAggregateInput
  }

  export type ShareFileScalarWhereWithAggregatesInput = {
    AND?: ShareFileScalarWhereWithAggregatesInput | ShareFileScalarWhereWithAggregatesInput[]
    OR?: ShareFileScalarWhereWithAggregatesInput[]
    NOT?: ShareFileScalarWhereWithAggregatesInput | ShareFileScalarWhereWithAggregatesInput[]
    id?: BigIntWithAggregatesFilter<"ShareFile"> | bigint | number
    url?: StringWithAggregatesFilter<"ShareFile"> | string
    createdBy?: StringWithAggregatesFilter<"ShareFile"> | string
    updatedBy?: StringWithAggregatesFilter<"ShareFile"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ShareFile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShareFile"> | Date | string
  }

  export type ShareholderWhereInput = {
    AND?: ShareholderWhereInput | ShareholderWhereInput[]
    OR?: ShareholderWhereInput[]
    NOT?: ShareholderWhereInput | ShareholderWhereInput[]
    id?: StringFilter<"Shareholder"> | string
    ShareholderID?: StringFilter<"Shareholder"> | string
    engName?: StringFilter<"Shareholder"> | string
    amhName?: StringFilter<"Shareholder"> | string
    Sex?: StringFilter<"Shareholder"> | string
    ForeignID?: StringFilter<"Shareholder"> | string
    PassportNumber?: StringFilter<"Shareholder"> | string
    dateOfNationalityChange?: StringFilter<"Shareholder"> | string
    NationalID?: StringNullableFilter<"Shareholder"> | string | null
    email?: StringFilter<"Shareholder"> | string
    Nationality?: StringNullableFilter<"Shareholder"> | string | null
    addressId?: BigIntFilter<"Shareholder"> | bigint | number
    AccountNumber?: StringFilter<"Shareholder"> | string
    TinNumber?: StringFilter<"Shareholder"> | string
    MinorShareholders?: DateTimeNullableFilter<"Shareholder"> | Date | string | null
    MothersName?: StringFilter<"Shareholder"> | string
    Organisation?: StringFilter<"Shareholder"> | string
    NameOfLegalRepresentative?: StringFilter<"Shareholder"> | string
    LegalRepresentativePhone?: StringFilter<"Shareholder"> | string
    fileId?: BigIntNullableFilter<"Shareholder"> | bigint | number | null
    shareId?: StringNullableFilter<"Shareholder"> | string | null
    TelephoneNumber?: StringFilter<"Shareholder"> | string
    status?: StringFilter<"Shareholder"> | string
    shareholderTypeId?: StringFilter<"Shareholder"> | string
    registredAt?: DateTimeNullableFilter<"Shareholder"> | Date | string | null
    mode?: IntNullableFilter<"Shareholder"> | number | null
    createdAt?: DateTimeFilter<"Shareholder"> | Date | string
    updatedAt?: DateTimeFilter<"Shareholder"> | Date | string
    createdById?: StringNullableFilter<"Shareholder"> | string | null
    updatedById?: StringNullableFilter<"Shareholder"> | string | null
    address?: XOR<AddressNullableRelationFilter, AddressWhereInput> | null
    shareFile?: XOR<ShareFileNullableRelationFilter, ShareFileWhereInput> | null
    share?: XOR<ShareNullableRelationFilter, ShareWhereInput> | null
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    shareholderLogs?: ShareholderLogListRelationFilter
    shareTransactions?: ShareTransactionListRelationFilter
    shareholding?: ShareholdingListRelationFilter
    fromshareTransfer?: ShareTransferListRelationFilter
    tohareTransfer?: ShareTransferListRelationFilter
  }

  export type ShareholderOrderByWithRelationInput = {
    id?: SortOrder
    ShareholderID?: SortOrder
    engName?: SortOrder
    amhName?: SortOrder
    Sex?: SortOrder
    ForeignID?: SortOrder
    PassportNumber?: SortOrder
    dateOfNationalityChange?: SortOrder
    NationalID?: SortOrderInput | SortOrder
    email?: SortOrder
    Nationality?: SortOrderInput | SortOrder
    addressId?: SortOrder
    AccountNumber?: SortOrder
    TinNumber?: SortOrder
    MinorShareholders?: SortOrderInput | SortOrder
    MothersName?: SortOrder
    Organisation?: SortOrder
    NameOfLegalRepresentative?: SortOrder
    LegalRepresentativePhone?: SortOrder
    fileId?: SortOrderInput | SortOrder
    shareId?: SortOrderInput | SortOrder
    TelephoneNumber?: SortOrder
    status?: SortOrder
    shareholderTypeId?: SortOrder
    registredAt?: SortOrderInput | SortOrder
    mode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    address?: AddressOrderByWithRelationInput
    shareFile?: ShareFileOrderByWithRelationInput
    share?: ShareOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    shareholderLogs?: ShareholderLogOrderByRelationAggregateInput
    shareTransactions?: ShareTransactionOrderByRelationAggregateInput
    shareholding?: ShareholdingOrderByRelationAggregateInput
    fromshareTransfer?: ShareTransferOrderByRelationAggregateInput
    tohareTransfer?: ShareTransferOrderByRelationAggregateInput
  }

  export type ShareholderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShareholderWhereInput | ShareholderWhereInput[]
    OR?: ShareholderWhereInput[]
    NOT?: ShareholderWhereInput | ShareholderWhereInput[]
    ShareholderID?: StringFilter<"Shareholder"> | string
    engName?: StringFilter<"Shareholder"> | string
    amhName?: StringFilter<"Shareholder"> | string
    Sex?: StringFilter<"Shareholder"> | string
    ForeignID?: StringFilter<"Shareholder"> | string
    PassportNumber?: StringFilter<"Shareholder"> | string
    dateOfNationalityChange?: StringFilter<"Shareholder"> | string
    NationalID?: StringNullableFilter<"Shareholder"> | string | null
    email?: StringFilter<"Shareholder"> | string
    Nationality?: StringNullableFilter<"Shareholder"> | string | null
    addressId?: BigIntFilter<"Shareholder"> | bigint | number
    AccountNumber?: StringFilter<"Shareholder"> | string
    TinNumber?: StringFilter<"Shareholder"> | string
    MinorShareholders?: DateTimeNullableFilter<"Shareholder"> | Date | string | null
    MothersName?: StringFilter<"Shareholder"> | string
    Organisation?: StringFilter<"Shareholder"> | string
    NameOfLegalRepresentative?: StringFilter<"Shareholder"> | string
    LegalRepresentativePhone?: StringFilter<"Shareholder"> | string
    fileId?: BigIntNullableFilter<"Shareholder"> | bigint | number | null
    shareId?: StringNullableFilter<"Shareholder"> | string | null
    TelephoneNumber?: StringFilter<"Shareholder"> | string
    status?: StringFilter<"Shareholder"> | string
    shareholderTypeId?: StringFilter<"Shareholder"> | string
    registredAt?: DateTimeNullableFilter<"Shareholder"> | Date | string | null
    mode?: IntNullableFilter<"Shareholder"> | number | null
    createdAt?: DateTimeFilter<"Shareholder"> | Date | string
    updatedAt?: DateTimeFilter<"Shareholder"> | Date | string
    createdById?: StringNullableFilter<"Shareholder"> | string | null
    updatedById?: StringNullableFilter<"Shareholder"> | string | null
    address?: XOR<AddressNullableRelationFilter, AddressWhereInput> | null
    shareFile?: XOR<ShareFileNullableRelationFilter, ShareFileWhereInput> | null
    share?: XOR<ShareNullableRelationFilter, ShareWhereInput> | null
    createdBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    shareholderLogs?: ShareholderLogListRelationFilter
    shareTransactions?: ShareTransactionListRelationFilter
    shareholding?: ShareholdingListRelationFilter
    fromshareTransfer?: ShareTransferListRelationFilter
    tohareTransfer?: ShareTransferListRelationFilter
  }, "id" | "id">

  export type ShareholderOrderByWithAggregationInput = {
    id?: SortOrder
    ShareholderID?: SortOrder
    engName?: SortOrder
    amhName?: SortOrder
    Sex?: SortOrder
    ForeignID?: SortOrder
    PassportNumber?: SortOrder
    dateOfNationalityChange?: SortOrder
    NationalID?: SortOrderInput | SortOrder
    email?: SortOrder
    Nationality?: SortOrderInput | SortOrder
    addressId?: SortOrder
    AccountNumber?: SortOrder
    TinNumber?: SortOrder
    MinorShareholders?: SortOrderInput | SortOrder
    MothersName?: SortOrder
    Organisation?: SortOrder
    NameOfLegalRepresentative?: SortOrder
    LegalRepresentativePhone?: SortOrder
    fileId?: SortOrderInput | SortOrder
    shareId?: SortOrderInput | SortOrder
    TelephoneNumber?: SortOrder
    status?: SortOrder
    shareholderTypeId?: SortOrder
    registredAt?: SortOrderInput | SortOrder
    mode?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: ShareholderCountOrderByAggregateInput
    _avg?: ShareholderAvgOrderByAggregateInput
    _max?: ShareholderMaxOrderByAggregateInput
    _min?: ShareholderMinOrderByAggregateInput
    _sum?: ShareholderSumOrderByAggregateInput
  }

  export type ShareholderScalarWhereWithAggregatesInput = {
    AND?: ShareholderScalarWhereWithAggregatesInput | ShareholderScalarWhereWithAggregatesInput[]
    OR?: ShareholderScalarWhereWithAggregatesInput[]
    NOT?: ShareholderScalarWhereWithAggregatesInput | ShareholderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Shareholder"> | string
    ShareholderID?: StringWithAggregatesFilter<"Shareholder"> | string
    engName?: StringWithAggregatesFilter<"Shareholder"> | string
    amhName?: StringWithAggregatesFilter<"Shareholder"> | string
    Sex?: StringWithAggregatesFilter<"Shareholder"> | string
    ForeignID?: StringWithAggregatesFilter<"Shareholder"> | string
    PassportNumber?: StringWithAggregatesFilter<"Shareholder"> | string
    dateOfNationalityChange?: StringWithAggregatesFilter<"Shareholder"> | string
    NationalID?: StringNullableWithAggregatesFilter<"Shareholder"> | string | null
    email?: StringWithAggregatesFilter<"Shareholder"> | string
    Nationality?: StringNullableWithAggregatesFilter<"Shareholder"> | string | null
    addressId?: BigIntWithAggregatesFilter<"Shareholder"> | bigint | number
    AccountNumber?: StringWithAggregatesFilter<"Shareholder"> | string
    TinNumber?: StringWithAggregatesFilter<"Shareholder"> | string
    MinorShareholders?: DateTimeNullableWithAggregatesFilter<"Shareholder"> | Date | string | null
    MothersName?: StringWithAggregatesFilter<"Shareholder"> | string
    Organisation?: StringWithAggregatesFilter<"Shareholder"> | string
    NameOfLegalRepresentative?: StringWithAggregatesFilter<"Shareholder"> | string
    LegalRepresentativePhone?: StringWithAggregatesFilter<"Shareholder"> | string
    fileId?: BigIntNullableWithAggregatesFilter<"Shareholder"> | bigint | number | null
    shareId?: StringNullableWithAggregatesFilter<"Shareholder"> | string | null
    TelephoneNumber?: StringWithAggregatesFilter<"Shareholder"> | string
    status?: StringWithAggregatesFilter<"Shareholder"> | string
    shareholderTypeId?: StringWithAggregatesFilter<"Shareholder"> | string
    registredAt?: DateTimeNullableWithAggregatesFilter<"Shareholder"> | Date | string | null
    mode?: IntNullableWithAggregatesFilter<"Shareholder"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Shareholder"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Shareholder"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"Shareholder"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"Shareholder"> | string | null
  }

  export type ShareholderLogWhereInput = {
    AND?: ShareholderLogWhereInput | ShareholderLogWhereInput[]
    OR?: ShareholderLogWhereInput[]
    NOT?: ShareholderLogWhereInput | ShareholderLogWhereInput[]
    id?: IntFilter<"ShareholderLog"> | number
    shareholderId?: StringFilter<"ShareholderLog"> | string
    mode?: IntFilter<"ShareholderLog"> | number
    columnName?: StringFilter<"ShareholderLog"> | string
    value?: StringFilter<"ShareholderLog"> | string
    createdAt?: DateTimeFilter<"ShareholderLog"> | Date | string
    updatedAt?: DateTimeFilter<"ShareholderLog"> | Date | string
    createdBy?: IntNullableFilter<"ShareholderLog"> | number | null
    updatedBy?: IntNullableFilter<"ShareholderLog"> | number | null
    shareholder?: XOR<ShareholderRelationFilter, ShareholderWhereInput>
  }

  export type ShareholderLogOrderByWithRelationInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    mode?: SortOrder
    columnName?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    shareholder?: ShareholderOrderByWithRelationInput
  }

  export type ShareholderLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShareholderLogWhereInput | ShareholderLogWhereInput[]
    OR?: ShareholderLogWhereInput[]
    NOT?: ShareholderLogWhereInput | ShareholderLogWhereInput[]
    shareholderId?: StringFilter<"ShareholderLog"> | string
    mode?: IntFilter<"ShareholderLog"> | number
    columnName?: StringFilter<"ShareholderLog"> | string
    value?: StringFilter<"ShareholderLog"> | string
    createdAt?: DateTimeFilter<"ShareholderLog"> | Date | string
    updatedAt?: DateTimeFilter<"ShareholderLog"> | Date | string
    createdBy?: IntNullableFilter<"ShareholderLog"> | number | null
    updatedBy?: IntNullableFilter<"ShareholderLog"> | number | null
    shareholder?: XOR<ShareholderRelationFilter, ShareholderWhereInput>
  }, "id">

  export type ShareholderLogOrderByWithAggregationInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    mode?: SortOrder
    columnName?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: ShareholderLogCountOrderByAggregateInput
    _avg?: ShareholderLogAvgOrderByAggregateInput
    _max?: ShareholderLogMaxOrderByAggregateInput
    _min?: ShareholderLogMinOrderByAggregateInput
    _sum?: ShareholderLogSumOrderByAggregateInput
  }

  export type ShareholderLogScalarWhereWithAggregatesInput = {
    AND?: ShareholderLogScalarWhereWithAggregatesInput | ShareholderLogScalarWhereWithAggregatesInput[]
    OR?: ShareholderLogScalarWhereWithAggregatesInput[]
    NOT?: ShareholderLogScalarWhereWithAggregatesInput | ShareholderLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShareholderLog"> | number
    shareholderId?: StringWithAggregatesFilter<"ShareholderLog"> | string
    mode?: IntWithAggregatesFilter<"ShareholderLog"> | number
    columnName?: StringWithAggregatesFilter<"ShareholderLog"> | string
    value?: StringWithAggregatesFilter<"ShareholderLog"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ShareholderLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShareholderLog"> | Date | string
    createdBy?: IntNullableWithAggregatesFilter<"ShareholderLog"> | number | null
    updatedBy?: IntNullableWithAggregatesFilter<"ShareholderLog"> | number | null
  }

  export type ShareWhereInput = {
    AND?: ShareWhereInput | ShareWhereInput[]
    OR?: ShareWhereInput[]
    NOT?: ShareWhereInput | ShareWhereInput[]
    id?: StringFilter<"Share"> | string
    noOfShare?: StringFilter<"Share"> | string
    totalSubscribedAmount?: StringFilter<"Share"> | string
    totalPaidAmount?: StringFilter<"Share"> | string
    premiumAmount?: StringFilter<"Share"> | string
    serviceChargeAmount?: StringFilter<"Share"> | string
    createdAt?: DateTimeFilter<"Share"> | Date | string
    updatedAt?: DateTimeFilter<"Share"> | Date | string
    createdBy?: IntNullableFilter<"Share"> | number | null
    updatedBy?: IntNullableFilter<"Share"> | number | null
    shareholders?: ShareholderListRelationFilter
  }

  export type ShareOrderByWithRelationInput = {
    id?: SortOrder
    noOfShare?: SortOrder
    totalSubscribedAmount?: SortOrder
    totalPaidAmount?: SortOrder
    premiumAmount?: SortOrder
    serviceChargeAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    shareholders?: ShareholderOrderByRelationAggregateInput
  }

  export type ShareWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShareWhereInput | ShareWhereInput[]
    OR?: ShareWhereInput[]
    NOT?: ShareWhereInput | ShareWhereInput[]
    noOfShare?: StringFilter<"Share"> | string
    totalSubscribedAmount?: StringFilter<"Share"> | string
    totalPaidAmount?: StringFilter<"Share"> | string
    premiumAmount?: StringFilter<"Share"> | string
    serviceChargeAmount?: StringFilter<"Share"> | string
    createdAt?: DateTimeFilter<"Share"> | Date | string
    updatedAt?: DateTimeFilter<"Share"> | Date | string
    createdBy?: IntNullableFilter<"Share"> | number | null
    updatedBy?: IntNullableFilter<"Share"> | number | null
    shareholders?: ShareholderListRelationFilter
  }, "id" | "id">

  export type ShareOrderByWithAggregationInput = {
    id?: SortOrder
    noOfShare?: SortOrder
    totalSubscribedAmount?: SortOrder
    totalPaidAmount?: SortOrder
    premiumAmount?: SortOrder
    serviceChargeAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: ShareCountOrderByAggregateInput
    _avg?: ShareAvgOrderByAggregateInput
    _max?: ShareMaxOrderByAggregateInput
    _min?: ShareMinOrderByAggregateInput
    _sum?: ShareSumOrderByAggregateInput
  }

  export type ShareScalarWhereWithAggregatesInput = {
    AND?: ShareScalarWhereWithAggregatesInput | ShareScalarWhereWithAggregatesInput[]
    OR?: ShareScalarWhereWithAggregatesInput[]
    NOT?: ShareScalarWhereWithAggregatesInput | ShareScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Share"> | string
    noOfShare?: StringWithAggregatesFilter<"Share"> | string
    totalSubscribedAmount?: StringWithAggregatesFilter<"Share"> | string
    totalPaidAmount?: StringWithAggregatesFilter<"Share"> | string
    premiumAmount?: StringWithAggregatesFilter<"Share"> | string
    serviceChargeAmount?: StringWithAggregatesFilter<"Share"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Share"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Share"> | Date | string
    createdBy?: IntNullableWithAggregatesFilter<"Share"> | number | null
    updatedBy?: IntNullableWithAggregatesFilter<"Share"> | number | null
  }

  export type ShareTransactionWhereInput = {
    AND?: ShareTransactionWhereInput | ShareTransactionWhereInput[]
    OR?: ShareTransactionWhereInput[]
    NOT?: ShareTransactionWhereInput | ShareTransactionWhereInput[]
    id?: IntFilter<"ShareTransaction"> | number
    shareholderId?: StringFilter<"ShareTransaction"> | string
    shareholdingId?: StringFilter<"ShareTransaction"> | string
    paidAmount?: StringFilter<"ShareTransaction"> | string
    fycType?: IntFilter<"ShareTransaction"> | number
    paymentReason?: IntFilter<"ShareTransaction"> | number
    createdAt?: DateTimeFilter<"ShareTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"ShareTransaction"> | Date | string
    createdBy?: IntNullableFilter<"ShareTransaction"> | number | null
    updatedBy?: IntNullableFilter<"ShareTransaction"> | number | null
    shareholder?: XOR<ShareholderRelationFilter, ShareholderWhereInput>
    shareholding?: XOR<ShareholdingRelationFilter, ShareholdingWhereInput>
  }

  export type ShareTransactionOrderByWithRelationInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    shareholdingId?: SortOrder
    paidAmount?: SortOrder
    fycType?: SortOrder
    paymentReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    shareholder?: ShareholderOrderByWithRelationInput
    shareholding?: ShareholdingOrderByWithRelationInput
  }

  export type ShareTransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShareTransactionWhereInput | ShareTransactionWhereInput[]
    OR?: ShareTransactionWhereInput[]
    NOT?: ShareTransactionWhereInput | ShareTransactionWhereInput[]
    shareholderId?: StringFilter<"ShareTransaction"> | string
    shareholdingId?: StringFilter<"ShareTransaction"> | string
    paidAmount?: StringFilter<"ShareTransaction"> | string
    fycType?: IntFilter<"ShareTransaction"> | number
    paymentReason?: IntFilter<"ShareTransaction"> | number
    createdAt?: DateTimeFilter<"ShareTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"ShareTransaction"> | Date | string
    createdBy?: IntNullableFilter<"ShareTransaction"> | number | null
    updatedBy?: IntNullableFilter<"ShareTransaction"> | number | null
    shareholder?: XOR<ShareholderRelationFilter, ShareholderWhereInput>
    shareholding?: XOR<ShareholdingRelationFilter, ShareholdingWhereInput>
  }, "id">

  export type ShareTransactionOrderByWithAggregationInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    shareholdingId?: SortOrder
    paidAmount?: SortOrder
    fycType?: SortOrder
    paymentReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: ShareTransactionCountOrderByAggregateInput
    _avg?: ShareTransactionAvgOrderByAggregateInput
    _max?: ShareTransactionMaxOrderByAggregateInput
    _min?: ShareTransactionMinOrderByAggregateInput
    _sum?: ShareTransactionSumOrderByAggregateInput
  }

  export type ShareTransactionScalarWhereWithAggregatesInput = {
    AND?: ShareTransactionScalarWhereWithAggregatesInput | ShareTransactionScalarWhereWithAggregatesInput[]
    OR?: ShareTransactionScalarWhereWithAggregatesInput[]
    NOT?: ShareTransactionScalarWhereWithAggregatesInput | ShareTransactionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShareTransaction"> | number
    shareholderId?: StringWithAggregatesFilter<"ShareTransaction"> | string
    shareholdingId?: StringWithAggregatesFilter<"ShareTransaction"> | string
    paidAmount?: StringWithAggregatesFilter<"ShareTransaction"> | string
    fycType?: IntWithAggregatesFilter<"ShareTransaction"> | number
    paymentReason?: IntWithAggregatesFilter<"ShareTransaction"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ShareTransaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShareTransaction"> | Date | string
    createdBy?: IntNullableWithAggregatesFilter<"ShareTransaction"> | number | null
    updatedBy?: IntNullableWithAggregatesFilter<"ShareTransaction"> | number | null
  }

  export type ShareholdingWhereInput = {
    AND?: ShareholdingWhereInput | ShareholdingWhereInput[]
    OR?: ShareholdingWhereInput[]
    NOT?: ShareholdingWhereInput | ShareholdingWhereInput[]
    id?: StringFilter<"Shareholding"> | string
    shareholderId?: StringFilter<"Shareholding"> | string
    serialNumber?: IntFilter<"Shareholding"> | number
    createdAt?: DateTimeFilter<"Shareholding"> | Date | string
    updatedAt?: DateTimeFilter<"Shareholding"> | Date | string
    createdBy?: IntNullableFilter<"Shareholding"> | number | null
    updatedBy?: IntNullableFilter<"Shareholding"> | number | null
    shareholder?: XOR<ShareholderRelationFilter, ShareholderWhereInput>
    shareTransaction?: ShareTransactionListRelationFilter
  }

  export type ShareholdingOrderByWithRelationInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    serialNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    shareholder?: ShareholderOrderByWithRelationInput
    shareTransaction?: ShareTransactionOrderByRelationAggregateInput
  }

  export type ShareholdingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ShareholdingWhereInput | ShareholdingWhereInput[]
    OR?: ShareholdingWhereInput[]
    NOT?: ShareholdingWhereInput | ShareholdingWhereInput[]
    shareholderId?: StringFilter<"Shareholding"> | string
    serialNumber?: IntFilter<"Shareholding"> | number
    createdAt?: DateTimeFilter<"Shareholding"> | Date | string
    updatedAt?: DateTimeFilter<"Shareholding"> | Date | string
    createdBy?: IntNullableFilter<"Shareholding"> | number | null
    updatedBy?: IntNullableFilter<"Shareholding"> | number | null
    shareholder?: XOR<ShareholderRelationFilter, ShareholderWhereInput>
    shareTransaction?: ShareTransactionListRelationFilter
  }, "id" | "id">

  export type ShareholdingOrderByWithAggregationInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    serialNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: ShareholdingCountOrderByAggregateInput
    _avg?: ShareholdingAvgOrderByAggregateInput
    _max?: ShareholdingMaxOrderByAggregateInput
    _min?: ShareholdingMinOrderByAggregateInput
    _sum?: ShareholdingSumOrderByAggregateInput
  }

  export type ShareholdingScalarWhereWithAggregatesInput = {
    AND?: ShareholdingScalarWhereWithAggregatesInput | ShareholdingScalarWhereWithAggregatesInput[]
    OR?: ShareholdingScalarWhereWithAggregatesInput[]
    NOT?: ShareholdingScalarWhereWithAggregatesInput | ShareholdingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Shareholding"> | string
    shareholderId?: StringWithAggregatesFilter<"Shareholding"> | string
    serialNumber?: IntWithAggregatesFilter<"Shareholding"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Shareholding"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Shareholding"> | Date | string
    createdBy?: IntNullableWithAggregatesFilter<"Shareholding"> | number | null
    updatedBy?: IntNullableWithAggregatesFilter<"Shareholding"> | number | null
  }

  export type ShareTransferWhereInput = {
    AND?: ShareTransferWhereInput | ShareTransferWhereInput[]
    OR?: ShareTransferWhereInput[]
    NOT?: ShareTransferWhereInput | ShareTransferWhereInput[]
    id?: IntFilter<"ShareTransfer"> | number
    fromShareholderId?: StringFilter<"ShareTransfer"> | string
    toShareholderId?: StringFilter<"ShareTransfer"> | string
    placeOfTransferId?: IntFilter<"ShareTransfer"> | number
    transferType?: IntFilter<"ShareTransfer"> | number
    serialNumber?: IntFilter<"ShareTransfer"> | number
    fycType?: IntFilter<"ShareTransfer"> | number
    paymentReason?: IntFilter<"ShareTransfer"> | number
    transferDate?: DateTimeFilter<"ShareTransfer"> | Date | string
    createdAt?: DateTimeFilter<"ShareTransfer"> | Date | string
    updatedAt?: DateTimeFilter<"ShareTransfer"> | Date | string
    createdBy?: IntNullableFilter<"ShareTransfer"> | number | null
    updatedBy?: IntNullableFilter<"ShareTransfer"> | number | null
    fromShareholder?: XOR<ShareholderRelationFilter, ShareholderWhereInput>
    toShareholder?: XOR<ShareholderRelationFilter, ShareholderWhereInput>
  }

  export type ShareTransferOrderByWithRelationInput = {
    id?: SortOrder
    fromShareholderId?: SortOrder
    toShareholderId?: SortOrder
    placeOfTransferId?: SortOrder
    transferType?: SortOrder
    serialNumber?: SortOrder
    fycType?: SortOrder
    paymentReason?: SortOrder
    transferDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    fromShareholder?: ShareholderOrderByWithRelationInput
    toShareholder?: ShareholderOrderByWithRelationInput
  }

  export type ShareTransferWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ShareTransferWhereInput | ShareTransferWhereInput[]
    OR?: ShareTransferWhereInput[]
    NOT?: ShareTransferWhereInput | ShareTransferWhereInput[]
    fromShareholderId?: StringFilter<"ShareTransfer"> | string
    toShareholderId?: StringFilter<"ShareTransfer"> | string
    placeOfTransferId?: IntFilter<"ShareTransfer"> | number
    transferType?: IntFilter<"ShareTransfer"> | number
    serialNumber?: IntFilter<"ShareTransfer"> | number
    fycType?: IntFilter<"ShareTransfer"> | number
    paymentReason?: IntFilter<"ShareTransfer"> | number
    transferDate?: DateTimeFilter<"ShareTransfer"> | Date | string
    createdAt?: DateTimeFilter<"ShareTransfer"> | Date | string
    updatedAt?: DateTimeFilter<"ShareTransfer"> | Date | string
    createdBy?: IntNullableFilter<"ShareTransfer"> | number | null
    updatedBy?: IntNullableFilter<"ShareTransfer"> | number | null
    fromShareholder?: XOR<ShareholderRelationFilter, ShareholderWhereInput>
    toShareholder?: XOR<ShareholderRelationFilter, ShareholderWhereInput>
  }, "id">

  export type ShareTransferOrderByWithAggregationInput = {
    id?: SortOrder
    fromShareholderId?: SortOrder
    toShareholderId?: SortOrder
    placeOfTransferId?: SortOrder
    transferType?: SortOrder
    serialNumber?: SortOrder
    fycType?: SortOrder
    paymentReason?: SortOrder
    transferDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    updatedBy?: SortOrderInput | SortOrder
    _count?: ShareTransferCountOrderByAggregateInput
    _avg?: ShareTransferAvgOrderByAggregateInput
    _max?: ShareTransferMaxOrderByAggregateInput
    _min?: ShareTransferMinOrderByAggregateInput
    _sum?: ShareTransferSumOrderByAggregateInput
  }

  export type ShareTransferScalarWhereWithAggregatesInput = {
    AND?: ShareTransferScalarWhereWithAggregatesInput | ShareTransferScalarWhereWithAggregatesInput[]
    OR?: ShareTransferScalarWhereWithAggregatesInput[]
    NOT?: ShareTransferScalarWhereWithAggregatesInput | ShareTransferScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ShareTransfer"> | number
    fromShareholderId?: StringWithAggregatesFilter<"ShareTransfer"> | string
    toShareholderId?: StringWithAggregatesFilter<"ShareTransfer"> | string
    placeOfTransferId?: IntWithAggregatesFilter<"ShareTransfer"> | number
    transferType?: IntWithAggregatesFilter<"ShareTransfer"> | number
    serialNumber?: IntWithAggregatesFilter<"ShareTransfer"> | number
    fycType?: IntWithAggregatesFilter<"ShareTransfer"> | number
    paymentReason?: IntWithAggregatesFilter<"ShareTransfer"> | number
    transferDate?: DateTimeWithAggregatesFilter<"ShareTransfer"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"ShareTransfer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ShareTransfer"> | Date | string
    createdBy?: IntNullableWithAggregatesFilter<"ShareTransfer"> | number | null
    updatedBy?: IntNullableWithAggregatesFilter<"ShareTransfer"> | number | null
  }

  export type SystemLogWhereInput = {
    AND?: SystemLogWhereInput | SystemLogWhereInput[]
    OR?: SystemLogWhereInput[]
    NOT?: SystemLogWhereInput | SystemLogWhereInput[]
    id?: IntFilter<"SystemLog"> | number
    tableName?: StringFilter<"SystemLog"> | string
    activity?: StringFilter<"SystemLog"> | string
    userId?: IntNullableFilter<"SystemLog"> | number | null
    date?: DateTimeFilter<"SystemLog"> | Date | string
    createdAt?: DateTimeFilter<"SystemLog"> | Date | string
    updatedAt?: DateTimeFilter<"SystemLog"> | Date | string
  }

  export type SystemLogOrderByWithRelationInput = {
    id?: SortOrder
    tableName?: SortOrder
    activity?: SortOrder
    userId?: SortOrderInput | SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemLogWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SystemLogWhereInput | SystemLogWhereInput[]
    OR?: SystemLogWhereInput[]
    NOT?: SystemLogWhereInput | SystemLogWhereInput[]
    tableName?: StringFilter<"SystemLog"> | string
    activity?: StringFilter<"SystemLog"> | string
    userId?: IntNullableFilter<"SystemLog"> | number | null
    date?: DateTimeFilter<"SystemLog"> | Date | string
    createdAt?: DateTimeFilter<"SystemLog"> | Date | string
    updatedAt?: DateTimeFilter<"SystemLog"> | Date | string
  }, "id">

  export type SystemLogOrderByWithAggregationInput = {
    id?: SortOrder
    tableName?: SortOrder
    activity?: SortOrder
    userId?: SortOrderInput | SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SystemLogCountOrderByAggregateInput
    _avg?: SystemLogAvgOrderByAggregateInput
    _max?: SystemLogMaxOrderByAggregateInput
    _min?: SystemLogMinOrderByAggregateInput
    _sum?: SystemLogSumOrderByAggregateInput
  }

  export type SystemLogScalarWhereWithAggregatesInput = {
    AND?: SystemLogScalarWhereWithAggregatesInput | SystemLogScalarWhereWithAggregatesInput[]
    OR?: SystemLogScalarWhereWithAggregatesInput[]
    NOT?: SystemLogScalarWhereWithAggregatesInput | SystemLogScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SystemLog"> | number
    tableName?: StringWithAggregatesFilter<"SystemLog"> | string
    activity?: StringWithAggregatesFilter<"SystemLog"> | string
    userId?: IntNullableWithAggregatesFilter<"SystemLog"> | number | null
    date?: DateTimeWithAggregatesFilter<"SystemLog"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"SystemLog"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SystemLog"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedUsersInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserUncheckedCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderUncheckedCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedUsersNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedRolesInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedRolesInput
    users?: UserRoleCreateNestedManyWithoutRoleInput
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: string
    name: string
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    users?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedRolesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedRolesNestedInput
    users?: UserRoleUpdateManyWithoutRoleNestedInput
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: string
    name: string
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserRoleCreateInput = {
    user: UserCreateNestedOneWithoutRolesInput
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserRoleUncheckedCreateInput = {
    userId: string
    roleId: string
  }

  export type UserRoleUpdateInput = {
    user?: UserUpdateOneRequiredWithoutRolesNestedInput
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserRoleUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleCreateManyInput = {
    userId: string
    roleId: string
  }

  export type UserRoleUpdateManyMutationInput = {

  }

  export type UserRoleUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type PermissionCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedPermissionsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedPermissionsInput
    roles?: RolePermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
    roles?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedPermissionsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedPermissionsNestedInput
    roles?: RolePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
    roles?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
  }

  export type PermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionCreateInput = {
    role: RoleCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutRolesInput
  }

  export type RolePermissionUncheckedCreateInput = {
    roleId: string
    permissionId: string
  }

  export type RolePermissionUpdateInput = {
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutRolesNestedInput
  }

  export type RolePermissionUncheckedUpdateInput = {
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionCreateManyInput = {
    roleId: string
    permissionId: string
  }

  export type RolePermissionUpdateManyMutationInput = {

  }

  export type RolePermissionUncheckedUpdateManyInput = {
    roleId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
  }

  export type AddressCreateInput = {
    id?: bigint | number
    kebele: string
    houseNumber: string
    regionId: bigint | number
    cityOrZoneId: bigint | number
    subCitiesOrTownId: bigint | number
    woreda: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    updatedBy: number
    shareholders?: ShareholderCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: bigint | number
    kebele: string
    houseNumber: string
    regionId: bigint | number
    cityOrZoneId: bigint | number
    subCitiesOrTownId: bigint | number
    woreda: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    updatedBy: number
    shareholders?: ShareholderUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    kebele?: StringFieldUpdateOperationsInput | string
    houseNumber?: StringFieldUpdateOperationsInput | string
    regionId?: BigIntFieldUpdateOperationsInput | bigint | number
    cityOrZoneId?: BigIntFieldUpdateOperationsInput | bigint | number
    subCitiesOrTownId?: BigIntFieldUpdateOperationsInput | bigint | number
    woreda?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: IntFieldUpdateOperationsInput | number
    shareholders?: ShareholderUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    kebele?: StringFieldUpdateOperationsInput | string
    houseNumber?: StringFieldUpdateOperationsInput | string
    regionId?: BigIntFieldUpdateOperationsInput | bigint | number
    cityOrZoneId?: BigIntFieldUpdateOperationsInput | bigint | number
    subCitiesOrTownId?: BigIntFieldUpdateOperationsInput | bigint | number
    woreda?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: IntFieldUpdateOperationsInput | number
    shareholders?: ShareholderUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type AddressCreateManyInput = {
    id?: bigint | number
    kebele: string
    houseNumber: string
    regionId: bigint | number
    cityOrZoneId: bigint | number
    subCitiesOrTownId: bigint | number
    woreda: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    updatedBy: number
  }

  export type AddressUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    kebele?: StringFieldUpdateOperationsInput | string
    houseNumber?: StringFieldUpdateOperationsInput | string
    regionId?: BigIntFieldUpdateOperationsInput | bigint | number
    cityOrZoneId?: BigIntFieldUpdateOperationsInput | bigint | number
    subCitiesOrTownId?: BigIntFieldUpdateOperationsInput | bigint | number
    woreda?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: IntFieldUpdateOperationsInput | number
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    kebele?: StringFieldUpdateOperationsInput | string
    houseNumber?: StringFieldUpdateOperationsInput | string
    regionId?: BigIntFieldUpdateOperationsInput | bigint | number
    cityOrZoneId?: BigIntFieldUpdateOperationsInput | bigint | number
    subCitiesOrTownId?: BigIntFieldUpdateOperationsInput | bigint | number
    woreda?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: IntFieldUpdateOperationsInput | number
  }

  export type RegionCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cities?: CityCreateNestedManyWithoutRegionInput
  }

  export type RegionUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    cities?: CityUncheckedCreateNestedManyWithoutRegionInput
  }

  export type RegionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cities?: CityUpdateManyWithoutRegionNestedInput
  }

  export type RegionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cities?: CityUncheckedUpdateManyWithoutRegionNestedInput
  }

  export type RegionCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutCitiesInput
    subcities?: SubcityCreateNestedManyWithoutCityInput
  }

  export type CityUncheckedCreateInput = {
    id?: string
    name: string
    regionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subcities?: SubcityUncheckedCreateNestedManyWithoutCityInput
  }

  export type CityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutCitiesNestedInput
    subcities?: SubcityUpdateManyWithoutCityNestedInput
  }

  export type CityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subcities?: SubcityUncheckedUpdateManyWithoutCityNestedInput
  }

  export type CityCreateManyInput = {
    id?: string
    name: string
    regionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubcityCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    city: CityCreateNestedOneWithoutSubcitiesInput
  }

  export type SubcityUncheckedCreateInput = {
    id?: string
    name: string
    cityId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubcityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    city?: CityUpdateOneRequiredWithoutSubcitiesNestedInput
  }

  export type SubcityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubcityCreateManyInput = {
    id?: string
    name: string
    cityId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubcityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubcityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    cityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MessageCreateInput = {
    id?: string
    netContent: string
    content: string
    messageType: string
    createdBy?: number | null
    checkedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
    sender: UserCreateNestedOneWithoutMessagesSentInput
    receiver: UserCreateNestedOneWithoutMessagesReceivedInput
  }

  export type MessageUncheckedCreateInput = {
    id?: string
    senderId: string
    receiverId: string
    netContent: string
    content: string
    messageType: string
    createdBy?: number | null
    checkedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
  }

  export type MessageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    netContent?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    checkedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutMessagesSentNestedInput
    receiver?: UserUpdateOneRequiredWithoutMessagesReceivedNestedInput
  }

  export type MessageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    netContent?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    checkedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageCreateManyInput = {
    id?: string
    senderId: string
    receiverId: string
    netContent: string
    content: string
    messageType: string
    createdBy?: number | null
    checkedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
  }

  export type MessageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    netContent?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    checkedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    netContent?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    checkedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ShareFileCreateInput = {
    id?: bigint | number
    url: string
    createdBy: string
    updatedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    shareholders?: ShareholderCreateNestedManyWithoutShareFileInput
  }

  export type ShareFileUncheckedCreateInput = {
    id?: bigint | number
    url: string
    createdBy: string
    updatedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    shareholders?: ShareholderUncheckedCreateNestedManyWithoutShareFileInput
  }

  export type ShareFileUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    url?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareholders?: ShareholderUpdateManyWithoutShareFileNestedInput
  }

  export type ShareFileUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    url?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareholders?: ShareholderUncheckedUpdateManyWithoutShareFileNestedInput
  }

  export type ShareFileCreateManyInput = {
    id?: bigint | number
    url: string
    createdBy: string
    updatedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareFileUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    url?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareFileUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    url?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareholderCreateInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutShareholdersInput
    shareFile?: ShareFileCreateNestedOneWithoutShareholdersInput
    share?: ShareCreateNestedOneWithoutShareholdersInput
    createdBy?: UserCreateNestedOneWithoutCreatedShareholdersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedShareholdersInput
    shareholderLogs?: ShareholderLogCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderUncheckedCreateInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    shareholderLogs?: ShareholderLogUncheckedCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionUncheckedCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingUncheckedCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutShareholdersNestedInput
    shareFile?: ShareFileUpdateOneWithoutShareholdersNestedInput
    share?: ShareUpdateOneWithoutShareholdersNestedInput
    createdBy?: UserUpdateOneWithoutCreatedShareholdersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedShareholdersNestedInput
    shareholderLogs?: ShareholderLogUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    shareholderLogs?: ShareholderLogUncheckedUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUncheckedUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUncheckedUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUncheckedUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUncheckedUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderCreateManyInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type ShareholderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareholderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShareholderLogCreateInput = {
    mode: number
    columnName: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    shareholder: ShareholderCreateNestedOneWithoutShareholderLogsInput
  }

  export type ShareholderLogUncheckedCreateInput = {
    id?: number
    shareholderId: string
    mode: number
    columnName: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareholderLogUpdateInput = {
    mode?: IntFieldUpdateOperationsInput | number
    columnName?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    shareholder?: ShareholderUpdateOneRequiredWithoutShareholderLogsNestedInput
  }

  export type ShareholderLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareholderId?: StringFieldUpdateOperationsInput | string
    mode?: IntFieldUpdateOperationsInput | number
    columnName?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareholderLogCreateManyInput = {
    id?: number
    shareholderId: string
    mode: number
    columnName: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareholderLogUpdateManyMutationInput = {
    mode?: IntFieldUpdateOperationsInput | number
    columnName?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareholderLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareholderId?: StringFieldUpdateOperationsInput | string
    mode?: IntFieldUpdateOperationsInput | number
    columnName?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareCreateInput = {
    id?: string
    noOfShare: string
    totalSubscribedAmount: string
    totalPaidAmount: string
    premiumAmount: string
    serviceChargeAmount: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    shareholders?: ShareholderCreateNestedManyWithoutShareInput
  }

  export type ShareUncheckedCreateInput = {
    id?: string
    noOfShare: string
    totalSubscribedAmount: string
    totalPaidAmount: string
    premiumAmount: string
    serviceChargeAmount: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    shareholders?: ShareholderUncheckedCreateNestedManyWithoutShareInput
  }

  export type ShareUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    noOfShare?: StringFieldUpdateOperationsInput | string
    totalSubscribedAmount?: StringFieldUpdateOperationsInput | string
    totalPaidAmount?: StringFieldUpdateOperationsInput | string
    premiumAmount?: StringFieldUpdateOperationsInput | string
    serviceChargeAmount?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    shareholders?: ShareholderUpdateManyWithoutShareNestedInput
  }

  export type ShareUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    noOfShare?: StringFieldUpdateOperationsInput | string
    totalSubscribedAmount?: StringFieldUpdateOperationsInput | string
    totalPaidAmount?: StringFieldUpdateOperationsInput | string
    premiumAmount?: StringFieldUpdateOperationsInput | string
    serviceChargeAmount?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    shareholders?: ShareholderUncheckedUpdateManyWithoutShareNestedInput
  }

  export type ShareCreateManyInput = {
    id?: string
    noOfShare: string
    totalSubscribedAmount: string
    totalPaidAmount: string
    premiumAmount: string
    serviceChargeAmount: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    noOfShare?: StringFieldUpdateOperationsInput | string
    totalSubscribedAmount?: StringFieldUpdateOperationsInput | string
    totalPaidAmount?: StringFieldUpdateOperationsInput | string
    premiumAmount?: StringFieldUpdateOperationsInput | string
    serviceChargeAmount?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    noOfShare?: StringFieldUpdateOperationsInput | string
    totalSubscribedAmount?: StringFieldUpdateOperationsInput | string
    totalPaidAmount?: StringFieldUpdateOperationsInput | string
    premiumAmount?: StringFieldUpdateOperationsInput | string
    serviceChargeAmount?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareTransactionCreateInput = {
    paidAmount: string
    fycType: number
    paymentReason: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    shareholder: ShareholderCreateNestedOneWithoutShareTransactionsInput
    shareholding: ShareholdingCreateNestedOneWithoutShareTransactionInput
  }

  export type ShareTransactionUncheckedCreateInput = {
    id?: number
    shareholderId: string
    shareholdingId: string
    paidAmount: string
    fycType: number
    paymentReason: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareTransactionUpdateInput = {
    paidAmount?: StringFieldUpdateOperationsInput | string
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    shareholder?: ShareholderUpdateOneRequiredWithoutShareTransactionsNestedInput
    shareholding?: ShareholdingUpdateOneRequiredWithoutShareTransactionNestedInput
  }

  export type ShareTransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareholderId?: StringFieldUpdateOperationsInput | string
    shareholdingId?: StringFieldUpdateOperationsInput | string
    paidAmount?: StringFieldUpdateOperationsInput | string
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareTransactionCreateManyInput = {
    id?: number
    shareholderId: string
    shareholdingId: string
    paidAmount: string
    fycType: number
    paymentReason: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareTransactionUpdateManyMutationInput = {
    paidAmount?: StringFieldUpdateOperationsInput | string
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareTransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareholderId?: StringFieldUpdateOperationsInput | string
    shareholdingId?: StringFieldUpdateOperationsInput | string
    paidAmount?: StringFieldUpdateOperationsInput | string
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareholdingCreateInput = {
    id?: string
    serialNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    shareholder: ShareholderCreateNestedOneWithoutShareholdingInput
    shareTransaction?: ShareTransactionCreateNestedManyWithoutShareholdingInput
  }

  export type ShareholdingUncheckedCreateInput = {
    id?: string
    shareholderId: string
    serialNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    shareTransaction?: ShareTransactionUncheckedCreateNestedManyWithoutShareholdingInput
  }

  export type ShareholdingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    shareholder?: ShareholderUpdateOneRequiredWithoutShareholdingNestedInput
    shareTransaction?: ShareTransactionUpdateManyWithoutShareholdingNestedInput
  }

  export type ShareholdingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    shareholderId?: StringFieldUpdateOperationsInput | string
    serialNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    shareTransaction?: ShareTransactionUncheckedUpdateManyWithoutShareholdingNestedInput
  }

  export type ShareholdingCreateManyInput = {
    id?: string
    shareholderId: string
    serialNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareholdingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareholdingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    shareholderId?: StringFieldUpdateOperationsInput | string
    serialNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareTransferCreateInput = {
    placeOfTransferId: number
    transferType: number
    serialNumber: number
    fycType: number
    paymentReason: number
    transferDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    fromShareholder: ShareholderCreateNestedOneWithoutFromshareTransferInput
    toShareholder: ShareholderCreateNestedOneWithoutTohareTransferInput
  }

  export type ShareTransferUncheckedCreateInput = {
    id?: number
    fromShareholderId: string
    toShareholderId: string
    placeOfTransferId: number
    transferType: number
    serialNumber: number
    fycType: number
    paymentReason: number
    transferDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareTransferUpdateInput = {
    placeOfTransferId?: IntFieldUpdateOperationsInput | number
    transferType?: IntFieldUpdateOperationsInput | number
    serialNumber?: IntFieldUpdateOperationsInput | number
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    fromShareholder?: ShareholderUpdateOneRequiredWithoutFromshareTransferNestedInput
    toShareholder?: ShareholderUpdateOneRequiredWithoutTohareTransferNestedInput
  }

  export type ShareTransferUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromShareholderId?: StringFieldUpdateOperationsInput | string
    toShareholderId?: StringFieldUpdateOperationsInput | string
    placeOfTransferId?: IntFieldUpdateOperationsInput | number
    transferType?: IntFieldUpdateOperationsInput | number
    serialNumber?: IntFieldUpdateOperationsInput | number
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareTransferCreateManyInput = {
    id?: number
    fromShareholderId: string
    toShareholderId: string
    placeOfTransferId: number
    transferType: number
    serialNumber: number
    fycType: number
    paymentReason: number
    transferDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareTransferUpdateManyMutationInput = {
    placeOfTransferId?: IntFieldUpdateOperationsInput | number
    transferType?: IntFieldUpdateOperationsInput | number
    serialNumber?: IntFieldUpdateOperationsInput | number
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareTransferUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromShareholderId?: StringFieldUpdateOperationsInput | string
    toShareholderId?: StringFieldUpdateOperationsInput | string
    placeOfTransferId?: IntFieldUpdateOperationsInput | number
    transferType?: IntFieldUpdateOperationsInput | number
    serialNumber?: IntFieldUpdateOperationsInput | number
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SystemLogCreateInput = {
    tableName: string
    activity: string
    userId?: number | null
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemLogUncheckedCreateInput = {
    id?: number
    tableName: string
    activity: string
    userId?: number | null
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemLogUpdateInput = {
    tableName?: StringFieldUpdateOperationsInput | string
    activity?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableName?: StringFieldUpdateOperationsInput | string
    activity?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogCreateManyInput = {
    id?: number
    tableName: string
    activity: string
    userId?: number | null
    date: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SystemLogUpdateManyMutationInput = {
    tableName?: StringFieldUpdateOperationsInput | string
    activity?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SystemLogUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tableName?: StringFieldUpdateOperationsInput | string
    activity?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type UserRoleListRelationFilter = {
    every?: UserRoleWhereInput
    some?: UserRoleWhereInput
    none?: UserRoleWhereInput
  }

  export type MessageListRelationFilter = {
    every?: MessageWhereInput
    some?: MessageWhereInput
    none?: MessageWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type RoleListRelationFilter = {
    every?: RoleWhereInput
    some?: RoleWhereInput
    none?: RoleWhereInput
  }

  export type PermissionListRelationFilter = {
    every?: PermissionWhereInput
    some?: PermissionWhereInput
    none?: PermissionWhereInput
  }

  export type ShareholderListRelationFilter = {
    every?: ShareholderWhereInput
    some?: ShareholderWhereInput
    none?: ShareholderWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserRoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MessageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShareholderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    username?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    username?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    fullName?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    password?: SortOrder
    username?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RolePermissionListRelationFilter = {
    every?: RolePermissionWhereInput
    some?: RolePermissionWhereInput
    none?: RolePermissionWhereInput
  }

  export type RolePermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedById?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type RoleRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type UserRoleUserIdRoleIdCompoundUniqueInput = {
    userId: string
    roleId: string
  }

  export type UserRoleCountOrderByAggregateInput = {
    userId?: SortOrder
    roleId?: SortOrder
  }

  export type UserRoleMaxOrderByAggregateInput = {
    userId?: SortOrder
    roleId?: SortOrder
  }

  export type UserRoleMinOrderByAggregateInput = {
    userId?: SortOrder
    roleId?: SortOrder
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PermissionRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type RolePermissionRoleIdPermissionIdCompoundUniqueInput = {
    roleId: string
    permissionId: string
  }

  export type RolePermissionCountOrderByAggregateInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
  }

  export type RolePermissionMaxOrderByAggregateInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
  }

  export type RolePermissionMinOrderByAggregateInput = {
    roleId?: SortOrder
    permissionId?: SortOrder
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    kebele?: SortOrder
    houseNumber?: SortOrder
    regionId?: SortOrder
    cityOrZoneId?: SortOrder
    subCitiesOrTownId?: SortOrder
    woreda?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type AddressAvgOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    cityOrZoneId?: SortOrder
    subCitiesOrTownId?: SortOrder
    woreda?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    kebele?: SortOrder
    houseNumber?: SortOrder
    regionId?: SortOrder
    cityOrZoneId?: SortOrder
    subCitiesOrTownId?: SortOrder
    woreda?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    kebele?: SortOrder
    houseNumber?: SortOrder
    regionId?: SortOrder
    cityOrZoneId?: SortOrder
    subCitiesOrTownId?: SortOrder
    woreda?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type AddressSumOrderByAggregateInput = {
    id?: SortOrder
    regionId?: SortOrder
    cityOrZoneId?: SortOrder
    subCitiesOrTownId?: SortOrder
    woreda?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type CityListRelationFilter = {
    every?: CityWhereInput
    some?: CityWhereInput
    none?: CityWhereInput
  }

  export type CityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RegionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RegionRelationFilter = {
    is?: RegionWhereInput
    isNot?: RegionWhereInput
  }

  export type SubcityListRelationFilter = {
    every?: SubcityWhereInput
    some?: SubcityWhereInput
    none?: SubcityWhereInput
  }

  export type SubcityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    regionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    regionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    regionId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CityRelationFilter = {
    is?: CityWhereInput
    isNot?: CityWhereInput
  }

  export type SubcityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cityId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubcityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cityId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubcityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    cityId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type MessageCountOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    netContent?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    createdBy?: SortOrder
    checkedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
  }

  export type MessageAvgOrderByAggregateInput = {
    createdBy?: SortOrder
    checkedBy?: SortOrder
  }

  export type MessageMaxOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    netContent?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    createdBy?: SortOrder
    checkedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
  }

  export type MessageMinOrderByAggregateInput = {
    id?: SortOrder
    senderId?: SortOrder
    receiverId?: SortOrder
    netContent?: SortOrder
    content?: SortOrder
    messageType?: SortOrder
    createdBy?: SortOrder
    checkedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
  }

  export type MessageSumOrderByAggregateInput = {
    createdBy?: SortOrder
    checkedBy?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type ShareFileCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShareFileAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ShareFileMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShareFileMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ShareFileSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type BigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type AddressNullableRelationFilter = {
    is?: AddressWhereInput | null
    isNot?: AddressWhereInput | null
  }

  export type ShareFileNullableRelationFilter = {
    is?: ShareFileWhereInput | null
    isNot?: ShareFileWhereInput | null
  }

  export type ShareNullableRelationFilter = {
    is?: ShareWhereInput | null
    isNot?: ShareWhereInput | null
  }

  export type ShareholderLogListRelationFilter = {
    every?: ShareholderLogWhereInput
    some?: ShareholderLogWhereInput
    none?: ShareholderLogWhereInput
  }

  export type ShareTransactionListRelationFilter = {
    every?: ShareTransactionWhereInput
    some?: ShareTransactionWhereInput
    none?: ShareTransactionWhereInput
  }

  export type ShareholdingListRelationFilter = {
    every?: ShareholdingWhereInput
    some?: ShareholdingWhereInput
    none?: ShareholdingWhereInput
  }

  export type ShareTransferListRelationFilter = {
    every?: ShareTransferWhereInput
    some?: ShareTransferWhereInput
    none?: ShareTransferWhereInput
  }

  export type ShareholderLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShareTransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShareholdingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShareTransferOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ShareholderCountOrderByAggregateInput = {
    id?: SortOrder
    ShareholderID?: SortOrder
    engName?: SortOrder
    amhName?: SortOrder
    Sex?: SortOrder
    ForeignID?: SortOrder
    PassportNumber?: SortOrder
    dateOfNationalityChange?: SortOrder
    NationalID?: SortOrder
    email?: SortOrder
    Nationality?: SortOrder
    addressId?: SortOrder
    AccountNumber?: SortOrder
    TinNumber?: SortOrder
    MinorShareholders?: SortOrder
    MothersName?: SortOrder
    Organisation?: SortOrder
    NameOfLegalRepresentative?: SortOrder
    LegalRepresentativePhone?: SortOrder
    fileId?: SortOrder
    shareId?: SortOrder
    TelephoneNumber?: SortOrder
    status?: SortOrder
    shareholderTypeId?: SortOrder
    registredAt?: SortOrder
    mode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ShareholderAvgOrderByAggregateInput = {
    addressId?: SortOrder
    fileId?: SortOrder
    mode?: SortOrder
  }

  export type ShareholderMaxOrderByAggregateInput = {
    id?: SortOrder
    ShareholderID?: SortOrder
    engName?: SortOrder
    amhName?: SortOrder
    Sex?: SortOrder
    ForeignID?: SortOrder
    PassportNumber?: SortOrder
    dateOfNationalityChange?: SortOrder
    NationalID?: SortOrder
    email?: SortOrder
    Nationality?: SortOrder
    addressId?: SortOrder
    AccountNumber?: SortOrder
    TinNumber?: SortOrder
    MinorShareholders?: SortOrder
    MothersName?: SortOrder
    Organisation?: SortOrder
    NameOfLegalRepresentative?: SortOrder
    LegalRepresentativePhone?: SortOrder
    fileId?: SortOrder
    shareId?: SortOrder
    TelephoneNumber?: SortOrder
    status?: SortOrder
    shareholderTypeId?: SortOrder
    registredAt?: SortOrder
    mode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ShareholderMinOrderByAggregateInput = {
    id?: SortOrder
    ShareholderID?: SortOrder
    engName?: SortOrder
    amhName?: SortOrder
    Sex?: SortOrder
    ForeignID?: SortOrder
    PassportNumber?: SortOrder
    dateOfNationalityChange?: SortOrder
    NationalID?: SortOrder
    email?: SortOrder
    Nationality?: SortOrder
    addressId?: SortOrder
    AccountNumber?: SortOrder
    TinNumber?: SortOrder
    MinorShareholders?: SortOrder
    MothersName?: SortOrder
    Organisation?: SortOrder
    NameOfLegalRepresentative?: SortOrder
    LegalRepresentativePhone?: SortOrder
    fileId?: SortOrder
    shareId?: SortOrder
    TelephoneNumber?: SortOrder
    status?: SortOrder
    shareholderTypeId?: SortOrder
    registredAt?: SortOrder
    mode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ShareholderSumOrderByAggregateInput = {
    addressId?: SortOrder
    fileId?: SortOrder
    mode?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type ShareholderRelationFilter = {
    is?: ShareholderWhereInput
    isNot?: ShareholderWhereInput
  }

  export type ShareholderLogCountOrderByAggregateInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    mode?: SortOrder
    columnName?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareholderLogAvgOrderByAggregateInput = {
    id?: SortOrder
    mode?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareholderLogMaxOrderByAggregateInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    mode?: SortOrder
    columnName?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareholderLogMinOrderByAggregateInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    mode?: SortOrder
    columnName?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareholderLogSumOrderByAggregateInput = {
    id?: SortOrder
    mode?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareCountOrderByAggregateInput = {
    id?: SortOrder
    noOfShare?: SortOrder
    totalSubscribedAmount?: SortOrder
    totalPaidAmount?: SortOrder
    premiumAmount?: SortOrder
    serviceChargeAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareAvgOrderByAggregateInput = {
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareMaxOrderByAggregateInput = {
    id?: SortOrder
    noOfShare?: SortOrder
    totalSubscribedAmount?: SortOrder
    totalPaidAmount?: SortOrder
    premiumAmount?: SortOrder
    serviceChargeAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareMinOrderByAggregateInput = {
    id?: SortOrder
    noOfShare?: SortOrder
    totalSubscribedAmount?: SortOrder
    totalPaidAmount?: SortOrder
    premiumAmount?: SortOrder
    serviceChargeAmount?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareSumOrderByAggregateInput = {
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareholdingRelationFilter = {
    is?: ShareholdingWhereInput
    isNot?: ShareholdingWhereInput
  }

  export type ShareTransactionCountOrderByAggregateInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    shareholdingId?: SortOrder
    paidAmount?: SortOrder
    fycType?: SortOrder
    paymentReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareTransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    fycType?: SortOrder
    paymentReason?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareTransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    shareholdingId?: SortOrder
    paidAmount?: SortOrder
    fycType?: SortOrder
    paymentReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareTransactionMinOrderByAggregateInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    shareholdingId?: SortOrder
    paidAmount?: SortOrder
    fycType?: SortOrder
    paymentReason?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareTransactionSumOrderByAggregateInput = {
    id?: SortOrder
    fycType?: SortOrder
    paymentReason?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareholdingCountOrderByAggregateInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    serialNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareholdingAvgOrderByAggregateInput = {
    serialNumber?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareholdingMaxOrderByAggregateInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    serialNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareholdingMinOrderByAggregateInput = {
    id?: SortOrder
    shareholderId?: SortOrder
    serialNumber?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareholdingSumOrderByAggregateInput = {
    serialNumber?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareTransferCountOrderByAggregateInput = {
    id?: SortOrder
    fromShareholderId?: SortOrder
    toShareholderId?: SortOrder
    placeOfTransferId?: SortOrder
    transferType?: SortOrder
    serialNumber?: SortOrder
    fycType?: SortOrder
    paymentReason?: SortOrder
    transferDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareTransferAvgOrderByAggregateInput = {
    id?: SortOrder
    placeOfTransferId?: SortOrder
    transferType?: SortOrder
    serialNumber?: SortOrder
    fycType?: SortOrder
    paymentReason?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareTransferMaxOrderByAggregateInput = {
    id?: SortOrder
    fromShareholderId?: SortOrder
    toShareholderId?: SortOrder
    placeOfTransferId?: SortOrder
    transferType?: SortOrder
    serialNumber?: SortOrder
    fycType?: SortOrder
    paymentReason?: SortOrder
    transferDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareTransferMinOrderByAggregateInput = {
    id?: SortOrder
    fromShareholderId?: SortOrder
    toShareholderId?: SortOrder
    placeOfTransferId?: SortOrder
    transferType?: SortOrder
    serialNumber?: SortOrder
    fycType?: SortOrder
    paymentReason?: SortOrder
    transferDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type ShareTransferSumOrderByAggregateInput = {
    id?: SortOrder
    placeOfTransferId?: SortOrder
    transferType?: SortOrder
    serialNumber?: SortOrder
    fycType?: SortOrder
    paymentReason?: SortOrder
    createdBy?: SortOrder
    updatedBy?: SortOrder
  }

  export type SystemLogCountOrderByAggregateInput = {
    id?: SortOrder
    tableName?: SortOrder
    activity?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemLogAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type SystemLogMaxOrderByAggregateInput = {
    id?: SortOrder
    tableName?: SortOrder
    activity?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemLogMinOrderByAggregateInput = {
    id?: SortOrder
    tableName?: SortOrder
    activity?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SystemLogSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type UserCreateNestedOneWithoutCreatedUsersInput = {
    create?: XOR<UserCreateWithoutCreatedUsersInput, UserUncheckedCreateWithoutCreatedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedUsersInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedUsersInput = {
    create?: XOR<UserCreateWithoutUpdatedUsersInput, UserUncheckedCreateWithoutUpdatedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedUsersInput
    connect?: UserWhereUniqueInput
  }

  export type UserRoleCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageCreateNestedManyWithoutReceiverInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<UserCreateWithoutUpdatedByInput, UserUncheckedCreateWithoutUpdatedByInput> | UserCreateWithoutUpdatedByInput[] | UserUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedByInput | UserCreateOrConnectWithoutUpdatedByInput[]
    createMany?: UserCreateManyUpdatedByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput> | UserCreateWithoutCreatedByInput[] | UserUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByInput | UserCreateOrConnectWithoutCreatedByInput[]
    createMany?: UserCreateManyCreatedByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type RoleCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<RoleCreateWithoutUpdatedByInput, RoleUncheckedCreateWithoutUpdatedByInput> | RoleCreateWithoutUpdatedByInput[] | RoleUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUpdatedByInput | RoleCreateOrConnectWithoutUpdatedByInput[]
    createMany?: RoleCreateManyUpdatedByInputEnvelope
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type RoleCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<RoleCreateWithoutCreatedByInput, RoleUncheckedCreateWithoutCreatedByInput> | RoleCreateWithoutCreatedByInput[] | RoleUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutCreatedByInput | RoleCreateOrConnectWithoutCreatedByInput[]
    createMany?: RoleCreateManyCreatedByInputEnvelope
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type PermissionCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PermissionCreateWithoutUpdatedByInput, PermissionUncheckedCreateWithoutUpdatedByInput> | PermissionCreateWithoutUpdatedByInput[] | PermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutUpdatedByInput | PermissionCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PermissionCreateManyUpdatedByInputEnvelope
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
  }

  export type PermissionCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PermissionCreateWithoutCreatedByInput, PermissionUncheckedCreateWithoutCreatedByInput> | PermissionCreateWithoutCreatedByInput[] | PermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutCreatedByInput | PermissionCreateOrConnectWithoutCreatedByInput[]
    createMany?: PermissionCreateManyCreatedByInputEnvelope
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
  }

  export type ShareholderCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ShareholderCreateWithoutUpdatedByInput, ShareholderUncheckedCreateWithoutUpdatedByInput> | ShareholderCreateWithoutUpdatedByInput[] | ShareholderUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutUpdatedByInput | ShareholderCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ShareholderCreateManyUpdatedByInputEnvelope
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
  }

  export type ShareholderCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ShareholderCreateWithoutCreatedByInput, ShareholderUncheckedCreateWithoutCreatedByInput> | ShareholderCreateWithoutCreatedByInput[] | ShareholderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutCreatedByInput | ShareholderCreateOrConnectWithoutCreatedByInput[]
    createMany?: ShareholderCreateManyCreatedByInputEnvelope
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type MessageUncheckedCreateNestedManyWithoutReceiverInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<UserCreateWithoutUpdatedByInput, UserUncheckedCreateWithoutUpdatedByInput> | UserCreateWithoutUpdatedByInput[] | UserUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedByInput | UserCreateOrConnectWithoutUpdatedByInput[]
    createMany?: UserCreateManyUpdatedByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput> | UserCreateWithoutCreatedByInput[] | UserUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByInput | UserCreateOrConnectWithoutCreatedByInput[]
    createMany?: UserCreateManyCreatedByInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type RoleUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<RoleCreateWithoutUpdatedByInput, RoleUncheckedCreateWithoutUpdatedByInput> | RoleCreateWithoutUpdatedByInput[] | RoleUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUpdatedByInput | RoleCreateOrConnectWithoutUpdatedByInput[]
    createMany?: RoleCreateManyUpdatedByInputEnvelope
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type RoleUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<RoleCreateWithoutCreatedByInput, RoleUncheckedCreateWithoutCreatedByInput> | RoleCreateWithoutCreatedByInput[] | RoleUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutCreatedByInput | RoleCreateOrConnectWithoutCreatedByInput[]
    createMany?: RoleCreateManyCreatedByInputEnvelope
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
  }

  export type PermissionUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PermissionCreateWithoutUpdatedByInput, PermissionUncheckedCreateWithoutUpdatedByInput> | PermissionCreateWithoutUpdatedByInput[] | PermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutUpdatedByInput | PermissionCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PermissionCreateManyUpdatedByInputEnvelope
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
  }

  export type PermissionUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PermissionCreateWithoutCreatedByInput, PermissionUncheckedCreateWithoutCreatedByInput> | PermissionCreateWithoutCreatedByInput[] | PermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutCreatedByInput | PermissionCreateOrConnectWithoutCreatedByInput[]
    createMany?: PermissionCreateManyCreatedByInputEnvelope
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
  }

  export type ShareholderUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ShareholderCreateWithoutUpdatedByInput, ShareholderUncheckedCreateWithoutUpdatedByInput> | ShareholderCreateWithoutUpdatedByInput[] | ShareholderUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutUpdatedByInput | ShareholderCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ShareholderCreateManyUpdatedByInputEnvelope
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
  }

  export type ShareholderUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ShareholderCreateWithoutCreatedByInput, ShareholderUncheckedCreateWithoutCreatedByInput> | ShareholderCreateWithoutCreatedByInput[] | ShareholderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutCreatedByInput | ShareholderCreateOrConnectWithoutCreatedByInput[]
    createMany?: ShareholderCreateManyCreatedByInputEnvelope
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneWithoutCreatedUsersNestedInput = {
    create?: XOR<UserCreateWithoutCreatedUsersInput, UserUncheckedCreateWithoutCreatedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedUsersInput
    upsert?: UserUpsertWithoutCreatedUsersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedUsersInput, UserUpdateWithoutCreatedUsersInput>, UserUncheckedUpdateWithoutCreatedUsersInput>
  }

  export type UserUpdateOneWithoutUpdatedUsersNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedUsersInput, UserUncheckedCreateWithoutUpdatedUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedUsersInput
    upsert?: UserUpsertWithoutUpdatedUsersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedUsersInput, UserUpdateWithoutUpdatedUsersInput>, UserUncheckedUpdateWithoutUpdatedUsersInput>
  }

  export type UserRoleUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverInput | MessageUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverInput | MessageUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverInput | MessageUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UserUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedByInput, UserUncheckedCreateWithoutUpdatedByInput> | UserCreateWithoutUpdatedByInput[] | UserUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedByInput | UserCreateOrConnectWithoutUpdatedByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUpdatedByInput | UserUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: UserCreateManyUpdatedByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUpdatedByInput | UserUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUpdatedByInput | UserUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput> | UserCreateWithoutCreatedByInput[] | UserUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByInput | UserCreateOrConnectWithoutCreatedByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCreatedByInput | UserUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: UserCreateManyCreatedByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCreatedByInput | UserUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCreatedByInput | UserUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type RoleUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<RoleCreateWithoutUpdatedByInput, RoleUncheckedCreateWithoutUpdatedByInput> | RoleCreateWithoutUpdatedByInput[] | RoleUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUpdatedByInput | RoleCreateOrConnectWithoutUpdatedByInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutUpdatedByInput | RoleUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: RoleCreateManyUpdatedByInputEnvelope
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutUpdatedByInput | RoleUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutUpdatedByInput | RoleUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type RoleUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<RoleCreateWithoutCreatedByInput, RoleUncheckedCreateWithoutCreatedByInput> | RoleCreateWithoutCreatedByInput[] | RoleUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutCreatedByInput | RoleCreateOrConnectWithoutCreatedByInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutCreatedByInput | RoleUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: RoleCreateManyCreatedByInputEnvelope
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutCreatedByInput | RoleUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutCreatedByInput | RoleUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type PermissionUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PermissionCreateWithoutUpdatedByInput, PermissionUncheckedCreateWithoutUpdatedByInput> | PermissionCreateWithoutUpdatedByInput[] | PermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutUpdatedByInput | PermissionCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PermissionUpsertWithWhereUniqueWithoutUpdatedByInput | PermissionUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PermissionCreateManyUpdatedByInputEnvelope
    set?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    disconnect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    delete?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    update?: PermissionUpdateWithWhereUniqueWithoutUpdatedByInput | PermissionUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PermissionUpdateManyWithWhereWithoutUpdatedByInput | PermissionUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
  }

  export type PermissionUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PermissionCreateWithoutCreatedByInput, PermissionUncheckedCreateWithoutCreatedByInput> | PermissionCreateWithoutCreatedByInput[] | PermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutCreatedByInput | PermissionCreateOrConnectWithoutCreatedByInput[]
    upsert?: PermissionUpsertWithWhereUniqueWithoutCreatedByInput | PermissionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PermissionCreateManyCreatedByInputEnvelope
    set?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    disconnect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    delete?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    update?: PermissionUpdateWithWhereUniqueWithoutCreatedByInput | PermissionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PermissionUpdateManyWithWhereWithoutCreatedByInput | PermissionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
  }

  export type ShareholderUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ShareholderCreateWithoutUpdatedByInput, ShareholderUncheckedCreateWithoutUpdatedByInput> | ShareholderCreateWithoutUpdatedByInput[] | ShareholderUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutUpdatedByInput | ShareholderCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ShareholderUpsertWithWhereUniqueWithoutUpdatedByInput | ShareholderUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ShareholderCreateManyUpdatedByInputEnvelope
    set?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    disconnect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    delete?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    update?: ShareholderUpdateWithWhereUniqueWithoutUpdatedByInput | ShareholderUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ShareholderUpdateManyWithWhereWithoutUpdatedByInput | ShareholderUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ShareholderScalarWhereInput | ShareholderScalarWhereInput[]
  }

  export type ShareholderUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ShareholderCreateWithoutCreatedByInput, ShareholderUncheckedCreateWithoutCreatedByInput> | ShareholderCreateWithoutCreatedByInput[] | ShareholderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutCreatedByInput | ShareholderCreateOrConnectWithoutCreatedByInput[]
    upsert?: ShareholderUpsertWithWhereUniqueWithoutCreatedByInput | ShareholderUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ShareholderCreateManyCreatedByInputEnvelope
    set?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    disconnect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    delete?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    update?: ShareholderUpdateWithWhereUniqueWithoutCreatedByInput | ShareholderUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ShareholderUpdateManyWithWhereWithoutCreatedByInput | ShareholderUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ShareholderScalarWhereInput | ShareholderScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput> | UserRoleCreateWithoutUserInput[] | UserRoleUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutUserInput | UserRoleCreateOrConnectWithoutUserInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutUserInput | UserRoleUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserRoleCreateManyUserInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutUserInput | UserRoleUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutUserInput | UserRoleUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput> | MessageCreateWithoutSenderInput[] | MessageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutSenderInput | MessageCreateOrConnectWithoutSenderInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutSenderInput | MessageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: MessageCreateManySenderInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutSenderInput | MessageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutSenderInput | MessageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type MessageUncheckedUpdateManyWithoutReceiverNestedInput = {
    create?: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput> | MessageCreateWithoutReceiverInput[] | MessageUncheckedCreateWithoutReceiverInput[]
    connectOrCreate?: MessageCreateOrConnectWithoutReceiverInput | MessageCreateOrConnectWithoutReceiverInput[]
    upsert?: MessageUpsertWithWhereUniqueWithoutReceiverInput | MessageUpsertWithWhereUniqueWithoutReceiverInput[]
    createMany?: MessageCreateManyReceiverInputEnvelope
    set?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    disconnect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    delete?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    connect?: MessageWhereUniqueInput | MessageWhereUniqueInput[]
    update?: MessageUpdateWithWhereUniqueWithoutReceiverInput | MessageUpdateWithWhereUniqueWithoutReceiverInput[]
    updateMany?: MessageUpdateManyWithWhereWithoutReceiverInput | MessageUpdateManyWithWhereWithoutReceiverInput[]
    deleteMany?: MessageScalarWhereInput | MessageScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedByInput, UserUncheckedCreateWithoutUpdatedByInput> | UserCreateWithoutUpdatedByInput[] | UserUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedByInput | UserCreateOrConnectWithoutUpdatedByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutUpdatedByInput | UserUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: UserCreateManyUpdatedByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutUpdatedByInput | UserUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutUpdatedByInput | UserUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput> | UserCreateWithoutCreatedByInput[] | UserUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutCreatedByInput | UserCreateOrConnectWithoutCreatedByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutCreatedByInput | UserUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: UserCreateManyCreatedByInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutCreatedByInput | UserUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutCreatedByInput | UserUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type RoleUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<RoleCreateWithoutUpdatedByInput, RoleUncheckedCreateWithoutUpdatedByInput> | RoleCreateWithoutUpdatedByInput[] | RoleUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutUpdatedByInput | RoleCreateOrConnectWithoutUpdatedByInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutUpdatedByInput | RoleUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: RoleCreateManyUpdatedByInputEnvelope
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutUpdatedByInput | RoleUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutUpdatedByInput | RoleUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type RoleUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<RoleCreateWithoutCreatedByInput, RoleUncheckedCreateWithoutCreatedByInput> | RoleCreateWithoutCreatedByInput[] | RoleUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: RoleCreateOrConnectWithoutCreatedByInput | RoleCreateOrConnectWithoutCreatedByInput[]
    upsert?: RoleUpsertWithWhereUniqueWithoutCreatedByInput | RoleUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: RoleCreateManyCreatedByInputEnvelope
    set?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    disconnect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    delete?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    connect?: RoleWhereUniqueInput | RoleWhereUniqueInput[]
    update?: RoleUpdateWithWhereUniqueWithoutCreatedByInput | RoleUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: RoleUpdateManyWithWhereWithoutCreatedByInput | RoleUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: RoleScalarWhereInput | RoleScalarWhereInput[]
  }

  export type PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PermissionCreateWithoutUpdatedByInput, PermissionUncheckedCreateWithoutUpdatedByInput> | PermissionCreateWithoutUpdatedByInput[] | PermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutUpdatedByInput | PermissionCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PermissionUpsertWithWhereUniqueWithoutUpdatedByInput | PermissionUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PermissionCreateManyUpdatedByInputEnvelope
    set?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    disconnect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    delete?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    update?: PermissionUpdateWithWhereUniqueWithoutUpdatedByInput | PermissionUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PermissionUpdateManyWithWhereWithoutUpdatedByInput | PermissionUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
  }

  export type PermissionUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PermissionCreateWithoutCreatedByInput, PermissionUncheckedCreateWithoutCreatedByInput> | PermissionCreateWithoutCreatedByInput[] | PermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutCreatedByInput | PermissionCreateOrConnectWithoutCreatedByInput[]
    upsert?: PermissionUpsertWithWhereUniqueWithoutCreatedByInput | PermissionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PermissionCreateManyCreatedByInputEnvelope
    set?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    disconnect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    delete?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    update?: PermissionUpdateWithWhereUniqueWithoutCreatedByInput | PermissionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PermissionUpdateManyWithWhereWithoutCreatedByInput | PermissionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
  }

  export type ShareholderUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ShareholderCreateWithoutUpdatedByInput, ShareholderUncheckedCreateWithoutUpdatedByInput> | ShareholderCreateWithoutUpdatedByInput[] | ShareholderUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutUpdatedByInput | ShareholderCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ShareholderUpsertWithWhereUniqueWithoutUpdatedByInput | ShareholderUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ShareholderCreateManyUpdatedByInputEnvelope
    set?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    disconnect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    delete?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    update?: ShareholderUpdateWithWhereUniqueWithoutUpdatedByInput | ShareholderUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ShareholderUpdateManyWithWhereWithoutUpdatedByInput | ShareholderUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ShareholderScalarWhereInput | ShareholderScalarWhereInput[]
  }

  export type ShareholderUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ShareholderCreateWithoutCreatedByInput, ShareholderUncheckedCreateWithoutCreatedByInput> | ShareholderCreateWithoutCreatedByInput[] | ShareholderUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutCreatedByInput | ShareholderCreateOrConnectWithoutCreatedByInput[]
    upsert?: ShareholderUpsertWithWhereUniqueWithoutCreatedByInput | ShareholderUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ShareholderCreateManyCreatedByInputEnvelope
    set?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    disconnect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    delete?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    update?: ShareholderUpdateWithWhereUniqueWithoutCreatedByInput | ShareholderUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ShareholderUpdateManyWithWhereWithoutCreatedByInput | ShareholderUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ShareholderScalarWhereInput | ShareholderScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatedRolesInput = {
    create?: XOR<UserCreateWithoutCreatedRolesInput, UserUncheckedCreateWithoutCreatedRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRolesInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedRolesInput = {
    create?: XOR<UserCreateWithoutUpdatedRolesInput, UserUncheckedCreateWithoutUpdatedRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedRolesInput
    connect?: UserWhereUniqueInput
  }

  export type UserRoleCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type RolePermissionCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserRoleUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutCreatedRolesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedRolesInput, UserUncheckedCreateWithoutCreatedRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedRolesInput
    upsert?: UserUpsertWithoutCreatedRolesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedRolesInput, UserUpdateWithoutCreatedRolesInput>, UserUncheckedUpdateWithoutCreatedRolesInput>
  }

  export type UserUpdateOneWithoutUpdatedRolesNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedRolesInput, UserUncheckedCreateWithoutUpdatedRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedRolesInput
    upsert?: UserUpsertWithoutUpdatedRolesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedRolesInput, UserUpdateWithoutUpdatedRolesInput>, UserUncheckedUpdateWithoutUpdatedRolesInput>
  }

  export type UserRoleUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RolePermissionUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput> | UserRoleCreateWithoutRoleInput[] | UserRoleUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserRoleCreateOrConnectWithoutRoleInput | UserRoleCreateOrConnectWithoutRoleInput[]
    upsert?: UserRoleUpsertWithWhereUniqueWithoutRoleInput | UserRoleUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserRoleCreateManyRoleInputEnvelope
    set?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    disconnect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    delete?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    connect?: UserRoleWhereUniqueInput | UserRoleWhereUniqueInput[]
    update?: UserRoleUpdateWithWhereUniqueWithoutRoleInput | UserRoleUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserRoleUpdateManyWithWhereWithoutRoleInput | UserRoleUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput> | RolePermissionCreateWithoutRoleInput[] | RolePermissionUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutRoleInput | RolePermissionCreateOrConnectWithoutRoleInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutRoleInput | RolePermissionUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: RolePermissionCreateManyRoleInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutRoleInput | RolePermissionUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutRoleInput | RolePermissionUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutRolesInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput
    connect?: UserWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    connectOrCreate?: UserCreateOrConnectWithoutRolesInput
    upsert?: UserUpsertWithoutRolesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRolesInput, UserUpdateWithoutRolesInput>, UserUncheckedUpdateWithoutRolesInput>
  }

  export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUsersInput, RoleUpdateWithoutUsersInput>, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type UserCreateNestedOneWithoutCreatedPermissionsInput = {
    create?: XOR<UserCreateWithoutCreatedPermissionsInput, UserUncheckedCreateWithoutCreatedPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedPermissionsInput = {
    create?: XOR<UserCreateWithoutUpdatedPermissionsInput, UserUncheckedCreateWithoutUpdatedPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedPermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type RolePermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type RolePermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutCreatedPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedPermissionsInput, UserUncheckedCreateWithoutCreatedPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPermissionsInput
    upsert?: UserUpsertWithoutCreatedPermissionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedPermissionsInput, UserUpdateWithoutCreatedPermissionsInput>, UserUncheckedUpdateWithoutCreatedPermissionsInput>
  }

  export type UserUpdateOneWithoutUpdatedPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedPermissionsInput, UserUncheckedCreateWithoutUpdatedPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedPermissionsInput
    upsert?: UserUpsertWithoutUpdatedPermissionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedPermissionsInput, UserUpdateWithoutUpdatedPermissionsInput>, UserUncheckedUpdateWithoutUpdatedPermissionsInput>
  }

  export type RolePermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput> | RolePermissionCreateWithoutPermissionInput[] | RolePermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: RolePermissionCreateOrConnectWithoutPermissionInput | RolePermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: RolePermissionUpsertWithWhereUniqueWithoutPermissionInput | RolePermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: RolePermissionCreateManyPermissionInputEnvelope
    set?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    disconnect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    delete?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    connect?: RolePermissionWhereUniqueInput | RolePermissionWhereUniqueInput[]
    update?: RolePermissionUpdateWithWhereUniqueWithoutPermissionInput | RolePermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: RolePermissionUpdateManyWithWhereWithoutPermissionInput | RolePermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
  }

  export type RoleCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput
    connect?: RoleWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutRolesInput = {
    create?: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolesInput
    connect?: PermissionWhereUniqueInput
  }

  export type RoleUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: RoleCreateOrConnectWithoutPermissionsInput
    upsert?: RoleUpsertWithoutPermissionsInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutPermissionsInput, RoleUpdateWithoutPermissionsInput>, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type PermissionUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutRolesInput
    upsert?: PermissionUpsertWithoutRolesInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutRolesInput, PermissionUpdateWithoutRolesInput>, PermissionUncheckedUpdateWithoutRolesInput>
  }

  export type ShareholderCreateNestedManyWithoutAddressInput = {
    create?: XOR<ShareholderCreateWithoutAddressInput, ShareholderUncheckedCreateWithoutAddressInput> | ShareholderCreateWithoutAddressInput[] | ShareholderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutAddressInput | ShareholderCreateOrConnectWithoutAddressInput[]
    createMany?: ShareholderCreateManyAddressInputEnvelope
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
  }

  export type ShareholderUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<ShareholderCreateWithoutAddressInput, ShareholderUncheckedCreateWithoutAddressInput> | ShareholderCreateWithoutAddressInput[] | ShareholderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutAddressInput | ShareholderCreateOrConnectWithoutAddressInput[]
    createMany?: ShareholderCreateManyAddressInputEnvelope
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ShareholderUpdateManyWithoutAddressNestedInput = {
    create?: XOR<ShareholderCreateWithoutAddressInput, ShareholderUncheckedCreateWithoutAddressInput> | ShareholderCreateWithoutAddressInput[] | ShareholderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutAddressInput | ShareholderCreateOrConnectWithoutAddressInput[]
    upsert?: ShareholderUpsertWithWhereUniqueWithoutAddressInput | ShareholderUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: ShareholderCreateManyAddressInputEnvelope
    set?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    disconnect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    delete?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    update?: ShareholderUpdateWithWhereUniqueWithoutAddressInput | ShareholderUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: ShareholderUpdateManyWithWhereWithoutAddressInput | ShareholderUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: ShareholderScalarWhereInput | ShareholderScalarWhereInput[]
  }

  export type ShareholderUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<ShareholderCreateWithoutAddressInput, ShareholderUncheckedCreateWithoutAddressInput> | ShareholderCreateWithoutAddressInput[] | ShareholderUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutAddressInput | ShareholderCreateOrConnectWithoutAddressInput[]
    upsert?: ShareholderUpsertWithWhereUniqueWithoutAddressInput | ShareholderUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: ShareholderCreateManyAddressInputEnvelope
    set?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    disconnect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    delete?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    update?: ShareholderUpdateWithWhereUniqueWithoutAddressInput | ShareholderUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: ShareholderUpdateManyWithWhereWithoutAddressInput | ShareholderUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: ShareholderScalarWhereInput | ShareholderScalarWhereInput[]
  }

  export type CityCreateNestedManyWithoutRegionInput = {
    create?: XOR<CityCreateWithoutRegionInput, CityUncheckedCreateWithoutRegionInput> | CityCreateWithoutRegionInput[] | CityUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: CityCreateOrConnectWithoutRegionInput | CityCreateOrConnectWithoutRegionInput[]
    createMany?: CityCreateManyRegionInputEnvelope
    connect?: CityWhereUniqueInput | CityWhereUniqueInput[]
  }

  export type CityUncheckedCreateNestedManyWithoutRegionInput = {
    create?: XOR<CityCreateWithoutRegionInput, CityUncheckedCreateWithoutRegionInput> | CityCreateWithoutRegionInput[] | CityUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: CityCreateOrConnectWithoutRegionInput | CityCreateOrConnectWithoutRegionInput[]
    createMany?: CityCreateManyRegionInputEnvelope
    connect?: CityWhereUniqueInput | CityWhereUniqueInput[]
  }

  export type CityUpdateManyWithoutRegionNestedInput = {
    create?: XOR<CityCreateWithoutRegionInput, CityUncheckedCreateWithoutRegionInput> | CityCreateWithoutRegionInput[] | CityUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: CityCreateOrConnectWithoutRegionInput | CityCreateOrConnectWithoutRegionInput[]
    upsert?: CityUpsertWithWhereUniqueWithoutRegionInput | CityUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: CityCreateManyRegionInputEnvelope
    set?: CityWhereUniqueInput | CityWhereUniqueInput[]
    disconnect?: CityWhereUniqueInput | CityWhereUniqueInput[]
    delete?: CityWhereUniqueInput | CityWhereUniqueInput[]
    connect?: CityWhereUniqueInput | CityWhereUniqueInput[]
    update?: CityUpdateWithWhereUniqueWithoutRegionInput | CityUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: CityUpdateManyWithWhereWithoutRegionInput | CityUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: CityScalarWhereInput | CityScalarWhereInput[]
  }

  export type CityUncheckedUpdateManyWithoutRegionNestedInput = {
    create?: XOR<CityCreateWithoutRegionInput, CityUncheckedCreateWithoutRegionInput> | CityCreateWithoutRegionInput[] | CityUncheckedCreateWithoutRegionInput[]
    connectOrCreate?: CityCreateOrConnectWithoutRegionInput | CityCreateOrConnectWithoutRegionInput[]
    upsert?: CityUpsertWithWhereUniqueWithoutRegionInput | CityUpsertWithWhereUniqueWithoutRegionInput[]
    createMany?: CityCreateManyRegionInputEnvelope
    set?: CityWhereUniqueInput | CityWhereUniqueInput[]
    disconnect?: CityWhereUniqueInput | CityWhereUniqueInput[]
    delete?: CityWhereUniqueInput | CityWhereUniqueInput[]
    connect?: CityWhereUniqueInput | CityWhereUniqueInput[]
    update?: CityUpdateWithWhereUniqueWithoutRegionInput | CityUpdateWithWhereUniqueWithoutRegionInput[]
    updateMany?: CityUpdateManyWithWhereWithoutRegionInput | CityUpdateManyWithWhereWithoutRegionInput[]
    deleteMany?: CityScalarWhereInput | CityScalarWhereInput[]
  }

  export type RegionCreateNestedOneWithoutCitiesInput = {
    create?: XOR<RegionCreateWithoutCitiesInput, RegionUncheckedCreateWithoutCitiesInput>
    connectOrCreate?: RegionCreateOrConnectWithoutCitiesInput
    connect?: RegionWhereUniqueInput
  }

  export type SubcityCreateNestedManyWithoutCityInput = {
    create?: XOR<SubcityCreateWithoutCityInput, SubcityUncheckedCreateWithoutCityInput> | SubcityCreateWithoutCityInput[] | SubcityUncheckedCreateWithoutCityInput[]
    connectOrCreate?: SubcityCreateOrConnectWithoutCityInput | SubcityCreateOrConnectWithoutCityInput[]
    createMany?: SubcityCreateManyCityInputEnvelope
    connect?: SubcityWhereUniqueInput | SubcityWhereUniqueInput[]
  }

  export type SubcityUncheckedCreateNestedManyWithoutCityInput = {
    create?: XOR<SubcityCreateWithoutCityInput, SubcityUncheckedCreateWithoutCityInput> | SubcityCreateWithoutCityInput[] | SubcityUncheckedCreateWithoutCityInput[]
    connectOrCreate?: SubcityCreateOrConnectWithoutCityInput | SubcityCreateOrConnectWithoutCityInput[]
    createMany?: SubcityCreateManyCityInputEnvelope
    connect?: SubcityWhereUniqueInput | SubcityWhereUniqueInput[]
  }

  export type RegionUpdateOneRequiredWithoutCitiesNestedInput = {
    create?: XOR<RegionCreateWithoutCitiesInput, RegionUncheckedCreateWithoutCitiesInput>
    connectOrCreate?: RegionCreateOrConnectWithoutCitiesInput
    upsert?: RegionUpsertWithoutCitiesInput
    connect?: RegionWhereUniqueInput
    update?: XOR<XOR<RegionUpdateToOneWithWhereWithoutCitiesInput, RegionUpdateWithoutCitiesInput>, RegionUncheckedUpdateWithoutCitiesInput>
  }

  export type SubcityUpdateManyWithoutCityNestedInput = {
    create?: XOR<SubcityCreateWithoutCityInput, SubcityUncheckedCreateWithoutCityInput> | SubcityCreateWithoutCityInput[] | SubcityUncheckedCreateWithoutCityInput[]
    connectOrCreate?: SubcityCreateOrConnectWithoutCityInput | SubcityCreateOrConnectWithoutCityInput[]
    upsert?: SubcityUpsertWithWhereUniqueWithoutCityInput | SubcityUpsertWithWhereUniqueWithoutCityInput[]
    createMany?: SubcityCreateManyCityInputEnvelope
    set?: SubcityWhereUniqueInput | SubcityWhereUniqueInput[]
    disconnect?: SubcityWhereUniqueInput | SubcityWhereUniqueInput[]
    delete?: SubcityWhereUniqueInput | SubcityWhereUniqueInput[]
    connect?: SubcityWhereUniqueInput | SubcityWhereUniqueInput[]
    update?: SubcityUpdateWithWhereUniqueWithoutCityInput | SubcityUpdateWithWhereUniqueWithoutCityInput[]
    updateMany?: SubcityUpdateManyWithWhereWithoutCityInput | SubcityUpdateManyWithWhereWithoutCityInput[]
    deleteMany?: SubcityScalarWhereInput | SubcityScalarWhereInput[]
  }

  export type SubcityUncheckedUpdateManyWithoutCityNestedInput = {
    create?: XOR<SubcityCreateWithoutCityInput, SubcityUncheckedCreateWithoutCityInput> | SubcityCreateWithoutCityInput[] | SubcityUncheckedCreateWithoutCityInput[]
    connectOrCreate?: SubcityCreateOrConnectWithoutCityInput | SubcityCreateOrConnectWithoutCityInput[]
    upsert?: SubcityUpsertWithWhereUniqueWithoutCityInput | SubcityUpsertWithWhereUniqueWithoutCityInput[]
    createMany?: SubcityCreateManyCityInputEnvelope
    set?: SubcityWhereUniqueInput | SubcityWhereUniqueInput[]
    disconnect?: SubcityWhereUniqueInput | SubcityWhereUniqueInput[]
    delete?: SubcityWhereUniqueInput | SubcityWhereUniqueInput[]
    connect?: SubcityWhereUniqueInput | SubcityWhereUniqueInput[]
    update?: SubcityUpdateWithWhereUniqueWithoutCityInput | SubcityUpdateWithWhereUniqueWithoutCityInput[]
    updateMany?: SubcityUpdateManyWithWhereWithoutCityInput | SubcityUpdateManyWithWhereWithoutCityInput[]
    deleteMany?: SubcityScalarWhereInput | SubcityScalarWhereInput[]
  }

  export type CityCreateNestedOneWithoutSubcitiesInput = {
    create?: XOR<CityCreateWithoutSubcitiesInput, CityUncheckedCreateWithoutSubcitiesInput>
    connectOrCreate?: CityCreateOrConnectWithoutSubcitiesInput
    connect?: CityWhereUniqueInput
  }

  export type CityUpdateOneRequiredWithoutSubcitiesNestedInput = {
    create?: XOR<CityCreateWithoutSubcitiesInput, CityUncheckedCreateWithoutSubcitiesInput>
    connectOrCreate?: CityCreateOrConnectWithoutSubcitiesInput
    upsert?: CityUpsertWithoutSubcitiesInput
    connect?: CityWhereUniqueInput
    update?: XOR<XOR<CityUpdateToOneWithWhereWithoutSubcitiesInput, CityUpdateWithoutSubcitiesInput>, CityUncheckedUpdateWithoutSubcitiesInput>
  }

  export type UserCreateNestedOneWithoutMessagesSentInput = {
    create?: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesSentInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutMessagesReceivedInput = {
    create?: XOR<UserCreateWithoutMessagesReceivedInput, UserUncheckedCreateWithoutMessagesReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesReceivedInput
    connect?: UserWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutMessagesSentNestedInput = {
    create?: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesSentInput
    upsert?: UserUpsertWithoutMessagesSentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesSentInput, UserUpdateWithoutMessagesSentInput>, UserUncheckedUpdateWithoutMessagesSentInput>
  }

  export type UserUpdateOneRequiredWithoutMessagesReceivedNestedInput = {
    create?: XOR<UserCreateWithoutMessagesReceivedInput, UserUncheckedCreateWithoutMessagesReceivedInput>
    connectOrCreate?: UserCreateOrConnectWithoutMessagesReceivedInput
    upsert?: UserUpsertWithoutMessagesReceivedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMessagesReceivedInput, UserUpdateWithoutMessagesReceivedInput>, UserUncheckedUpdateWithoutMessagesReceivedInput>
  }

  export type ShareholderCreateNestedManyWithoutShareFileInput = {
    create?: XOR<ShareholderCreateWithoutShareFileInput, ShareholderUncheckedCreateWithoutShareFileInput> | ShareholderCreateWithoutShareFileInput[] | ShareholderUncheckedCreateWithoutShareFileInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutShareFileInput | ShareholderCreateOrConnectWithoutShareFileInput[]
    createMany?: ShareholderCreateManyShareFileInputEnvelope
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
  }

  export type ShareholderUncheckedCreateNestedManyWithoutShareFileInput = {
    create?: XOR<ShareholderCreateWithoutShareFileInput, ShareholderUncheckedCreateWithoutShareFileInput> | ShareholderCreateWithoutShareFileInput[] | ShareholderUncheckedCreateWithoutShareFileInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutShareFileInput | ShareholderCreateOrConnectWithoutShareFileInput[]
    createMany?: ShareholderCreateManyShareFileInputEnvelope
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
  }

  export type ShareholderUpdateManyWithoutShareFileNestedInput = {
    create?: XOR<ShareholderCreateWithoutShareFileInput, ShareholderUncheckedCreateWithoutShareFileInput> | ShareholderCreateWithoutShareFileInput[] | ShareholderUncheckedCreateWithoutShareFileInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutShareFileInput | ShareholderCreateOrConnectWithoutShareFileInput[]
    upsert?: ShareholderUpsertWithWhereUniqueWithoutShareFileInput | ShareholderUpsertWithWhereUniqueWithoutShareFileInput[]
    createMany?: ShareholderCreateManyShareFileInputEnvelope
    set?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    disconnect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    delete?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    update?: ShareholderUpdateWithWhereUniqueWithoutShareFileInput | ShareholderUpdateWithWhereUniqueWithoutShareFileInput[]
    updateMany?: ShareholderUpdateManyWithWhereWithoutShareFileInput | ShareholderUpdateManyWithWhereWithoutShareFileInput[]
    deleteMany?: ShareholderScalarWhereInput | ShareholderScalarWhereInput[]
  }

  export type ShareholderUncheckedUpdateManyWithoutShareFileNestedInput = {
    create?: XOR<ShareholderCreateWithoutShareFileInput, ShareholderUncheckedCreateWithoutShareFileInput> | ShareholderCreateWithoutShareFileInput[] | ShareholderUncheckedCreateWithoutShareFileInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutShareFileInput | ShareholderCreateOrConnectWithoutShareFileInput[]
    upsert?: ShareholderUpsertWithWhereUniqueWithoutShareFileInput | ShareholderUpsertWithWhereUniqueWithoutShareFileInput[]
    createMany?: ShareholderCreateManyShareFileInputEnvelope
    set?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    disconnect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    delete?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    update?: ShareholderUpdateWithWhereUniqueWithoutShareFileInput | ShareholderUpdateWithWhereUniqueWithoutShareFileInput[]
    updateMany?: ShareholderUpdateManyWithWhereWithoutShareFileInput | ShareholderUpdateManyWithWhereWithoutShareFileInput[]
    deleteMany?: ShareholderScalarWhereInput | ShareholderScalarWhereInput[]
  }

  export type AddressCreateNestedOneWithoutShareholdersInput = {
    create?: XOR<AddressCreateWithoutShareholdersInput, AddressUncheckedCreateWithoutShareholdersInput>
    connectOrCreate?: AddressCreateOrConnectWithoutShareholdersInput
    connect?: AddressWhereUniqueInput
  }

  export type ShareFileCreateNestedOneWithoutShareholdersInput = {
    create?: XOR<ShareFileCreateWithoutShareholdersInput, ShareFileUncheckedCreateWithoutShareholdersInput>
    connectOrCreate?: ShareFileCreateOrConnectWithoutShareholdersInput
    connect?: ShareFileWhereUniqueInput
  }

  export type ShareCreateNestedOneWithoutShareholdersInput = {
    create?: XOR<ShareCreateWithoutShareholdersInput, ShareUncheckedCreateWithoutShareholdersInput>
    connectOrCreate?: ShareCreateOrConnectWithoutShareholdersInput
    connect?: ShareWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatedShareholdersInput = {
    create?: XOR<UserCreateWithoutCreatedShareholdersInput, UserUncheckedCreateWithoutCreatedShareholdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedShareholdersInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdatedShareholdersInput = {
    create?: XOR<UserCreateWithoutUpdatedShareholdersInput, UserUncheckedCreateWithoutUpdatedShareholdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedShareholdersInput
    connect?: UserWhereUniqueInput
  }

  export type ShareholderLogCreateNestedManyWithoutShareholderInput = {
    create?: XOR<ShareholderLogCreateWithoutShareholderInput, ShareholderLogUncheckedCreateWithoutShareholderInput> | ShareholderLogCreateWithoutShareholderInput[] | ShareholderLogUncheckedCreateWithoutShareholderInput[]
    connectOrCreate?: ShareholderLogCreateOrConnectWithoutShareholderInput | ShareholderLogCreateOrConnectWithoutShareholderInput[]
    createMany?: ShareholderLogCreateManyShareholderInputEnvelope
    connect?: ShareholderLogWhereUniqueInput | ShareholderLogWhereUniqueInput[]
  }

  export type ShareTransactionCreateNestedManyWithoutShareholderInput = {
    create?: XOR<ShareTransactionCreateWithoutShareholderInput, ShareTransactionUncheckedCreateWithoutShareholderInput> | ShareTransactionCreateWithoutShareholderInput[] | ShareTransactionUncheckedCreateWithoutShareholderInput[]
    connectOrCreate?: ShareTransactionCreateOrConnectWithoutShareholderInput | ShareTransactionCreateOrConnectWithoutShareholderInput[]
    createMany?: ShareTransactionCreateManyShareholderInputEnvelope
    connect?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
  }

  export type ShareholdingCreateNestedManyWithoutShareholderInput = {
    create?: XOR<ShareholdingCreateWithoutShareholderInput, ShareholdingUncheckedCreateWithoutShareholderInput> | ShareholdingCreateWithoutShareholderInput[] | ShareholdingUncheckedCreateWithoutShareholderInput[]
    connectOrCreate?: ShareholdingCreateOrConnectWithoutShareholderInput | ShareholdingCreateOrConnectWithoutShareholderInput[]
    createMany?: ShareholdingCreateManyShareholderInputEnvelope
    connect?: ShareholdingWhereUniqueInput | ShareholdingWhereUniqueInput[]
  }

  export type ShareTransferCreateNestedManyWithoutFromShareholderInput = {
    create?: XOR<ShareTransferCreateWithoutFromShareholderInput, ShareTransferUncheckedCreateWithoutFromShareholderInput> | ShareTransferCreateWithoutFromShareholderInput[] | ShareTransferUncheckedCreateWithoutFromShareholderInput[]
    connectOrCreate?: ShareTransferCreateOrConnectWithoutFromShareholderInput | ShareTransferCreateOrConnectWithoutFromShareholderInput[]
    createMany?: ShareTransferCreateManyFromShareholderInputEnvelope
    connect?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
  }

  export type ShareTransferCreateNestedManyWithoutToShareholderInput = {
    create?: XOR<ShareTransferCreateWithoutToShareholderInput, ShareTransferUncheckedCreateWithoutToShareholderInput> | ShareTransferCreateWithoutToShareholderInput[] | ShareTransferUncheckedCreateWithoutToShareholderInput[]
    connectOrCreate?: ShareTransferCreateOrConnectWithoutToShareholderInput | ShareTransferCreateOrConnectWithoutToShareholderInput[]
    createMany?: ShareTransferCreateManyToShareholderInputEnvelope
    connect?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
  }

  export type ShareholderLogUncheckedCreateNestedManyWithoutShareholderInput = {
    create?: XOR<ShareholderLogCreateWithoutShareholderInput, ShareholderLogUncheckedCreateWithoutShareholderInput> | ShareholderLogCreateWithoutShareholderInput[] | ShareholderLogUncheckedCreateWithoutShareholderInput[]
    connectOrCreate?: ShareholderLogCreateOrConnectWithoutShareholderInput | ShareholderLogCreateOrConnectWithoutShareholderInput[]
    createMany?: ShareholderLogCreateManyShareholderInputEnvelope
    connect?: ShareholderLogWhereUniqueInput | ShareholderLogWhereUniqueInput[]
  }

  export type ShareTransactionUncheckedCreateNestedManyWithoutShareholderInput = {
    create?: XOR<ShareTransactionCreateWithoutShareholderInput, ShareTransactionUncheckedCreateWithoutShareholderInput> | ShareTransactionCreateWithoutShareholderInput[] | ShareTransactionUncheckedCreateWithoutShareholderInput[]
    connectOrCreate?: ShareTransactionCreateOrConnectWithoutShareholderInput | ShareTransactionCreateOrConnectWithoutShareholderInput[]
    createMany?: ShareTransactionCreateManyShareholderInputEnvelope
    connect?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
  }

  export type ShareholdingUncheckedCreateNestedManyWithoutShareholderInput = {
    create?: XOR<ShareholdingCreateWithoutShareholderInput, ShareholdingUncheckedCreateWithoutShareholderInput> | ShareholdingCreateWithoutShareholderInput[] | ShareholdingUncheckedCreateWithoutShareholderInput[]
    connectOrCreate?: ShareholdingCreateOrConnectWithoutShareholderInput | ShareholdingCreateOrConnectWithoutShareholderInput[]
    createMany?: ShareholdingCreateManyShareholderInputEnvelope
    connect?: ShareholdingWhereUniqueInput | ShareholdingWhereUniqueInput[]
  }

  export type ShareTransferUncheckedCreateNestedManyWithoutFromShareholderInput = {
    create?: XOR<ShareTransferCreateWithoutFromShareholderInput, ShareTransferUncheckedCreateWithoutFromShareholderInput> | ShareTransferCreateWithoutFromShareholderInput[] | ShareTransferUncheckedCreateWithoutFromShareholderInput[]
    connectOrCreate?: ShareTransferCreateOrConnectWithoutFromShareholderInput | ShareTransferCreateOrConnectWithoutFromShareholderInput[]
    createMany?: ShareTransferCreateManyFromShareholderInputEnvelope
    connect?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
  }

  export type ShareTransferUncheckedCreateNestedManyWithoutToShareholderInput = {
    create?: XOR<ShareTransferCreateWithoutToShareholderInput, ShareTransferUncheckedCreateWithoutToShareholderInput> | ShareTransferCreateWithoutToShareholderInput[] | ShareTransferUncheckedCreateWithoutToShareholderInput[]
    connectOrCreate?: ShareTransferCreateOrConnectWithoutToShareholderInput | ShareTransferCreateOrConnectWithoutToShareholderInput[]
    createMany?: ShareTransferCreateManyToShareholderInputEnvelope
    connect?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AddressUpdateOneWithoutShareholdersNestedInput = {
    create?: XOR<AddressCreateWithoutShareholdersInput, AddressUncheckedCreateWithoutShareholdersInput>
    connectOrCreate?: AddressCreateOrConnectWithoutShareholdersInput
    upsert?: AddressUpsertWithoutShareholdersInput
    disconnect?: AddressWhereInput | boolean
    delete?: AddressWhereInput | boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutShareholdersInput, AddressUpdateWithoutShareholdersInput>, AddressUncheckedUpdateWithoutShareholdersInput>
  }

  export type ShareFileUpdateOneWithoutShareholdersNestedInput = {
    create?: XOR<ShareFileCreateWithoutShareholdersInput, ShareFileUncheckedCreateWithoutShareholdersInput>
    connectOrCreate?: ShareFileCreateOrConnectWithoutShareholdersInput
    upsert?: ShareFileUpsertWithoutShareholdersInput
    disconnect?: ShareFileWhereInput | boolean
    delete?: ShareFileWhereInput | boolean
    connect?: ShareFileWhereUniqueInput
    update?: XOR<XOR<ShareFileUpdateToOneWithWhereWithoutShareholdersInput, ShareFileUpdateWithoutShareholdersInput>, ShareFileUncheckedUpdateWithoutShareholdersInput>
  }

  export type ShareUpdateOneWithoutShareholdersNestedInput = {
    create?: XOR<ShareCreateWithoutShareholdersInput, ShareUncheckedCreateWithoutShareholdersInput>
    connectOrCreate?: ShareCreateOrConnectWithoutShareholdersInput
    upsert?: ShareUpsertWithoutShareholdersInput
    disconnect?: ShareWhereInput | boolean
    delete?: ShareWhereInput | boolean
    connect?: ShareWhereUniqueInput
    update?: XOR<XOR<ShareUpdateToOneWithWhereWithoutShareholdersInput, ShareUpdateWithoutShareholdersInput>, ShareUncheckedUpdateWithoutShareholdersInput>
  }

  export type UserUpdateOneWithoutCreatedShareholdersNestedInput = {
    create?: XOR<UserCreateWithoutCreatedShareholdersInput, UserUncheckedCreateWithoutCreatedShareholdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedShareholdersInput
    upsert?: UserUpsertWithoutCreatedShareholdersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedShareholdersInput, UserUpdateWithoutCreatedShareholdersInput>, UserUncheckedUpdateWithoutCreatedShareholdersInput>
  }

  export type UserUpdateOneWithoutUpdatedShareholdersNestedInput = {
    create?: XOR<UserCreateWithoutUpdatedShareholdersInput, UserUncheckedCreateWithoutUpdatedShareholdersInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdatedShareholdersInput
    upsert?: UserUpsertWithoutUpdatedShareholdersInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdatedShareholdersInput, UserUpdateWithoutUpdatedShareholdersInput>, UserUncheckedUpdateWithoutUpdatedShareholdersInput>
  }

  export type ShareholderLogUpdateManyWithoutShareholderNestedInput = {
    create?: XOR<ShareholderLogCreateWithoutShareholderInput, ShareholderLogUncheckedCreateWithoutShareholderInput> | ShareholderLogCreateWithoutShareholderInput[] | ShareholderLogUncheckedCreateWithoutShareholderInput[]
    connectOrCreate?: ShareholderLogCreateOrConnectWithoutShareholderInput | ShareholderLogCreateOrConnectWithoutShareholderInput[]
    upsert?: ShareholderLogUpsertWithWhereUniqueWithoutShareholderInput | ShareholderLogUpsertWithWhereUniqueWithoutShareholderInput[]
    createMany?: ShareholderLogCreateManyShareholderInputEnvelope
    set?: ShareholderLogWhereUniqueInput | ShareholderLogWhereUniqueInput[]
    disconnect?: ShareholderLogWhereUniqueInput | ShareholderLogWhereUniqueInput[]
    delete?: ShareholderLogWhereUniqueInput | ShareholderLogWhereUniqueInput[]
    connect?: ShareholderLogWhereUniqueInput | ShareholderLogWhereUniqueInput[]
    update?: ShareholderLogUpdateWithWhereUniqueWithoutShareholderInput | ShareholderLogUpdateWithWhereUniqueWithoutShareholderInput[]
    updateMany?: ShareholderLogUpdateManyWithWhereWithoutShareholderInput | ShareholderLogUpdateManyWithWhereWithoutShareholderInput[]
    deleteMany?: ShareholderLogScalarWhereInput | ShareholderLogScalarWhereInput[]
  }

  export type ShareTransactionUpdateManyWithoutShareholderNestedInput = {
    create?: XOR<ShareTransactionCreateWithoutShareholderInput, ShareTransactionUncheckedCreateWithoutShareholderInput> | ShareTransactionCreateWithoutShareholderInput[] | ShareTransactionUncheckedCreateWithoutShareholderInput[]
    connectOrCreate?: ShareTransactionCreateOrConnectWithoutShareholderInput | ShareTransactionCreateOrConnectWithoutShareholderInput[]
    upsert?: ShareTransactionUpsertWithWhereUniqueWithoutShareholderInput | ShareTransactionUpsertWithWhereUniqueWithoutShareholderInput[]
    createMany?: ShareTransactionCreateManyShareholderInputEnvelope
    set?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    disconnect?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    delete?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    connect?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    update?: ShareTransactionUpdateWithWhereUniqueWithoutShareholderInput | ShareTransactionUpdateWithWhereUniqueWithoutShareholderInput[]
    updateMany?: ShareTransactionUpdateManyWithWhereWithoutShareholderInput | ShareTransactionUpdateManyWithWhereWithoutShareholderInput[]
    deleteMany?: ShareTransactionScalarWhereInput | ShareTransactionScalarWhereInput[]
  }

  export type ShareholdingUpdateManyWithoutShareholderNestedInput = {
    create?: XOR<ShareholdingCreateWithoutShareholderInput, ShareholdingUncheckedCreateWithoutShareholderInput> | ShareholdingCreateWithoutShareholderInput[] | ShareholdingUncheckedCreateWithoutShareholderInput[]
    connectOrCreate?: ShareholdingCreateOrConnectWithoutShareholderInput | ShareholdingCreateOrConnectWithoutShareholderInput[]
    upsert?: ShareholdingUpsertWithWhereUniqueWithoutShareholderInput | ShareholdingUpsertWithWhereUniqueWithoutShareholderInput[]
    createMany?: ShareholdingCreateManyShareholderInputEnvelope
    set?: ShareholdingWhereUniqueInput | ShareholdingWhereUniqueInput[]
    disconnect?: ShareholdingWhereUniqueInput | ShareholdingWhereUniqueInput[]
    delete?: ShareholdingWhereUniqueInput | ShareholdingWhereUniqueInput[]
    connect?: ShareholdingWhereUniqueInput | ShareholdingWhereUniqueInput[]
    update?: ShareholdingUpdateWithWhereUniqueWithoutShareholderInput | ShareholdingUpdateWithWhereUniqueWithoutShareholderInput[]
    updateMany?: ShareholdingUpdateManyWithWhereWithoutShareholderInput | ShareholdingUpdateManyWithWhereWithoutShareholderInput[]
    deleteMany?: ShareholdingScalarWhereInput | ShareholdingScalarWhereInput[]
  }

  export type ShareTransferUpdateManyWithoutFromShareholderNestedInput = {
    create?: XOR<ShareTransferCreateWithoutFromShareholderInput, ShareTransferUncheckedCreateWithoutFromShareholderInput> | ShareTransferCreateWithoutFromShareholderInput[] | ShareTransferUncheckedCreateWithoutFromShareholderInput[]
    connectOrCreate?: ShareTransferCreateOrConnectWithoutFromShareholderInput | ShareTransferCreateOrConnectWithoutFromShareholderInput[]
    upsert?: ShareTransferUpsertWithWhereUniqueWithoutFromShareholderInput | ShareTransferUpsertWithWhereUniqueWithoutFromShareholderInput[]
    createMany?: ShareTransferCreateManyFromShareholderInputEnvelope
    set?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    disconnect?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    delete?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    connect?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    update?: ShareTransferUpdateWithWhereUniqueWithoutFromShareholderInput | ShareTransferUpdateWithWhereUniqueWithoutFromShareholderInput[]
    updateMany?: ShareTransferUpdateManyWithWhereWithoutFromShareholderInput | ShareTransferUpdateManyWithWhereWithoutFromShareholderInput[]
    deleteMany?: ShareTransferScalarWhereInput | ShareTransferScalarWhereInput[]
  }

  export type ShareTransferUpdateManyWithoutToShareholderNestedInput = {
    create?: XOR<ShareTransferCreateWithoutToShareholderInput, ShareTransferUncheckedCreateWithoutToShareholderInput> | ShareTransferCreateWithoutToShareholderInput[] | ShareTransferUncheckedCreateWithoutToShareholderInput[]
    connectOrCreate?: ShareTransferCreateOrConnectWithoutToShareholderInput | ShareTransferCreateOrConnectWithoutToShareholderInput[]
    upsert?: ShareTransferUpsertWithWhereUniqueWithoutToShareholderInput | ShareTransferUpsertWithWhereUniqueWithoutToShareholderInput[]
    createMany?: ShareTransferCreateManyToShareholderInputEnvelope
    set?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    disconnect?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    delete?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    connect?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    update?: ShareTransferUpdateWithWhereUniqueWithoutToShareholderInput | ShareTransferUpdateWithWhereUniqueWithoutToShareholderInput[]
    updateMany?: ShareTransferUpdateManyWithWhereWithoutToShareholderInput | ShareTransferUpdateManyWithWhereWithoutToShareholderInput[]
    deleteMany?: ShareTransferScalarWhereInput | ShareTransferScalarWhereInput[]
  }

  export type NullableBigIntFieldUpdateOperationsInput = {
    set?: bigint | number | null
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type ShareholderLogUncheckedUpdateManyWithoutShareholderNestedInput = {
    create?: XOR<ShareholderLogCreateWithoutShareholderInput, ShareholderLogUncheckedCreateWithoutShareholderInput> | ShareholderLogCreateWithoutShareholderInput[] | ShareholderLogUncheckedCreateWithoutShareholderInput[]
    connectOrCreate?: ShareholderLogCreateOrConnectWithoutShareholderInput | ShareholderLogCreateOrConnectWithoutShareholderInput[]
    upsert?: ShareholderLogUpsertWithWhereUniqueWithoutShareholderInput | ShareholderLogUpsertWithWhereUniqueWithoutShareholderInput[]
    createMany?: ShareholderLogCreateManyShareholderInputEnvelope
    set?: ShareholderLogWhereUniqueInput | ShareholderLogWhereUniqueInput[]
    disconnect?: ShareholderLogWhereUniqueInput | ShareholderLogWhereUniqueInput[]
    delete?: ShareholderLogWhereUniqueInput | ShareholderLogWhereUniqueInput[]
    connect?: ShareholderLogWhereUniqueInput | ShareholderLogWhereUniqueInput[]
    update?: ShareholderLogUpdateWithWhereUniqueWithoutShareholderInput | ShareholderLogUpdateWithWhereUniqueWithoutShareholderInput[]
    updateMany?: ShareholderLogUpdateManyWithWhereWithoutShareholderInput | ShareholderLogUpdateManyWithWhereWithoutShareholderInput[]
    deleteMany?: ShareholderLogScalarWhereInput | ShareholderLogScalarWhereInput[]
  }

  export type ShareTransactionUncheckedUpdateManyWithoutShareholderNestedInput = {
    create?: XOR<ShareTransactionCreateWithoutShareholderInput, ShareTransactionUncheckedCreateWithoutShareholderInput> | ShareTransactionCreateWithoutShareholderInput[] | ShareTransactionUncheckedCreateWithoutShareholderInput[]
    connectOrCreate?: ShareTransactionCreateOrConnectWithoutShareholderInput | ShareTransactionCreateOrConnectWithoutShareholderInput[]
    upsert?: ShareTransactionUpsertWithWhereUniqueWithoutShareholderInput | ShareTransactionUpsertWithWhereUniqueWithoutShareholderInput[]
    createMany?: ShareTransactionCreateManyShareholderInputEnvelope
    set?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    disconnect?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    delete?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    connect?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    update?: ShareTransactionUpdateWithWhereUniqueWithoutShareholderInput | ShareTransactionUpdateWithWhereUniqueWithoutShareholderInput[]
    updateMany?: ShareTransactionUpdateManyWithWhereWithoutShareholderInput | ShareTransactionUpdateManyWithWhereWithoutShareholderInput[]
    deleteMany?: ShareTransactionScalarWhereInput | ShareTransactionScalarWhereInput[]
  }

  export type ShareholdingUncheckedUpdateManyWithoutShareholderNestedInput = {
    create?: XOR<ShareholdingCreateWithoutShareholderInput, ShareholdingUncheckedCreateWithoutShareholderInput> | ShareholdingCreateWithoutShareholderInput[] | ShareholdingUncheckedCreateWithoutShareholderInput[]
    connectOrCreate?: ShareholdingCreateOrConnectWithoutShareholderInput | ShareholdingCreateOrConnectWithoutShareholderInput[]
    upsert?: ShareholdingUpsertWithWhereUniqueWithoutShareholderInput | ShareholdingUpsertWithWhereUniqueWithoutShareholderInput[]
    createMany?: ShareholdingCreateManyShareholderInputEnvelope
    set?: ShareholdingWhereUniqueInput | ShareholdingWhereUniqueInput[]
    disconnect?: ShareholdingWhereUniqueInput | ShareholdingWhereUniqueInput[]
    delete?: ShareholdingWhereUniqueInput | ShareholdingWhereUniqueInput[]
    connect?: ShareholdingWhereUniqueInput | ShareholdingWhereUniqueInput[]
    update?: ShareholdingUpdateWithWhereUniqueWithoutShareholderInput | ShareholdingUpdateWithWhereUniqueWithoutShareholderInput[]
    updateMany?: ShareholdingUpdateManyWithWhereWithoutShareholderInput | ShareholdingUpdateManyWithWhereWithoutShareholderInput[]
    deleteMany?: ShareholdingScalarWhereInput | ShareholdingScalarWhereInput[]
  }

  export type ShareTransferUncheckedUpdateManyWithoutFromShareholderNestedInput = {
    create?: XOR<ShareTransferCreateWithoutFromShareholderInput, ShareTransferUncheckedCreateWithoutFromShareholderInput> | ShareTransferCreateWithoutFromShareholderInput[] | ShareTransferUncheckedCreateWithoutFromShareholderInput[]
    connectOrCreate?: ShareTransferCreateOrConnectWithoutFromShareholderInput | ShareTransferCreateOrConnectWithoutFromShareholderInput[]
    upsert?: ShareTransferUpsertWithWhereUniqueWithoutFromShareholderInput | ShareTransferUpsertWithWhereUniqueWithoutFromShareholderInput[]
    createMany?: ShareTransferCreateManyFromShareholderInputEnvelope
    set?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    disconnect?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    delete?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    connect?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    update?: ShareTransferUpdateWithWhereUniqueWithoutFromShareholderInput | ShareTransferUpdateWithWhereUniqueWithoutFromShareholderInput[]
    updateMany?: ShareTransferUpdateManyWithWhereWithoutFromShareholderInput | ShareTransferUpdateManyWithWhereWithoutFromShareholderInput[]
    deleteMany?: ShareTransferScalarWhereInput | ShareTransferScalarWhereInput[]
  }

  export type ShareTransferUncheckedUpdateManyWithoutToShareholderNestedInput = {
    create?: XOR<ShareTransferCreateWithoutToShareholderInput, ShareTransferUncheckedCreateWithoutToShareholderInput> | ShareTransferCreateWithoutToShareholderInput[] | ShareTransferUncheckedCreateWithoutToShareholderInput[]
    connectOrCreate?: ShareTransferCreateOrConnectWithoutToShareholderInput | ShareTransferCreateOrConnectWithoutToShareholderInput[]
    upsert?: ShareTransferUpsertWithWhereUniqueWithoutToShareholderInput | ShareTransferUpsertWithWhereUniqueWithoutToShareholderInput[]
    createMany?: ShareTransferCreateManyToShareholderInputEnvelope
    set?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    disconnect?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    delete?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    connect?: ShareTransferWhereUniqueInput | ShareTransferWhereUniqueInput[]
    update?: ShareTransferUpdateWithWhereUniqueWithoutToShareholderInput | ShareTransferUpdateWithWhereUniqueWithoutToShareholderInput[]
    updateMany?: ShareTransferUpdateManyWithWhereWithoutToShareholderInput | ShareTransferUpdateManyWithWhereWithoutToShareholderInput[]
    deleteMany?: ShareTransferScalarWhereInput | ShareTransferScalarWhereInput[]
  }

  export type ShareholderCreateNestedOneWithoutShareholderLogsInput = {
    create?: XOR<ShareholderCreateWithoutShareholderLogsInput, ShareholderUncheckedCreateWithoutShareholderLogsInput>
    connectOrCreate?: ShareholderCreateOrConnectWithoutShareholderLogsInput
    connect?: ShareholderWhereUniqueInput
  }

  export type ShareholderUpdateOneRequiredWithoutShareholderLogsNestedInput = {
    create?: XOR<ShareholderCreateWithoutShareholderLogsInput, ShareholderUncheckedCreateWithoutShareholderLogsInput>
    connectOrCreate?: ShareholderCreateOrConnectWithoutShareholderLogsInput
    upsert?: ShareholderUpsertWithoutShareholderLogsInput
    connect?: ShareholderWhereUniqueInput
    update?: XOR<XOR<ShareholderUpdateToOneWithWhereWithoutShareholderLogsInput, ShareholderUpdateWithoutShareholderLogsInput>, ShareholderUncheckedUpdateWithoutShareholderLogsInput>
  }

  export type ShareholderCreateNestedManyWithoutShareInput = {
    create?: XOR<ShareholderCreateWithoutShareInput, ShareholderUncheckedCreateWithoutShareInput> | ShareholderCreateWithoutShareInput[] | ShareholderUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutShareInput | ShareholderCreateOrConnectWithoutShareInput[]
    createMany?: ShareholderCreateManyShareInputEnvelope
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
  }

  export type ShareholderUncheckedCreateNestedManyWithoutShareInput = {
    create?: XOR<ShareholderCreateWithoutShareInput, ShareholderUncheckedCreateWithoutShareInput> | ShareholderCreateWithoutShareInput[] | ShareholderUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutShareInput | ShareholderCreateOrConnectWithoutShareInput[]
    createMany?: ShareholderCreateManyShareInputEnvelope
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
  }

  export type ShareholderUpdateManyWithoutShareNestedInput = {
    create?: XOR<ShareholderCreateWithoutShareInput, ShareholderUncheckedCreateWithoutShareInput> | ShareholderCreateWithoutShareInput[] | ShareholderUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutShareInput | ShareholderCreateOrConnectWithoutShareInput[]
    upsert?: ShareholderUpsertWithWhereUniqueWithoutShareInput | ShareholderUpsertWithWhereUniqueWithoutShareInput[]
    createMany?: ShareholderCreateManyShareInputEnvelope
    set?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    disconnect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    delete?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    update?: ShareholderUpdateWithWhereUniqueWithoutShareInput | ShareholderUpdateWithWhereUniqueWithoutShareInput[]
    updateMany?: ShareholderUpdateManyWithWhereWithoutShareInput | ShareholderUpdateManyWithWhereWithoutShareInput[]
    deleteMany?: ShareholderScalarWhereInput | ShareholderScalarWhereInput[]
  }

  export type ShareholderUncheckedUpdateManyWithoutShareNestedInput = {
    create?: XOR<ShareholderCreateWithoutShareInput, ShareholderUncheckedCreateWithoutShareInput> | ShareholderCreateWithoutShareInput[] | ShareholderUncheckedCreateWithoutShareInput[]
    connectOrCreate?: ShareholderCreateOrConnectWithoutShareInput | ShareholderCreateOrConnectWithoutShareInput[]
    upsert?: ShareholderUpsertWithWhereUniqueWithoutShareInput | ShareholderUpsertWithWhereUniqueWithoutShareInput[]
    createMany?: ShareholderCreateManyShareInputEnvelope
    set?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    disconnect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    delete?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    connect?: ShareholderWhereUniqueInput | ShareholderWhereUniqueInput[]
    update?: ShareholderUpdateWithWhereUniqueWithoutShareInput | ShareholderUpdateWithWhereUniqueWithoutShareInput[]
    updateMany?: ShareholderUpdateManyWithWhereWithoutShareInput | ShareholderUpdateManyWithWhereWithoutShareInput[]
    deleteMany?: ShareholderScalarWhereInput | ShareholderScalarWhereInput[]
  }

  export type ShareholderCreateNestedOneWithoutShareTransactionsInput = {
    create?: XOR<ShareholderCreateWithoutShareTransactionsInput, ShareholderUncheckedCreateWithoutShareTransactionsInput>
    connectOrCreate?: ShareholderCreateOrConnectWithoutShareTransactionsInput
    connect?: ShareholderWhereUniqueInput
  }

  export type ShareholdingCreateNestedOneWithoutShareTransactionInput = {
    create?: XOR<ShareholdingCreateWithoutShareTransactionInput, ShareholdingUncheckedCreateWithoutShareTransactionInput>
    connectOrCreate?: ShareholdingCreateOrConnectWithoutShareTransactionInput
    connect?: ShareholdingWhereUniqueInput
  }

  export type ShareholderUpdateOneRequiredWithoutShareTransactionsNestedInput = {
    create?: XOR<ShareholderCreateWithoutShareTransactionsInput, ShareholderUncheckedCreateWithoutShareTransactionsInput>
    connectOrCreate?: ShareholderCreateOrConnectWithoutShareTransactionsInput
    upsert?: ShareholderUpsertWithoutShareTransactionsInput
    connect?: ShareholderWhereUniqueInput
    update?: XOR<XOR<ShareholderUpdateToOneWithWhereWithoutShareTransactionsInput, ShareholderUpdateWithoutShareTransactionsInput>, ShareholderUncheckedUpdateWithoutShareTransactionsInput>
  }

  export type ShareholdingUpdateOneRequiredWithoutShareTransactionNestedInput = {
    create?: XOR<ShareholdingCreateWithoutShareTransactionInput, ShareholdingUncheckedCreateWithoutShareTransactionInput>
    connectOrCreate?: ShareholdingCreateOrConnectWithoutShareTransactionInput
    upsert?: ShareholdingUpsertWithoutShareTransactionInput
    connect?: ShareholdingWhereUniqueInput
    update?: XOR<XOR<ShareholdingUpdateToOneWithWhereWithoutShareTransactionInput, ShareholdingUpdateWithoutShareTransactionInput>, ShareholdingUncheckedUpdateWithoutShareTransactionInput>
  }

  export type ShareholderCreateNestedOneWithoutShareholdingInput = {
    create?: XOR<ShareholderCreateWithoutShareholdingInput, ShareholderUncheckedCreateWithoutShareholdingInput>
    connectOrCreate?: ShareholderCreateOrConnectWithoutShareholdingInput
    connect?: ShareholderWhereUniqueInput
  }

  export type ShareTransactionCreateNestedManyWithoutShareholdingInput = {
    create?: XOR<ShareTransactionCreateWithoutShareholdingInput, ShareTransactionUncheckedCreateWithoutShareholdingInput> | ShareTransactionCreateWithoutShareholdingInput[] | ShareTransactionUncheckedCreateWithoutShareholdingInput[]
    connectOrCreate?: ShareTransactionCreateOrConnectWithoutShareholdingInput | ShareTransactionCreateOrConnectWithoutShareholdingInput[]
    createMany?: ShareTransactionCreateManyShareholdingInputEnvelope
    connect?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
  }

  export type ShareTransactionUncheckedCreateNestedManyWithoutShareholdingInput = {
    create?: XOR<ShareTransactionCreateWithoutShareholdingInput, ShareTransactionUncheckedCreateWithoutShareholdingInput> | ShareTransactionCreateWithoutShareholdingInput[] | ShareTransactionUncheckedCreateWithoutShareholdingInput[]
    connectOrCreate?: ShareTransactionCreateOrConnectWithoutShareholdingInput | ShareTransactionCreateOrConnectWithoutShareholdingInput[]
    createMany?: ShareTransactionCreateManyShareholdingInputEnvelope
    connect?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
  }

  export type ShareholderUpdateOneRequiredWithoutShareholdingNestedInput = {
    create?: XOR<ShareholderCreateWithoutShareholdingInput, ShareholderUncheckedCreateWithoutShareholdingInput>
    connectOrCreate?: ShareholderCreateOrConnectWithoutShareholdingInput
    upsert?: ShareholderUpsertWithoutShareholdingInput
    connect?: ShareholderWhereUniqueInput
    update?: XOR<XOR<ShareholderUpdateToOneWithWhereWithoutShareholdingInput, ShareholderUpdateWithoutShareholdingInput>, ShareholderUncheckedUpdateWithoutShareholdingInput>
  }

  export type ShareTransactionUpdateManyWithoutShareholdingNestedInput = {
    create?: XOR<ShareTransactionCreateWithoutShareholdingInput, ShareTransactionUncheckedCreateWithoutShareholdingInput> | ShareTransactionCreateWithoutShareholdingInput[] | ShareTransactionUncheckedCreateWithoutShareholdingInput[]
    connectOrCreate?: ShareTransactionCreateOrConnectWithoutShareholdingInput | ShareTransactionCreateOrConnectWithoutShareholdingInput[]
    upsert?: ShareTransactionUpsertWithWhereUniqueWithoutShareholdingInput | ShareTransactionUpsertWithWhereUniqueWithoutShareholdingInput[]
    createMany?: ShareTransactionCreateManyShareholdingInputEnvelope
    set?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    disconnect?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    delete?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    connect?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    update?: ShareTransactionUpdateWithWhereUniqueWithoutShareholdingInput | ShareTransactionUpdateWithWhereUniqueWithoutShareholdingInput[]
    updateMany?: ShareTransactionUpdateManyWithWhereWithoutShareholdingInput | ShareTransactionUpdateManyWithWhereWithoutShareholdingInput[]
    deleteMany?: ShareTransactionScalarWhereInput | ShareTransactionScalarWhereInput[]
  }

  export type ShareTransactionUncheckedUpdateManyWithoutShareholdingNestedInput = {
    create?: XOR<ShareTransactionCreateWithoutShareholdingInput, ShareTransactionUncheckedCreateWithoutShareholdingInput> | ShareTransactionCreateWithoutShareholdingInput[] | ShareTransactionUncheckedCreateWithoutShareholdingInput[]
    connectOrCreate?: ShareTransactionCreateOrConnectWithoutShareholdingInput | ShareTransactionCreateOrConnectWithoutShareholdingInput[]
    upsert?: ShareTransactionUpsertWithWhereUniqueWithoutShareholdingInput | ShareTransactionUpsertWithWhereUniqueWithoutShareholdingInput[]
    createMany?: ShareTransactionCreateManyShareholdingInputEnvelope
    set?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    disconnect?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    delete?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    connect?: ShareTransactionWhereUniqueInput | ShareTransactionWhereUniqueInput[]
    update?: ShareTransactionUpdateWithWhereUniqueWithoutShareholdingInput | ShareTransactionUpdateWithWhereUniqueWithoutShareholdingInput[]
    updateMany?: ShareTransactionUpdateManyWithWhereWithoutShareholdingInput | ShareTransactionUpdateManyWithWhereWithoutShareholdingInput[]
    deleteMany?: ShareTransactionScalarWhereInput | ShareTransactionScalarWhereInput[]
  }

  export type ShareholderCreateNestedOneWithoutFromshareTransferInput = {
    create?: XOR<ShareholderCreateWithoutFromshareTransferInput, ShareholderUncheckedCreateWithoutFromshareTransferInput>
    connectOrCreate?: ShareholderCreateOrConnectWithoutFromshareTransferInput
    connect?: ShareholderWhereUniqueInput
  }

  export type ShareholderCreateNestedOneWithoutTohareTransferInput = {
    create?: XOR<ShareholderCreateWithoutTohareTransferInput, ShareholderUncheckedCreateWithoutTohareTransferInput>
    connectOrCreate?: ShareholderCreateOrConnectWithoutTohareTransferInput
    connect?: ShareholderWhereUniqueInput
  }

  export type ShareholderUpdateOneRequiredWithoutFromshareTransferNestedInput = {
    create?: XOR<ShareholderCreateWithoutFromshareTransferInput, ShareholderUncheckedCreateWithoutFromshareTransferInput>
    connectOrCreate?: ShareholderCreateOrConnectWithoutFromshareTransferInput
    upsert?: ShareholderUpsertWithoutFromshareTransferInput
    connect?: ShareholderWhereUniqueInput
    update?: XOR<XOR<ShareholderUpdateToOneWithWhereWithoutFromshareTransferInput, ShareholderUpdateWithoutFromshareTransferInput>, ShareholderUncheckedUpdateWithoutFromshareTransferInput>
  }

  export type ShareholderUpdateOneRequiredWithoutTohareTransferNestedInput = {
    create?: XOR<ShareholderCreateWithoutTohareTransferInput, ShareholderUncheckedCreateWithoutTohareTransferInput>
    connectOrCreate?: ShareholderCreateOrConnectWithoutTohareTransferInput
    upsert?: ShareholderUpsertWithoutTohareTransferInput
    connect?: ShareholderWhereUniqueInput
    update?: XOR<XOR<ShareholderUpdateToOneWithWhereWithoutTohareTransferInput, ShareholderUpdateWithoutTohareTransferInput>, ShareholderUncheckedUpdateWithoutTohareTransferInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[]
    notIn?: bigint[] | number[]
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedBigIntNullableFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableFilter<$PrismaModel> | bigint | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBigIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel> | null
    in?: bigint[] | number[] | null
    notIn?: bigint[] | number[] | null
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntNullableWithAggregatesFilter<$PrismaModel> | bigint | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedBigIntNullableFilter<$PrismaModel>
    _min?: NestedBigIntNullableFilter<$PrismaModel>
    _max?: NestedBigIntNullableFilter<$PrismaModel>
  }

  export type UserCreateWithoutCreatedUsersInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedUsersInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserCreateNestedManyWithoutUpdatedByInput
    updatedRoles?: RoleCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedUsersInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedRoles?: RoleUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderUncheckedCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedUsersInput, UserUncheckedCreateWithoutCreatedUsersInput>
  }

  export type UserCreateWithoutUpdatedUsersInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedUsersInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedUsersInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderUncheckedCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedUsersInput, UserUncheckedCreateWithoutUpdatedUsersInput>
  }

  export type UserRoleCreateWithoutUserInput = {
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserRoleUncheckedCreateWithoutUserInput = {
    roleId: string
  }

  export type UserRoleCreateOrConnectWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleCreateManyUserInputEnvelope = {
    data: UserRoleCreateManyUserInput | UserRoleCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutSenderInput = {
    id?: string
    netContent: string
    content: string
    messageType: string
    createdBy?: number | null
    checkedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
    receiver: UserCreateNestedOneWithoutMessagesReceivedInput
  }

  export type MessageUncheckedCreateWithoutSenderInput = {
    id?: string
    receiverId: string
    netContent: string
    content: string
    messageType: string
    createdBy?: number | null
    checkedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
  }

  export type MessageCreateOrConnectWithoutSenderInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageCreateManySenderInputEnvelope = {
    data: MessageCreateManySenderInput | MessageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type MessageCreateWithoutReceiverInput = {
    id?: string
    netContent: string
    content: string
    messageType: string
    createdBy?: number | null
    checkedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
    sender: UserCreateNestedOneWithoutMessagesSentInput
  }

  export type MessageUncheckedCreateWithoutReceiverInput = {
    id?: string
    senderId: string
    netContent: string
    content: string
    messageType: string
    createdBy?: number | null
    checkedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
  }

  export type MessageCreateOrConnectWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    create: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput>
  }

  export type MessageCreateManyReceiverInputEnvelope = {
    data: MessageCreateManyReceiverInput | MessageCreateManyReceiverInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutUpdatedByInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserUncheckedCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderUncheckedCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedByInput, UserUncheckedCreateWithoutUpdatedByInput>
  }

  export type UserCreateManyUpdatedByInputEnvelope = {
    data: UserCreateManyUpdatedByInput | UserCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedByInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: UserCreateNestedOneWithoutUpdatedUsersInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedByInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserUncheckedCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderUncheckedCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput>
  }

  export type UserCreateManyCreatedByInputEnvelope = {
    data: UserCreateManyCreatedByInput | UserCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type RoleCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedRolesInput
    users?: UserRoleCreateNestedManyWithoutRoleInput
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutUpdatedByInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUpdatedByInput, RoleUncheckedCreateWithoutUpdatedByInput>
  }

  export type RoleCreateManyUpdatedByInputEnvelope = {
    data: RoleCreateManyUpdatedByInput | RoleCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type RoleCreateWithoutCreatedByInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: UserCreateNestedOneWithoutUpdatedRolesInput
    users?: UserRoleCreateNestedManyWithoutRoleInput
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    users?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutCreatedByInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutCreatedByInput, RoleUncheckedCreateWithoutCreatedByInput>
  }

  export type RoleCreateManyCreatedByInputEnvelope = {
    data: RoleCreateManyCreatedByInput | RoleCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PermissionCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedPermissionsInput
    roles?: RolePermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    roles?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionCreateOrConnectWithoutUpdatedByInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutUpdatedByInput, PermissionUncheckedCreateWithoutUpdatedByInput>
  }

  export type PermissionCreateManyUpdatedByInputEnvelope = {
    data: PermissionCreateManyUpdatedByInput | PermissionCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type PermissionCreateWithoutCreatedByInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: UserCreateNestedOneWithoutUpdatedPermissionsInput
    roles?: RolePermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
    roles?: RolePermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionCreateOrConnectWithoutCreatedByInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutCreatedByInput, PermissionUncheckedCreateWithoutCreatedByInput>
  }

  export type PermissionCreateManyCreatedByInputEnvelope = {
    data: PermissionCreateManyCreatedByInput | PermissionCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ShareholderCreateWithoutUpdatedByInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutShareholdersInput
    shareFile?: ShareFileCreateNestedOneWithoutShareholdersInput
    share?: ShareCreateNestedOneWithoutShareholdersInput
    createdBy?: UserCreateNestedOneWithoutCreatedShareholdersInput
    shareholderLogs?: ShareholderLogCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    shareholderLogs?: ShareholderLogUncheckedCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionUncheckedCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingUncheckedCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderCreateOrConnectWithoutUpdatedByInput = {
    where: ShareholderWhereUniqueInput
    create: XOR<ShareholderCreateWithoutUpdatedByInput, ShareholderUncheckedCreateWithoutUpdatedByInput>
  }

  export type ShareholderCreateManyUpdatedByInputEnvelope = {
    data: ShareholderCreateManyUpdatedByInput | ShareholderCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ShareholderCreateWithoutCreatedByInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutShareholdersInput
    shareFile?: ShareFileCreateNestedOneWithoutShareholdersInput
    share?: ShareCreateNestedOneWithoutShareholdersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedShareholdersInput
    shareholderLogs?: ShareholderLogCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderUncheckedCreateWithoutCreatedByInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
    shareholderLogs?: ShareholderLogUncheckedCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionUncheckedCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingUncheckedCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderCreateOrConnectWithoutCreatedByInput = {
    where: ShareholderWhereUniqueInput
    create: XOR<ShareholderCreateWithoutCreatedByInput, ShareholderUncheckedCreateWithoutCreatedByInput>
  }

  export type ShareholderCreateManyCreatedByInputEnvelope = {
    data: ShareholderCreateManyCreatedByInput | ShareholderCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedUsersInput = {
    update: XOR<UserUpdateWithoutCreatedUsersInput, UserUncheckedUpdateWithoutCreatedUsersInput>
    create: XOR<UserCreateWithoutCreatedUsersInput, UserUncheckedCreateWithoutCreatedUsersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedUsersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedUsersInput, UserUncheckedUpdateWithoutCreatedUsersInput>
  }

  export type UserUpdateWithoutCreatedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedUsersNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUpdateManyWithoutUpdatedByNestedInput
    updatedRoles?: RoleUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedRoles?: RoleUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedUsersInput = {
    update: XOR<UserUpdateWithoutUpdatedUsersInput, UserUncheckedUpdateWithoutUpdatedUsersInput>
    create: XOR<UserCreateWithoutUpdatedUsersInput, UserUncheckedCreateWithoutUpdatedUsersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedUsersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedUsersInput, UserUncheckedUpdateWithoutUpdatedUsersInput>
  }

  export type UserUpdateWithoutUpdatedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedUsersNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserRoleUpsertWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
    create: XOR<UserRoleCreateWithoutUserInput, UserRoleUncheckedCreateWithoutUserInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutUserInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutUserInput, UserRoleUncheckedUpdateWithoutUserInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutUserInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutUserInput>
  }

  export type UserRoleScalarWhereInput = {
    AND?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    OR?: UserRoleScalarWhereInput[]
    NOT?: UserRoleScalarWhereInput | UserRoleScalarWhereInput[]
    userId?: StringFilter<"UserRole"> | string
    roleId?: StringFilter<"UserRole"> | string
  }

  export type MessageUpsertWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
    create: XOR<MessageCreateWithoutSenderInput, MessageUncheckedCreateWithoutSenderInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutSenderInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutSenderInput, MessageUncheckedUpdateWithoutSenderInput>
  }

  export type MessageUpdateManyWithWhereWithoutSenderInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutSenderInput>
  }

  export type MessageScalarWhereInput = {
    AND?: MessageScalarWhereInput | MessageScalarWhereInput[]
    OR?: MessageScalarWhereInput[]
    NOT?: MessageScalarWhereInput | MessageScalarWhereInput[]
    id?: StringFilter<"Message"> | string
    senderId?: StringFilter<"Message"> | string
    receiverId?: StringFilter<"Message"> | string
    netContent?: StringFilter<"Message"> | string
    content?: StringFilter<"Message"> | string
    messageType?: StringFilter<"Message"> | string
    createdBy?: IntNullableFilter<"Message"> | number | null
    checkedBy?: IntNullableFilter<"Message"> | number | null
    createdAt?: DateTimeFilter<"Message"> | Date | string
    updatedAt?: DateTimeFilter<"Message"> | Date | string
    status?: BoolFilter<"Message"> | boolean
  }

  export type MessageUpsertWithWhereUniqueWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    update: XOR<MessageUpdateWithoutReceiverInput, MessageUncheckedUpdateWithoutReceiverInput>
    create: XOR<MessageCreateWithoutReceiverInput, MessageUncheckedCreateWithoutReceiverInput>
  }

  export type MessageUpdateWithWhereUniqueWithoutReceiverInput = {
    where: MessageWhereUniqueInput
    data: XOR<MessageUpdateWithoutReceiverInput, MessageUncheckedUpdateWithoutReceiverInput>
  }

  export type MessageUpdateManyWithWhereWithoutReceiverInput = {
    where: MessageScalarWhereInput
    data: XOR<MessageUpdateManyMutationInput, MessageUncheckedUpdateManyWithoutReceiverInput>
  }

  export type UserUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutUpdatedByInput, UserUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<UserCreateWithoutUpdatedByInput, UserUncheckedCreateWithoutUpdatedByInput>
  }

  export type UserUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutUpdatedByInput, UserUncheckedUpdateWithoutUpdatedByInput>
  }

  export type UserUpdateManyWithWhereWithoutUpdatedByInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    fullName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    username?: StringNullableFilter<"User"> | string | null
    createdById?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedById?: StringFilter<"User"> | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutCreatedByInput, UserUncheckedUpdateWithoutCreatedByInput>
    create: XOR<UserCreateWithoutCreatedByInput, UserUncheckedCreateWithoutCreatedByInput>
  }

  export type UserUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutCreatedByInput, UserUncheckedUpdateWithoutCreatedByInput>
  }

  export type UserUpdateManyWithWhereWithoutCreatedByInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type RoleUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: RoleWhereUniqueInput
    update: XOR<RoleUpdateWithoutUpdatedByInput, RoleUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<RoleCreateWithoutUpdatedByInput, RoleUncheckedCreateWithoutUpdatedByInput>
  }

  export type RoleUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: RoleWhereUniqueInput
    data: XOR<RoleUpdateWithoutUpdatedByInput, RoleUncheckedUpdateWithoutUpdatedByInput>
  }

  export type RoleUpdateManyWithWhereWithoutUpdatedByInput = {
    where: RoleScalarWhereInput
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type RoleScalarWhereInput = {
    AND?: RoleScalarWhereInput | RoleScalarWhereInput[]
    OR?: RoleScalarWhereInput[]
    NOT?: RoleScalarWhereInput | RoleScalarWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    createdById?: StringFilter<"Role"> | string
    createdAt?: DateTimeFilter<"Role"> | Date | string
    updatedById?: StringFilter<"Role"> | string
    updatedAt?: DateTimeFilter<"Role"> | Date | string
  }

  export type RoleUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: RoleWhereUniqueInput
    update: XOR<RoleUpdateWithoutCreatedByInput, RoleUncheckedUpdateWithoutCreatedByInput>
    create: XOR<RoleCreateWithoutCreatedByInput, RoleUncheckedCreateWithoutCreatedByInput>
  }

  export type RoleUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: RoleWhereUniqueInput
    data: XOR<RoleUpdateWithoutCreatedByInput, RoleUncheckedUpdateWithoutCreatedByInput>
  }

  export type RoleUpdateManyWithWhereWithoutCreatedByInput = {
    where: RoleScalarWhereInput
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PermissionUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: PermissionWhereUniqueInput
    update: XOR<PermissionUpdateWithoutUpdatedByInput, PermissionUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<PermissionCreateWithoutUpdatedByInput, PermissionUncheckedCreateWithoutUpdatedByInput>
  }

  export type PermissionUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: PermissionWhereUniqueInput
    data: XOR<PermissionUpdateWithoutUpdatedByInput, PermissionUncheckedUpdateWithoutUpdatedByInput>
  }

  export type PermissionUpdateManyWithWhereWithoutUpdatedByInput = {
    where: PermissionScalarWhereInput
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type PermissionScalarWhereInput = {
    AND?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
    OR?: PermissionScalarWhereInput[]
    NOT?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
    id?: StringFilter<"Permission"> | string
    name?: StringFilter<"Permission"> | string
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    createdById?: StringFilter<"Permission"> | string
    updatedById?: StringFilter<"Permission"> | string
  }

  export type PermissionUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PermissionWhereUniqueInput
    update: XOR<PermissionUpdateWithoutCreatedByInput, PermissionUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PermissionCreateWithoutCreatedByInput, PermissionUncheckedCreateWithoutCreatedByInput>
  }

  export type PermissionUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PermissionWhereUniqueInput
    data: XOR<PermissionUpdateWithoutCreatedByInput, PermissionUncheckedUpdateWithoutCreatedByInput>
  }

  export type PermissionUpdateManyWithWhereWithoutCreatedByInput = {
    where: PermissionScalarWhereInput
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ShareholderUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ShareholderWhereUniqueInput
    update: XOR<ShareholderUpdateWithoutUpdatedByInput, ShareholderUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ShareholderCreateWithoutUpdatedByInput, ShareholderUncheckedCreateWithoutUpdatedByInput>
  }

  export type ShareholderUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ShareholderWhereUniqueInput
    data: XOR<ShareholderUpdateWithoutUpdatedByInput, ShareholderUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ShareholderUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ShareholderScalarWhereInput
    data: XOR<ShareholderUpdateManyMutationInput, ShareholderUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ShareholderScalarWhereInput = {
    AND?: ShareholderScalarWhereInput | ShareholderScalarWhereInput[]
    OR?: ShareholderScalarWhereInput[]
    NOT?: ShareholderScalarWhereInput | ShareholderScalarWhereInput[]
    id?: StringFilter<"Shareholder"> | string
    ShareholderID?: StringFilter<"Shareholder"> | string
    engName?: StringFilter<"Shareholder"> | string
    amhName?: StringFilter<"Shareholder"> | string
    Sex?: StringFilter<"Shareholder"> | string
    ForeignID?: StringFilter<"Shareholder"> | string
    PassportNumber?: StringFilter<"Shareholder"> | string
    dateOfNationalityChange?: StringFilter<"Shareholder"> | string
    NationalID?: StringNullableFilter<"Shareholder"> | string | null
    email?: StringFilter<"Shareholder"> | string
    Nationality?: StringNullableFilter<"Shareholder"> | string | null
    addressId?: BigIntFilter<"Shareholder"> | bigint | number
    AccountNumber?: StringFilter<"Shareholder"> | string
    TinNumber?: StringFilter<"Shareholder"> | string
    MinorShareholders?: DateTimeNullableFilter<"Shareholder"> | Date | string | null
    MothersName?: StringFilter<"Shareholder"> | string
    Organisation?: StringFilter<"Shareholder"> | string
    NameOfLegalRepresentative?: StringFilter<"Shareholder"> | string
    LegalRepresentativePhone?: StringFilter<"Shareholder"> | string
    fileId?: BigIntNullableFilter<"Shareholder"> | bigint | number | null
    shareId?: StringNullableFilter<"Shareholder"> | string | null
    TelephoneNumber?: StringFilter<"Shareholder"> | string
    status?: StringFilter<"Shareholder"> | string
    shareholderTypeId?: StringFilter<"Shareholder"> | string
    registredAt?: DateTimeNullableFilter<"Shareholder"> | Date | string | null
    mode?: IntNullableFilter<"Shareholder"> | number | null
    createdAt?: DateTimeFilter<"Shareholder"> | Date | string
    updatedAt?: DateTimeFilter<"Shareholder"> | Date | string
    createdById?: StringNullableFilter<"Shareholder"> | string | null
    updatedById?: StringNullableFilter<"Shareholder"> | string | null
  }

  export type ShareholderUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ShareholderWhereUniqueInput
    update: XOR<ShareholderUpdateWithoutCreatedByInput, ShareholderUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ShareholderCreateWithoutCreatedByInput, ShareholderUncheckedCreateWithoutCreatedByInput>
  }

  export type ShareholderUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ShareholderWhereUniqueInput
    data: XOR<ShareholderUpdateWithoutCreatedByInput, ShareholderUncheckedUpdateWithoutCreatedByInput>
  }

  export type ShareholderUpdateManyWithWhereWithoutCreatedByInput = {
    where: ShareholderScalarWhereInput
    data: XOR<ShareholderUpdateManyMutationInput, ShareholderUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type UserCreateWithoutCreatedRolesInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedUsersInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleCreateNestedManyWithoutUpdatedByInput
    updatedPermissions?: PermissionCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedRolesInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserUncheckedCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedPermissions?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderUncheckedCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedRolesInput, UserUncheckedCreateWithoutCreatedRolesInput>
  }

  export type UserCreateWithoutUpdatedRolesInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedUsersInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedRolesInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserUncheckedCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderUncheckedCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedRolesInput, UserUncheckedCreateWithoutUpdatedRolesInput>
  }

  export type UserRoleCreateWithoutRoleInput = {
    user: UserCreateNestedOneWithoutRolesInput
  }

  export type UserRoleUncheckedCreateWithoutRoleInput = {
    userId: string
  }

  export type UserRoleCreateOrConnectWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleCreateManyRoleInputEnvelope = {
    data: UserRoleCreateManyRoleInput | UserRoleCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type RolePermissionCreateWithoutRoleInput = {
    permission: PermissionCreateNestedOneWithoutRolesInput
  }

  export type RolePermissionUncheckedCreateWithoutRoleInput = {
    permissionId: string
  }

  export type RolePermissionCreateOrConnectWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionCreateManyRoleInputEnvelope = {
    data: RolePermissionCreateManyRoleInput | RolePermissionCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedRolesInput = {
    update: XOR<UserUpdateWithoutCreatedRolesInput, UserUncheckedUpdateWithoutCreatedRolesInput>
    create: XOR<UserCreateWithoutCreatedRolesInput, UserUncheckedCreateWithoutCreatedRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedRolesInput, UserUncheckedUpdateWithoutCreatedRolesInput>
  }

  export type UserUpdateWithoutCreatedRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedUsersNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUpdateManyWithoutUpdatedByNestedInput
    updatedPermissions?: PermissionUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedPermissions?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedRolesInput = {
    update: XOR<UserUpdateWithoutUpdatedRolesInput, UserUncheckedUpdateWithoutUpdatedRolesInput>
    create: XOR<UserCreateWithoutUpdatedRolesInput, UserUncheckedCreateWithoutUpdatedRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedRolesInput, UserUncheckedUpdateWithoutUpdatedRolesInput>
  }

  export type UserUpdateWithoutUpdatedRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedUsersNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserRoleUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    update: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
    create: XOR<UserRoleCreateWithoutRoleInput, UserRoleUncheckedCreateWithoutRoleInput>
  }

  export type UserRoleUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserRoleWhereUniqueInput
    data: XOR<UserRoleUpdateWithoutRoleInput, UserRoleUncheckedUpdateWithoutRoleInput>
  }

  export type UserRoleUpdateManyWithWhereWithoutRoleInput = {
    where: UserRoleScalarWhereInput
    data: XOR<UserRoleUpdateManyMutationInput, UserRoleUncheckedUpdateManyWithoutRoleInput>
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
    create: XOR<RolePermissionCreateWithoutRoleInput, RolePermissionUncheckedCreateWithoutRoleInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutRoleInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutRoleInput, RolePermissionUncheckedUpdateWithoutRoleInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutRoleInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutRoleInput>
  }

  export type RolePermissionScalarWhereInput = {
    AND?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    OR?: RolePermissionScalarWhereInput[]
    NOT?: RolePermissionScalarWhereInput | RolePermissionScalarWhereInput[]
    roleId?: StringFilter<"RolePermission"> | string
    permissionId?: StringFilter<"RolePermission"> | string
  }

  export type UserCreateWithoutRolesInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedUsersInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutRolesInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserUncheckedCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderUncheckedCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutRolesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
  }

  export type RoleCreateWithoutUsersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedRolesInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedRolesInput
    permissions?: RolePermissionCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    permissions?: RolePermissionUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type UserUpsertWithoutRolesInput = {
    update: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
    create: XOR<UserCreateWithoutRolesInput, UserUncheckedCreateWithoutRolesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRolesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRolesInput, UserUncheckedUpdateWithoutRolesInput>
  }

  export type UserUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedUsersNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedRolesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedRolesNestedInput
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type UserCreateWithoutCreatedPermissionsInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedUsersInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionCreateNestedManyWithoutUpdatedByInput
    updatedShareholders?: ShareholderCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedPermissionsInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserUncheckedCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    updatedShareholders?: ShareholderUncheckedCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedPermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedPermissionsInput, UserUncheckedCreateWithoutCreatedPermissionsInput>
  }

  export type UserCreateWithoutUpdatedPermissionsInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedUsersInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    createdPermissions?: PermissionCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedPermissionsInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserUncheckedCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    createdPermissions?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderUncheckedCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedPermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedPermissionsInput, UserUncheckedCreateWithoutUpdatedPermissionsInput>
  }

  export type RolePermissionCreateWithoutPermissionInput = {
    role: RoleCreateNestedOneWithoutPermissionsInput
  }

  export type RolePermissionUncheckedCreateWithoutPermissionInput = {
    roleId: string
  }

  export type RolePermissionCreateOrConnectWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionCreateManyPermissionInputEnvelope = {
    data: RolePermissionCreateManyPermissionInput | RolePermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedPermissionsInput = {
    update: XOR<UserUpdateWithoutCreatedPermissionsInput, UserUncheckedUpdateWithoutCreatedPermissionsInput>
    create: XOR<UserCreateWithoutCreatedPermissionsInput, UserUncheckedCreateWithoutCreatedPermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedPermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedPermissionsInput, UserUncheckedUpdateWithoutCreatedPermissionsInput>
  }

  export type UserUpdateWithoutCreatedPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedUsersNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUpdateManyWithoutUpdatedByNestedInput
    updatedShareholders?: ShareholderUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    updatedShareholders?: ShareholderUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedPermissionsInput = {
    update: XOR<UserUpdateWithoutUpdatedPermissionsInput, UserUncheckedUpdateWithoutUpdatedPermissionsInput>
    create: XOR<UserCreateWithoutUpdatedPermissionsInput, UserUncheckedCreateWithoutUpdatedPermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedPermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedPermissionsInput, UserUncheckedUpdateWithoutUpdatedPermissionsInput>
  }

  export type UserUpdateWithoutUpdatedPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedUsersNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    createdPermissions?: PermissionUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPermissions?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type RolePermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    update: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<RolePermissionCreateWithoutPermissionInput, RolePermissionUncheckedCreateWithoutPermissionInput>
  }

  export type RolePermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: RolePermissionWhereUniqueInput
    data: XOR<RolePermissionUpdateWithoutPermissionInput, RolePermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type RolePermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: RolePermissionScalarWhereInput
    data: XOR<RolePermissionUpdateManyMutationInput, RolePermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type RoleCreateWithoutPermissionsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedRolesInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedRolesInput
    users?: UserRoleCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateWithoutPermissionsInput = {
    id?: string
    name: string
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    users?: UserRoleUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleCreateOrConnectWithoutPermissionsInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
  }

  export type PermissionCreateWithoutRolesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedPermissionsInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedPermissionsInput
  }

  export type PermissionUncheckedCreateWithoutRolesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
    updatedById: string
  }

  export type PermissionCreateOrConnectWithoutRolesInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
  }

  export type RoleUpsertWithoutPermissionsInput = {
    update: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
    create: XOR<RoleCreateWithoutPermissionsInput, RoleUncheckedCreateWithoutPermissionsInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutPermissionsInput, RoleUncheckedUpdateWithoutPermissionsInput>
  }

  export type RoleUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedRolesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedRolesNestedInput
    users?: UserRoleUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type PermissionUpsertWithoutRolesInput = {
    update: XOR<PermissionUpdateWithoutRolesInput, PermissionUncheckedUpdateWithoutRolesInput>
    create: XOR<PermissionCreateWithoutRolesInput, PermissionUncheckedCreateWithoutRolesInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutRolesInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutRolesInput, PermissionUncheckedUpdateWithoutRolesInput>
  }

  export type PermissionUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedPermissionsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedPermissionsNestedInput
  }

  export type PermissionUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    updatedById?: StringFieldUpdateOperationsInput | string
  }

  export type ShareholderCreateWithoutAddressInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    shareFile?: ShareFileCreateNestedOneWithoutShareholdersInput
    share?: ShareCreateNestedOneWithoutShareholdersInput
    createdBy?: UserCreateNestedOneWithoutCreatedShareholdersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedShareholdersInput
    shareholderLogs?: ShareholderLogCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderUncheckedCreateWithoutAddressInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    shareholderLogs?: ShareholderLogUncheckedCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionUncheckedCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingUncheckedCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderCreateOrConnectWithoutAddressInput = {
    where: ShareholderWhereUniqueInput
    create: XOR<ShareholderCreateWithoutAddressInput, ShareholderUncheckedCreateWithoutAddressInput>
  }

  export type ShareholderCreateManyAddressInputEnvelope = {
    data: ShareholderCreateManyAddressInput | ShareholderCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type ShareholderUpsertWithWhereUniqueWithoutAddressInput = {
    where: ShareholderWhereUniqueInput
    update: XOR<ShareholderUpdateWithoutAddressInput, ShareholderUncheckedUpdateWithoutAddressInput>
    create: XOR<ShareholderCreateWithoutAddressInput, ShareholderUncheckedCreateWithoutAddressInput>
  }

  export type ShareholderUpdateWithWhereUniqueWithoutAddressInput = {
    where: ShareholderWhereUniqueInput
    data: XOR<ShareholderUpdateWithoutAddressInput, ShareholderUncheckedUpdateWithoutAddressInput>
  }

  export type ShareholderUpdateManyWithWhereWithoutAddressInput = {
    where: ShareholderScalarWhereInput
    data: XOR<ShareholderUpdateManyMutationInput, ShareholderUncheckedUpdateManyWithoutAddressInput>
  }

  export type CityCreateWithoutRegionInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subcities?: SubcityCreateNestedManyWithoutCityInput
  }

  export type CityUncheckedCreateWithoutRegionInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subcities?: SubcityUncheckedCreateNestedManyWithoutCityInput
  }

  export type CityCreateOrConnectWithoutRegionInput = {
    where: CityWhereUniqueInput
    create: XOR<CityCreateWithoutRegionInput, CityUncheckedCreateWithoutRegionInput>
  }

  export type CityCreateManyRegionInputEnvelope = {
    data: CityCreateManyRegionInput | CityCreateManyRegionInput[]
    skipDuplicates?: boolean
  }

  export type CityUpsertWithWhereUniqueWithoutRegionInput = {
    where: CityWhereUniqueInput
    update: XOR<CityUpdateWithoutRegionInput, CityUncheckedUpdateWithoutRegionInput>
    create: XOR<CityCreateWithoutRegionInput, CityUncheckedCreateWithoutRegionInput>
  }

  export type CityUpdateWithWhereUniqueWithoutRegionInput = {
    where: CityWhereUniqueInput
    data: XOR<CityUpdateWithoutRegionInput, CityUncheckedUpdateWithoutRegionInput>
  }

  export type CityUpdateManyWithWhereWithoutRegionInput = {
    where: CityScalarWhereInput
    data: XOR<CityUpdateManyMutationInput, CityUncheckedUpdateManyWithoutRegionInput>
  }

  export type CityScalarWhereInput = {
    AND?: CityScalarWhereInput | CityScalarWhereInput[]
    OR?: CityScalarWhereInput[]
    NOT?: CityScalarWhereInput | CityScalarWhereInput[]
    id?: StringFilter<"City"> | string
    name?: StringFilter<"City"> | string
    regionId?: StringFilter<"City"> | string
    createdAt?: DateTimeFilter<"City"> | Date | string
    updatedAt?: DateTimeFilter<"City"> | Date | string
  }

  export type RegionCreateWithoutCitiesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegionUncheckedCreateWithoutCitiesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RegionCreateOrConnectWithoutCitiesInput = {
    where: RegionWhereUniqueInput
    create: XOR<RegionCreateWithoutCitiesInput, RegionUncheckedCreateWithoutCitiesInput>
  }

  export type SubcityCreateWithoutCityInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubcityUncheckedCreateWithoutCityInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubcityCreateOrConnectWithoutCityInput = {
    where: SubcityWhereUniqueInput
    create: XOR<SubcityCreateWithoutCityInput, SubcityUncheckedCreateWithoutCityInput>
  }

  export type SubcityCreateManyCityInputEnvelope = {
    data: SubcityCreateManyCityInput | SubcityCreateManyCityInput[]
    skipDuplicates?: boolean
  }

  export type RegionUpsertWithoutCitiesInput = {
    update: XOR<RegionUpdateWithoutCitiesInput, RegionUncheckedUpdateWithoutCitiesInput>
    create: XOR<RegionCreateWithoutCitiesInput, RegionUncheckedCreateWithoutCitiesInput>
    where?: RegionWhereInput
  }

  export type RegionUpdateToOneWithWhereWithoutCitiesInput = {
    where?: RegionWhereInput
    data: XOR<RegionUpdateWithoutCitiesInput, RegionUncheckedUpdateWithoutCitiesInput>
  }

  export type RegionUpdateWithoutCitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RegionUncheckedUpdateWithoutCitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubcityUpsertWithWhereUniqueWithoutCityInput = {
    where: SubcityWhereUniqueInput
    update: XOR<SubcityUpdateWithoutCityInput, SubcityUncheckedUpdateWithoutCityInput>
    create: XOR<SubcityCreateWithoutCityInput, SubcityUncheckedCreateWithoutCityInput>
  }

  export type SubcityUpdateWithWhereUniqueWithoutCityInput = {
    where: SubcityWhereUniqueInput
    data: XOR<SubcityUpdateWithoutCityInput, SubcityUncheckedUpdateWithoutCityInput>
  }

  export type SubcityUpdateManyWithWhereWithoutCityInput = {
    where: SubcityScalarWhereInput
    data: XOR<SubcityUpdateManyMutationInput, SubcityUncheckedUpdateManyWithoutCityInput>
  }

  export type SubcityScalarWhereInput = {
    AND?: SubcityScalarWhereInput | SubcityScalarWhereInput[]
    OR?: SubcityScalarWhereInput[]
    NOT?: SubcityScalarWhereInput | SubcityScalarWhereInput[]
    id?: StringFilter<"Subcity"> | string
    name?: StringFilter<"Subcity"> | string
    cityId?: StringFilter<"Subcity"> | string
    createdAt?: DateTimeFilter<"Subcity"> | Date | string
    updatedAt?: DateTimeFilter<"Subcity"> | Date | string
  }

  export type CityCreateWithoutSubcitiesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    region: RegionCreateNestedOneWithoutCitiesInput
  }

  export type CityUncheckedCreateWithoutSubcitiesInput = {
    id?: string
    name: string
    regionId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CityCreateOrConnectWithoutSubcitiesInput = {
    where: CityWhereUniqueInput
    create: XOR<CityCreateWithoutSubcitiesInput, CityUncheckedCreateWithoutSubcitiesInput>
  }

  export type CityUpsertWithoutSubcitiesInput = {
    update: XOR<CityUpdateWithoutSubcitiesInput, CityUncheckedUpdateWithoutSubcitiesInput>
    create: XOR<CityCreateWithoutSubcitiesInput, CityUncheckedCreateWithoutSubcitiesInput>
    where?: CityWhereInput
  }

  export type CityUpdateToOneWithWhereWithoutSubcitiesInput = {
    where?: CityWhereInput
    data: XOR<CityUpdateWithoutSubcitiesInput, CityUncheckedUpdateWithoutSubcitiesInput>
  }

  export type CityUpdateWithoutSubcitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    region?: RegionUpdateOneRequiredWithoutCitiesNestedInput
  }

  export type CityUncheckedUpdateWithoutSubcitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    regionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutMessagesSentInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedUsersInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutMessagesSentInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserUncheckedCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderUncheckedCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutMessagesSentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
  }

  export type UserCreateWithoutMessagesReceivedInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedUsersInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    updatedUsers?: UserCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutMessagesReceivedInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    updatedUsers?: UserUncheckedCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderUncheckedCreateNestedManyWithoutUpdatedByInput
    createdShareholders?: ShareholderUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutMessagesReceivedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMessagesReceivedInput, UserUncheckedCreateWithoutMessagesReceivedInput>
  }

  export type UserUpsertWithoutMessagesSentInput = {
    update: XOR<UserUpdateWithoutMessagesSentInput, UserUncheckedUpdateWithoutMessagesSentInput>
    create: XOR<UserCreateWithoutMessagesSentInput, UserUncheckedCreateWithoutMessagesSentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesSentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesSentInput, UserUncheckedUpdateWithoutMessagesSentInput>
  }

  export type UserUpdateWithoutMessagesSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedUsersNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesSentInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutMessagesReceivedInput = {
    update: XOR<UserUpdateWithoutMessagesReceivedInput, UserUncheckedUpdateWithoutMessagesReceivedInput>
    create: XOR<UserCreateWithoutMessagesReceivedInput, UserUncheckedCreateWithoutMessagesReceivedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMessagesReceivedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMessagesReceivedInput, UserUncheckedUpdateWithoutMessagesReceivedInput>
  }

  export type UserUpdateWithoutMessagesReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedUsersNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    updatedUsers?: UserUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutMessagesReceivedInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    updatedUsers?: UserUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ShareholderCreateWithoutShareFileInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutShareholdersInput
    share?: ShareCreateNestedOneWithoutShareholdersInput
    createdBy?: UserCreateNestedOneWithoutCreatedShareholdersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedShareholdersInput
    shareholderLogs?: ShareholderLogCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderUncheckedCreateWithoutShareFileInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    shareholderLogs?: ShareholderLogUncheckedCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionUncheckedCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingUncheckedCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderCreateOrConnectWithoutShareFileInput = {
    where: ShareholderWhereUniqueInput
    create: XOR<ShareholderCreateWithoutShareFileInput, ShareholderUncheckedCreateWithoutShareFileInput>
  }

  export type ShareholderCreateManyShareFileInputEnvelope = {
    data: ShareholderCreateManyShareFileInput | ShareholderCreateManyShareFileInput[]
    skipDuplicates?: boolean
  }

  export type ShareholderUpsertWithWhereUniqueWithoutShareFileInput = {
    where: ShareholderWhereUniqueInput
    update: XOR<ShareholderUpdateWithoutShareFileInput, ShareholderUncheckedUpdateWithoutShareFileInput>
    create: XOR<ShareholderCreateWithoutShareFileInput, ShareholderUncheckedCreateWithoutShareFileInput>
  }

  export type ShareholderUpdateWithWhereUniqueWithoutShareFileInput = {
    where: ShareholderWhereUniqueInput
    data: XOR<ShareholderUpdateWithoutShareFileInput, ShareholderUncheckedUpdateWithoutShareFileInput>
  }

  export type ShareholderUpdateManyWithWhereWithoutShareFileInput = {
    where: ShareholderScalarWhereInput
    data: XOR<ShareholderUpdateManyMutationInput, ShareholderUncheckedUpdateManyWithoutShareFileInput>
  }

  export type AddressCreateWithoutShareholdersInput = {
    id?: bigint | number
    kebele: string
    houseNumber: string
    regionId: bigint | number
    cityOrZoneId: bigint | number
    subCitiesOrTownId: bigint | number
    woreda: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    updatedBy: number
  }

  export type AddressUncheckedCreateWithoutShareholdersInput = {
    id?: bigint | number
    kebele: string
    houseNumber: string
    regionId: bigint | number
    cityOrZoneId: bigint | number
    subCitiesOrTownId: bigint | number
    woreda: bigint | number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: number
    updatedBy: number
  }

  export type AddressCreateOrConnectWithoutShareholdersInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutShareholdersInput, AddressUncheckedCreateWithoutShareholdersInput>
  }

  export type ShareFileCreateWithoutShareholdersInput = {
    id?: bigint | number
    url: string
    createdBy: string
    updatedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareFileUncheckedCreateWithoutShareholdersInput = {
    id?: bigint | number
    url: string
    createdBy: string
    updatedBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ShareFileCreateOrConnectWithoutShareholdersInput = {
    where: ShareFileWhereUniqueInput
    create: XOR<ShareFileCreateWithoutShareholdersInput, ShareFileUncheckedCreateWithoutShareholdersInput>
  }

  export type ShareCreateWithoutShareholdersInput = {
    id?: string
    noOfShare: string
    totalSubscribedAmount: string
    totalPaidAmount: string
    premiumAmount: string
    serviceChargeAmount: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareUncheckedCreateWithoutShareholdersInput = {
    id?: string
    noOfShare: string
    totalSubscribedAmount: string
    totalPaidAmount: string
    premiumAmount: string
    serviceChargeAmount: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareCreateOrConnectWithoutShareholdersInput = {
    where: ShareWhereUniqueInput
    create: XOR<ShareCreateWithoutShareholdersInput, ShareUncheckedCreateWithoutShareholdersInput>
  }

  export type UserCreateWithoutCreatedShareholdersInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedUsersInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatedShareholdersInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserUncheckedCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    updatedShareholders?: ShareholderUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatedShareholdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedShareholdersInput, UserUncheckedCreateWithoutCreatedShareholdersInput>
  }

  export type UserCreateWithoutUpdatedShareholdersInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatedUsersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedUsersInput
    roles?: UserRoleCreateNestedManyWithoutUserInput
    messagesSent?: MessageCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionCreateNestedManyWithoutCreatedByInput
    createdShareholders?: ShareholderCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdatedShareholdersInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
    roles?: UserRoleUncheckedCreateNestedManyWithoutUserInput
    messagesSent?: MessageUncheckedCreateNestedManyWithoutSenderInput
    messagesReceived?: MessageUncheckedCreateNestedManyWithoutReceiverInput
    updatedUsers?: UserUncheckedCreateNestedManyWithoutUpdatedByInput
    createdUsers?: UserUncheckedCreateNestedManyWithoutCreatedByInput
    updatedRoles?: RoleUncheckedCreateNestedManyWithoutUpdatedByInput
    createdRoles?: RoleUncheckedCreateNestedManyWithoutCreatedByInput
    updatedPermissions?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    createdPermissions?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    createdShareholders?: ShareholderUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdatedShareholdersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdatedShareholdersInput, UserUncheckedCreateWithoutUpdatedShareholdersInput>
  }

  export type ShareholderLogCreateWithoutShareholderInput = {
    mode: number
    columnName: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareholderLogUncheckedCreateWithoutShareholderInput = {
    id?: number
    mode: number
    columnName: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareholderLogCreateOrConnectWithoutShareholderInput = {
    where: ShareholderLogWhereUniqueInput
    create: XOR<ShareholderLogCreateWithoutShareholderInput, ShareholderLogUncheckedCreateWithoutShareholderInput>
  }

  export type ShareholderLogCreateManyShareholderInputEnvelope = {
    data: ShareholderLogCreateManyShareholderInput | ShareholderLogCreateManyShareholderInput[]
    skipDuplicates?: boolean
  }

  export type ShareTransactionCreateWithoutShareholderInput = {
    paidAmount: string
    fycType: number
    paymentReason: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    shareholding: ShareholdingCreateNestedOneWithoutShareTransactionInput
  }

  export type ShareTransactionUncheckedCreateWithoutShareholderInput = {
    id?: number
    shareholdingId: string
    paidAmount: string
    fycType: number
    paymentReason: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareTransactionCreateOrConnectWithoutShareholderInput = {
    where: ShareTransactionWhereUniqueInput
    create: XOR<ShareTransactionCreateWithoutShareholderInput, ShareTransactionUncheckedCreateWithoutShareholderInput>
  }

  export type ShareTransactionCreateManyShareholderInputEnvelope = {
    data: ShareTransactionCreateManyShareholderInput | ShareTransactionCreateManyShareholderInput[]
    skipDuplicates?: boolean
  }

  export type ShareholdingCreateWithoutShareholderInput = {
    id?: string
    serialNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    shareTransaction?: ShareTransactionCreateNestedManyWithoutShareholdingInput
  }

  export type ShareholdingUncheckedCreateWithoutShareholderInput = {
    id?: string
    serialNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    shareTransaction?: ShareTransactionUncheckedCreateNestedManyWithoutShareholdingInput
  }

  export type ShareholdingCreateOrConnectWithoutShareholderInput = {
    where: ShareholdingWhereUniqueInput
    create: XOR<ShareholdingCreateWithoutShareholderInput, ShareholdingUncheckedCreateWithoutShareholderInput>
  }

  export type ShareholdingCreateManyShareholderInputEnvelope = {
    data: ShareholdingCreateManyShareholderInput | ShareholdingCreateManyShareholderInput[]
    skipDuplicates?: boolean
  }

  export type ShareTransferCreateWithoutFromShareholderInput = {
    placeOfTransferId: number
    transferType: number
    serialNumber: number
    fycType: number
    paymentReason: number
    transferDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    toShareholder: ShareholderCreateNestedOneWithoutTohareTransferInput
  }

  export type ShareTransferUncheckedCreateWithoutFromShareholderInput = {
    id?: number
    toShareholderId: string
    placeOfTransferId: number
    transferType: number
    serialNumber: number
    fycType: number
    paymentReason: number
    transferDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareTransferCreateOrConnectWithoutFromShareholderInput = {
    where: ShareTransferWhereUniqueInput
    create: XOR<ShareTransferCreateWithoutFromShareholderInput, ShareTransferUncheckedCreateWithoutFromShareholderInput>
  }

  export type ShareTransferCreateManyFromShareholderInputEnvelope = {
    data: ShareTransferCreateManyFromShareholderInput | ShareTransferCreateManyFromShareholderInput[]
    skipDuplicates?: boolean
  }

  export type ShareTransferCreateWithoutToShareholderInput = {
    placeOfTransferId: number
    transferType: number
    serialNumber: number
    fycType: number
    paymentReason: number
    transferDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    fromShareholder: ShareholderCreateNestedOneWithoutFromshareTransferInput
  }

  export type ShareTransferUncheckedCreateWithoutToShareholderInput = {
    id?: number
    fromShareholderId: string
    placeOfTransferId: number
    transferType: number
    serialNumber: number
    fycType: number
    paymentReason: number
    transferDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareTransferCreateOrConnectWithoutToShareholderInput = {
    where: ShareTransferWhereUniqueInput
    create: XOR<ShareTransferCreateWithoutToShareholderInput, ShareTransferUncheckedCreateWithoutToShareholderInput>
  }

  export type ShareTransferCreateManyToShareholderInputEnvelope = {
    data: ShareTransferCreateManyToShareholderInput | ShareTransferCreateManyToShareholderInput[]
    skipDuplicates?: boolean
  }

  export type AddressUpsertWithoutShareholdersInput = {
    update: XOR<AddressUpdateWithoutShareholdersInput, AddressUncheckedUpdateWithoutShareholdersInput>
    create: XOR<AddressCreateWithoutShareholdersInput, AddressUncheckedCreateWithoutShareholdersInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutShareholdersInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutShareholdersInput, AddressUncheckedUpdateWithoutShareholdersInput>
  }

  export type AddressUpdateWithoutShareholdersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    kebele?: StringFieldUpdateOperationsInput | string
    houseNumber?: StringFieldUpdateOperationsInput | string
    regionId?: BigIntFieldUpdateOperationsInput | bigint | number
    cityOrZoneId?: BigIntFieldUpdateOperationsInput | bigint | number
    subCitiesOrTownId?: BigIntFieldUpdateOperationsInput | bigint | number
    woreda?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: IntFieldUpdateOperationsInput | number
  }

  export type AddressUncheckedUpdateWithoutShareholdersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    kebele?: StringFieldUpdateOperationsInput | string
    houseNumber?: StringFieldUpdateOperationsInput | string
    regionId?: BigIntFieldUpdateOperationsInput | bigint | number
    cityOrZoneId?: BigIntFieldUpdateOperationsInput | bigint | number
    subCitiesOrTownId?: BigIntFieldUpdateOperationsInput | bigint | number
    woreda?: BigIntFieldUpdateOperationsInput | bigint | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    updatedBy?: IntFieldUpdateOperationsInput | number
  }

  export type ShareFileUpsertWithoutShareholdersInput = {
    update: XOR<ShareFileUpdateWithoutShareholdersInput, ShareFileUncheckedUpdateWithoutShareholdersInput>
    create: XOR<ShareFileCreateWithoutShareholdersInput, ShareFileUncheckedCreateWithoutShareholdersInput>
    where?: ShareFileWhereInput
  }

  export type ShareFileUpdateToOneWithWhereWithoutShareholdersInput = {
    where?: ShareFileWhereInput
    data: XOR<ShareFileUpdateWithoutShareholdersInput, ShareFileUncheckedUpdateWithoutShareholdersInput>
  }

  export type ShareFileUpdateWithoutShareholdersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    url?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareFileUncheckedUpdateWithoutShareholdersInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    url?: StringFieldUpdateOperationsInput | string
    createdBy?: StringFieldUpdateOperationsInput | string
    updatedBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareUpsertWithoutShareholdersInput = {
    update: XOR<ShareUpdateWithoutShareholdersInput, ShareUncheckedUpdateWithoutShareholdersInput>
    create: XOR<ShareCreateWithoutShareholdersInput, ShareUncheckedCreateWithoutShareholdersInput>
    where?: ShareWhereInput
  }

  export type ShareUpdateToOneWithWhereWithoutShareholdersInput = {
    where?: ShareWhereInput
    data: XOR<ShareUpdateWithoutShareholdersInput, ShareUncheckedUpdateWithoutShareholdersInput>
  }

  export type ShareUpdateWithoutShareholdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    noOfShare?: StringFieldUpdateOperationsInput | string
    totalSubscribedAmount?: StringFieldUpdateOperationsInput | string
    totalPaidAmount?: StringFieldUpdateOperationsInput | string
    premiumAmount?: StringFieldUpdateOperationsInput | string
    serviceChargeAmount?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareUncheckedUpdateWithoutShareholdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    noOfShare?: StringFieldUpdateOperationsInput | string
    totalSubscribedAmount?: StringFieldUpdateOperationsInput | string
    totalPaidAmount?: StringFieldUpdateOperationsInput | string
    premiumAmount?: StringFieldUpdateOperationsInput | string
    serviceChargeAmount?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUpsertWithoutCreatedShareholdersInput = {
    update: XOR<UserUpdateWithoutCreatedShareholdersInput, UserUncheckedUpdateWithoutCreatedShareholdersInput>
    create: XOR<UserCreateWithoutCreatedShareholdersInput, UserUncheckedCreateWithoutCreatedShareholdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedShareholdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedShareholdersInput, UserUncheckedUpdateWithoutCreatedShareholdersInput>
  }

  export type UserUpdateWithoutCreatedShareholdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedUsersNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedShareholdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutUpdatedShareholdersInput = {
    update: XOR<UserUpdateWithoutUpdatedShareholdersInput, UserUncheckedUpdateWithoutUpdatedShareholdersInput>
    create: XOR<UserCreateWithoutUpdatedShareholdersInput, UserUncheckedCreateWithoutUpdatedShareholdersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdatedShareholdersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdatedShareholdersInput, UserUncheckedUpdateWithoutUpdatedShareholdersInput>
  }

  export type UserUpdateWithoutUpdatedShareholdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedUsersNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUpdateManyWithoutCreatedByNestedInput
    createdShareholders?: ShareholderUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedShareholdersInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    createdShareholders?: ShareholderUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ShareholderLogUpsertWithWhereUniqueWithoutShareholderInput = {
    where: ShareholderLogWhereUniqueInput
    update: XOR<ShareholderLogUpdateWithoutShareholderInput, ShareholderLogUncheckedUpdateWithoutShareholderInput>
    create: XOR<ShareholderLogCreateWithoutShareholderInput, ShareholderLogUncheckedCreateWithoutShareholderInput>
  }

  export type ShareholderLogUpdateWithWhereUniqueWithoutShareholderInput = {
    where: ShareholderLogWhereUniqueInput
    data: XOR<ShareholderLogUpdateWithoutShareholderInput, ShareholderLogUncheckedUpdateWithoutShareholderInput>
  }

  export type ShareholderLogUpdateManyWithWhereWithoutShareholderInput = {
    where: ShareholderLogScalarWhereInput
    data: XOR<ShareholderLogUpdateManyMutationInput, ShareholderLogUncheckedUpdateManyWithoutShareholderInput>
  }

  export type ShareholderLogScalarWhereInput = {
    AND?: ShareholderLogScalarWhereInput | ShareholderLogScalarWhereInput[]
    OR?: ShareholderLogScalarWhereInput[]
    NOT?: ShareholderLogScalarWhereInput | ShareholderLogScalarWhereInput[]
    id?: IntFilter<"ShareholderLog"> | number
    shareholderId?: StringFilter<"ShareholderLog"> | string
    mode?: IntFilter<"ShareholderLog"> | number
    columnName?: StringFilter<"ShareholderLog"> | string
    value?: StringFilter<"ShareholderLog"> | string
    createdAt?: DateTimeFilter<"ShareholderLog"> | Date | string
    updatedAt?: DateTimeFilter<"ShareholderLog"> | Date | string
    createdBy?: IntNullableFilter<"ShareholderLog"> | number | null
    updatedBy?: IntNullableFilter<"ShareholderLog"> | number | null
  }

  export type ShareTransactionUpsertWithWhereUniqueWithoutShareholderInput = {
    where: ShareTransactionWhereUniqueInput
    update: XOR<ShareTransactionUpdateWithoutShareholderInput, ShareTransactionUncheckedUpdateWithoutShareholderInput>
    create: XOR<ShareTransactionCreateWithoutShareholderInput, ShareTransactionUncheckedCreateWithoutShareholderInput>
  }

  export type ShareTransactionUpdateWithWhereUniqueWithoutShareholderInput = {
    where: ShareTransactionWhereUniqueInput
    data: XOR<ShareTransactionUpdateWithoutShareholderInput, ShareTransactionUncheckedUpdateWithoutShareholderInput>
  }

  export type ShareTransactionUpdateManyWithWhereWithoutShareholderInput = {
    where: ShareTransactionScalarWhereInput
    data: XOR<ShareTransactionUpdateManyMutationInput, ShareTransactionUncheckedUpdateManyWithoutShareholderInput>
  }

  export type ShareTransactionScalarWhereInput = {
    AND?: ShareTransactionScalarWhereInput | ShareTransactionScalarWhereInput[]
    OR?: ShareTransactionScalarWhereInput[]
    NOT?: ShareTransactionScalarWhereInput | ShareTransactionScalarWhereInput[]
    id?: IntFilter<"ShareTransaction"> | number
    shareholderId?: StringFilter<"ShareTransaction"> | string
    shareholdingId?: StringFilter<"ShareTransaction"> | string
    paidAmount?: StringFilter<"ShareTransaction"> | string
    fycType?: IntFilter<"ShareTransaction"> | number
    paymentReason?: IntFilter<"ShareTransaction"> | number
    createdAt?: DateTimeFilter<"ShareTransaction"> | Date | string
    updatedAt?: DateTimeFilter<"ShareTransaction"> | Date | string
    createdBy?: IntNullableFilter<"ShareTransaction"> | number | null
    updatedBy?: IntNullableFilter<"ShareTransaction"> | number | null
  }

  export type ShareholdingUpsertWithWhereUniqueWithoutShareholderInput = {
    where: ShareholdingWhereUniqueInput
    update: XOR<ShareholdingUpdateWithoutShareholderInput, ShareholdingUncheckedUpdateWithoutShareholderInput>
    create: XOR<ShareholdingCreateWithoutShareholderInput, ShareholdingUncheckedCreateWithoutShareholderInput>
  }

  export type ShareholdingUpdateWithWhereUniqueWithoutShareholderInput = {
    where: ShareholdingWhereUniqueInput
    data: XOR<ShareholdingUpdateWithoutShareholderInput, ShareholdingUncheckedUpdateWithoutShareholderInput>
  }

  export type ShareholdingUpdateManyWithWhereWithoutShareholderInput = {
    where: ShareholdingScalarWhereInput
    data: XOR<ShareholdingUpdateManyMutationInput, ShareholdingUncheckedUpdateManyWithoutShareholderInput>
  }

  export type ShareholdingScalarWhereInput = {
    AND?: ShareholdingScalarWhereInput | ShareholdingScalarWhereInput[]
    OR?: ShareholdingScalarWhereInput[]
    NOT?: ShareholdingScalarWhereInput | ShareholdingScalarWhereInput[]
    id?: StringFilter<"Shareholding"> | string
    shareholderId?: StringFilter<"Shareholding"> | string
    serialNumber?: IntFilter<"Shareholding"> | number
    createdAt?: DateTimeFilter<"Shareholding"> | Date | string
    updatedAt?: DateTimeFilter<"Shareholding"> | Date | string
    createdBy?: IntNullableFilter<"Shareholding"> | number | null
    updatedBy?: IntNullableFilter<"Shareholding"> | number | null
  }

  export type ShareTransferUpsertWithWhereUniqueWithoutFromShareholderInput = {
    where: ShareTransferWhereUniqueInput
    update: XOR<ShareTransferUpdateWithoutFromShareholderInput, ShareTransferUncheckedUpdateWithoutFromShareholderInput>
    create: XOR<ShareTransferCreateWithoutFromShareholderInput, ShareTransferUncheckedCreateWithoutFromShareholderInput>
  }

  export type ShareTransferUpdateWithWhereUniqueWithoutFromShareholderInput = {
    where: ShareTransferWhereUniqueInput
    data: XOR<ShareTransferUpdateWithoutFromShareholderInput, ShareTransferUncheckedUpdateWithoutFromShareholderInput>
  }

  export type ShareTransferUpdateManyWithWhereWithoutFromShareholderInput = {
    where: ShareTransferScalarWhereInput
    data: XOR<ShareTransferUpdateManyMutationInput, ShareTransferUncheckedUpdateManyWithoutFromShareholderInput>
  }

  export type ShareTransferScalarWhereInput = {
    AND?: ShareTransferScalarWhereInput | ShareTransferScalarWhereInput[]
    OR?: ShareTransferScalarWhereInput[]
    NOT?: ShareTransferScalarWhereInput | ShareTransferScalarWhereInput[]
    id?: IntFilter<"ShareTransfer"> | number
    fromShareholderId?: StringFilter<"ShareTransfer"> | string
    toShareholderId?: StringFilter<"ShareTransfer"> | string
    placeOfTransferId?: IntFilter<"ShareTransfer"> | number
    transferType?: IntFilter<"ShareTransfer"> | number
    serialNumber?: IntFilter<"ShareTransfer"> | number
    fycType?: IntFilter<"ShareTransfer"> | number
    paymentReason?: IntFilter<"ShareTransfer"> | number
    transferDate?: DateTimeFilter<"ShareTransfer"> | Date | string
    createdAt?: DateTimeFilter<"ShareTransfer"> | Date | string
    updatedAt?: DateTimeFilter<"ShareTransfer"> | Date | string
    createdBy?: IntNullableFilter<"ShareTransfer"> | number | null
    updatedBy?: IntNullableFilter<"ShareTransfer"> | number | null
  }

  export type ShareTransferUpsertWithWhereUniqueWithoutToShareholderInput = {
    where: ShareTransferWhereUniqueInput
    update: XOR<ShareTransferUpdateWithoutToShareholderInput, ShareTransferUncheckedUpdateWithoutToShareholderInput>
    create: XOR<ShareTransferCreateWithoutToShareholderInput, ShareTransferUncheckedCreateWithoutToShareholderInput>
  }

  export type ShareTransferUpdateWithWhereUniqueWithoutToShareholderInput = {
    where: ShareTransferWhereUniqueInput
    data: XOR<ShareTransferUpdateWithoutToShareholderInput, ShareTransferUncheckedUpdateWithoutToShareholderInput>
  }

  export type ShareTransferUpdateManyWithWhereWithoutToShareholderInput = {
    where: ShareTransferScalarWhereInput
    data: XOR<ShareTransferUpdateManyMutationInput, ShareTransferUncheckedUpdateManyWithoutToShareholderInput>
  }

  export type ShareholderCreateWithoutShareholderLogsInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutShareholdersInput
    shareFile?: ShareFileCreateNestedOneWithoutShareholdersInput
    share?: ShareCreateNestedOneWithoutShareholdersInput
    createdBy?: UserCreateNestedOneWithoutCreatedShareholdersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedShareholdersInput
    shareTransactions?: ShareTransactionCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderUncheckedCreateWithoutShareholderLogsInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    shareTransactions?: ShareTransactionUncheckedCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingUncheckedCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderCreateOrConnectWithoutShareholderLogsInput = {
    where: ShareholderWhereUniqueInput
    create: XOR<ShareholderCreateWithoutShareholderLogsInput, ShareholderUncheckedCreateWithoutShareholderLogsInput>
  }

  export type ShareholderUpsertWithoutShareholderLogsInput = {
    update: XOR<ShareholderUpdateWithoutShareholderLogsInput, ShareholderUncheckedUpdateWithoutShareholderLogsInput>
    create: XOR<ShareholderCreateWithoutShareholderLogsInput, ShareholderUncheckedCreateWithoutShareholderLogsInput>
    where?: ShareholderWhereInput
  }

  export type ShareholderUpdateToOneWithWhereWithoutShareholderLogsInput = {
    where?: ShareholderWhereInput
    data: XOR<ShareholderUpdateWithoutShareholderLogsInput, ShareholderUncheckedUpdateWithoutShareholderLogsInput>
  }

  export type ShareholderUpdateWithoutShareholderLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutShareholdersNestedInput
    shareFile?: ShareFileUpdateOneWithoutShareholdersNestedInput
    share?: ShareUpdateOneWithoutShareholdersNestedInput
    createdBy?: UserUpdateOneWithoutCreatedShareholdersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedShareholdersNestedInput
    shareTransactions?: ShareTransactionUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateWithoutShareholderLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    shareTransactions?: ShareTransactionUncheckedUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUncheckedUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUncheckedUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUncheckedUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderCreateWithoutShareInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutShareholdersInput
    shareFile?: ShareFileCreateNestedOneWithoutShareholdersInput
    createdBy?: UserCreateNestedOneWithoutCreatedShareholdersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedShareholdersInput
    shareholderLogs?: ShareholderLogCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderUncheckedCreateWithoutShareInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    shareholderLogs?: ShareholderLogUncheckedCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionUncheckedCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingUncheckedCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderCreateOrConnectWithoutShareInput = {
    where: ShareholderWhereUniqueInput
    create: XOR<ShareholderCreateWithoutShareInput, ShareholderUncheckedCreateWithoutShareInput>
  }

  export type ShareholderCreateManyShareInputEnvelope = {
    data: ShareholderCreateManyShareInput | ShareholderCreateManyShareInput[]
    skipDuplicates?: boolean
  }

  export type ShareholderUpsertWithWhereUniqueWithoutShareInput = {
    where: ShareholderWhereUniqueInput
    update: XOR<ShareholderUpdateWithoutShareInput, ShareholderUncheckedUpdateWithoutShareInput>
    create: XOR<ShareholderCreateWithoutShareInput, ShareholderUncheckedCreateWithoutShareInput>
  }

  export type ShareholderUpdateWithWhereUniqueWithoutShareInput = {
    where: ShareholderWhereUniqueInput
    data: XOR<ShareholderUpdateWithoutShareInput, ShareholderUncheckedUpdateWithoutShareInput>
  }

  export type ShareholderUpdateManyWithWhereWithoutShareInput = {
    where: ShareholderScalarWhereInput
    data: XOR<ShareholderUpdateManyMutationInput, ShareholderUncheckedUpdateManyWithoutShareInput>
  }

  export type ShareholderCreateWithoutShareTransactionsInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutShareholdersInput
    shareFile?: ShareFileCreateNestedOneWithoutShareholdersInput
    share?: ShareCreateNestedOneWithoutShareholdersInput
    createdBy?: UserCreateNestedOneWithoutCreatedShareholdersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedShareholdersInput
    shareholderLogs?: ShareholderLogCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderUncheckedCreateWithoutShareTransactionsInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    shareholderLogs?: ShareholderLogUncheckedCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingUncheckedCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderCreateOrConnectWithoutShareTransactionsInput = {
    where: ShareholderWhereUniqueInput
    create: XOR<ShareholderCreateWithoutShareTransactionsInput, ShareholderUncheckedCreateWithoutShareTransactionsInput>
  }

  export type ShareholdingCreateWithoutShareTransactionInput = {
    id?: string
    serialNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    shareholder: ShareholderCreateNestedOneWithoutShareholdingInput
  }

  export type ShareholdingUncheckedCreateWithoutShareTransactionInput = {
    id?: string
    shareholderId: string
    serialNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareholdingCreateOrConnectWithoutShareTransactionInput = {
    where: ShareholdingWhereUniqueInput
    create: XOR<ShareholdingCreateWithoutShareTransactionInput, ShareholdingUncheckedCreateWithoutShareTransactionInput>
  }

  export type ShareholderUpsertWithoutShareTransactionsInput = {
    update: XOR<ShareholderUpdateWithoutShareTransactionsInput, ShareholderUncheckedUpdateWithoutShareTransactionsInput>
    create: XOR<ShareholderCreateWithoutShareTransactionsInput, ShareholderUncheckedCreateWithoutShareTransactionsInput>
    where?: ShareholderWhereInput
  }

  export type ShareholderUpdateToOneWithWhereWithoutShareTransactionsInput = {
    where?: ShareholderWhereInput
    data: XOR<ShareholderUpdateWithoutShareTransactionsInput, ShareholderUncheckedUpdateWithoutShareTransactionsInput>
  }

  export type ShareholderUpdateWithoutShareTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutShareholdersNestedInput
    shareFile?: ShareFileUpdateOneWithoutShareholdersNestedInput
    share?: ShareUpdateOneWithoutShareholdersNestedInput
    createdBy?: UserUpdateOneWithoutCreatedShareholdersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedShareholdersNestedInput
    shareholderLogs?: ShareholderLogUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateWithoutShareTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    shareholderLogs?: ShareholderLogUncheckedUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUncheckedUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUncheckedUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUncheckedUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholdingUpsertWithoutShareTransactionInput = {
    update: XOR<ShareholdingUpdateWithoutShareTransactionInput, ShareholdingUncheckedUpdateWithoutShareTransactionInput>
    create: XOR<ShareholdingCreateWithoutShareTransactionInput, ShareholdingUncheckedCreateWithoutShareTransactionInput>
    where?: ShareholdingWhereInput
  }

  export type ShareholdingUpdateToOneWithWhereWithoutShareTransactionInput = {
    where?: ShareholdingWhereInput
    data: XOR<ShareholdingUpdateWithoutShareTransactionInput, ShareholdingUncheckedUpdateWithoutShareTransactionInput>
  }

  export type ShareholdingUpdateWithoutShareTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    shareholder?: ShareholderUpdateOneRequiredWithoutShareholdingNestedInput
  }

  export type ShareholdingUncheckedUpdateWithoutShareTransactionInput = {
    id?: StringFieldUpdateOperationsInput | string
    shareholderId?: StringFieldUpdateOperationsInput | string
    serialNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareholderCreateWithoutShareholdingInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutShareholdersInput
    shareFile?: ShareFileCreateNestedOneWithoutShareholdersInput
    share?: ShareCreateNestedOneWithoutShareholdersInput
    createdBy?: UserCreateNestedOneWithoutCreatedShareholdersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedShareholdersInput
    shareholderLogs?: ShareholderLogCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderUncheckedCreateWithoutShareholdingInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    shareholderLogs?: ShareholderLogUncheckedCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionUncheckedCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutFromShareholderInput
    tohareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderCreateOrConnectWithoutShareholdingInput = {
    where: ShareholderWhereUniqueInput
    create: XOR<ShareholderCreateWithoutShareholdingInput, ShareholderUncheckedCreateWithoutShareholdingInput>
  }

  export type ShareTransactionCreateWithoutShareholdingInput = {
    paidAmount: string
    fycType: number
    paymentReason: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
    shareholder: ShareholderCreateNestedOneWithoutShareTransactionsInput
  }

  export type ShareTransactionUncheckedCreateWithoutShareholdingInput = {
    id?: number
    shareholderId: string
    paidAmount: string
    fycType: number
    paymentReason: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareTransactionCreateOrConnectWithoutShareholdingInput = {
    where: ShareTransactionWhereUniqueInput
    create: XOR<ShareTransactionCreateWithoutShareholdingInput, ShareTransactionUncheckedCreateWithoutShareholdingInput>
  }

  export type ShareTransactionCreateManyShareholdingInputEnvelope = {
    data: ShareTransactionCreateManyShareholdingInput | ShareTransactionCreateManyShareholdingInput[]
    skipDuplicates?: boolean
  }

  export type ShareholderUpsertWithoutShareholdingInput = {
    update: XOR<ShareholderUpdateWithoutShareholdingInput, ShareholderUncheckedUpdateWithoutShareholdingInput>
    create: XOR<ShareholderCreateWithoutShareholdingInput, ShareholderUncheckedCreateWithoutShareholdingInput>
    where?: ShareholderWhereInput
  }

  export type ShareholderUpdateToOneWithWhereWithoutShareholdingInput = {
    where?: ShareholderWhereInput
    data: XOR<ShareholderUpdateWithoutShareholdingInput, ShareholderUncheckedUpdateWithoutShareholdingInput>
  }

  export type ShareholderUpdateWithoutShareholdingInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutShareholdersNestedInput
    shareFile?: ShareFileUpdateOneWithoutShareholdersNestedInput
    share?: ShareUpdateOneWithoutShareholdersNestedInput
    createdBy?: UserUpdateOneWithoutCreatedShareholdersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedShareholdersNestedInput
    shareholderLogs?: ShareholderLogUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateWithoutShareholdingInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    shareholderLogs?: ShareholderLogUncheckedUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUncheckedUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUncheckedUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUncheckedUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareTransactionUpsertWithWhereUniqueWithoutShareholdingInput = {
    where: ShareTransactionWhereUniqueInput
    update: XOR<ShareTransactionUpdateWithoutShareholdingInput, ShareTransactionUncheckedUpdateWithoutShareholdingInput>
    create: XOR<ShareTransactionCreateWithoutShareholdingInput, ShareTransactionUncheckedCreateWithoutShareholdingInput>
  }

  export type ShareTransactionUpdateWithWhereUniqueWithoutShareholdingInput = {
    where: ShareTransactionWhereUniqueInput
    data: XOR<ShareTransactionUpdateWithoutShareholdingInput, ShareTransactionUncheckedUpdateWithoutShareholdingInput>
  }

  export type ShareTransactionUpdateManyWithWhereWithoutShareholdingInput = {
    where: ShareTransactionScalarWhereInput
    data: XOR<ShareTransactionUpdateManyMutationInput, ShareTransactionUncheckedUpdateManyWithoutShareholdingInput>
  }

  export type ShareholderCreateWithoutFromshareTransferInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutShareholdersInput
    shareFile?: ShareFileCreateNestedOneWithoutShareholdersInput
    share?: ShareCreateNestedOneWithoutShareholdersInput
    createdBy?: UserCreateNestedOneWithoutCreatedShareholdersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedShareholdersInput
    shareholderLogs?: ShareholderLogCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingCreateNestedManyWithoutShareholderInput
    tohareTransfer?: ShareTransferCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderUncheckedCreateWithoutFromshareTransferInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    shareholderLogs?: ShareholderLogUncheckedCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionUncheckedCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingUncheckedCreateNestedManyWithoutShareholderInput
    tohareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutToShareholderInput
  }

  export type ShareholderCreateOrConnectWithoutFromshareTransferInput = {
    where: ShareholderWhereUniqueInput
    create: XOR<ShareholderCreateWithoutFromshareTransferInput, ShareholderUncheckedCreateWithoutFromshareTransferInput>
  }

  export type ShareholderCreateWithoutTohareTransferInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutShareholdersInput
    shareFile?: ShareFileCreateNestedOneWithoutShareholdersInput
    share?: ShareCreateNestedOneWithoutShareholdersInput
    createdBy?: UserCreateNestedOneWithoutCreatedShareholdersInput
    updatedBy?: UserCreateNestedOneWithoutUpdatedShareholdersInput
    shareholderLogs?: ShareholderLogCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferCreateNestedManyWithoutFromShareholderInput
  }

  export type ShareholderUncheckedCreateWithoutTohareTransferInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    shareholderLogs?: ShareholderLogUncheckedCreateNestedManyWithoutShareholderInput
    shareTransactions?: ShareTransactionUncheckedCreateNestedManyWithoutShareholderInput
    shareholding?: ShareholdingUncheckedCreateNestedManyWithoutShareholderInput
    fromshareTransfer?: ShareTransferUncheckedCreateNestedManyWithoutFromShareholderInput
  }

  export type ShareholderCreateOrConnectWithoutTohareTransferInput = {
    where: ShareholderWhereUniqueInput
    create: XOR<ShareholderCreateWithoutTohareTransferInput, ShareholderUncheckedCreateWithoutTohareTransferInput>
  }

  export type ShareholderUpsertWithoutFromshareTransferInput = {
    update: XOR<ShareholderUpdateWithoutFromshareTransferInput, ShareholderUncheckedUpdateWithoutFromshareTransferInput>
    create: XOR<ShareholderCreateWithoutFromshareTransferInput, ShareholderUncheckedCreateWithoutFromshareTransferInput>
    where?: ShareholderWhereInput
  }

  export type ShareholderUpdateToOneWithWhereWithoutFromshareTransferInput = {
    where?: ShareholderWhereInput
    data: XOR<ShareholderUpdateWithoutFromshareTransferInput, ShareholderUncheckedUpdateWithoutFromshareTransferInput>
  }

  export type ShareholderUpdateWithoutFromshareTransferInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutShareholdersNestedInput
    shareFile?: ShareFileUpdateOneWithoutShareholdersNestedInput
    share?: ShareUpdateOneWithoutShareholdersNestedInput
    createdBy?: UserUpdateOneWithoutCreatedShareholdersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedShareholdersNestedInput
    shareholderLogs?: ShareholderLogUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUpdateManyWithoutShareholderNestedInput
    tohareTransfer?: ShareTransferUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateWithoutFromshareTransferInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    shareholderLogs?: ShareholderLogUncheckedUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUncheckedUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUncheckedUpdateManyWithoutShareholderNestedInput
    tohareTransfer?: ShareTransferUncheckedUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUpsertWithoutTohareTransferInput = {
    update: XOR<ShareholderUpdateWithoutTohareTransferInput, ShareholderUncheckedUpdateWithoutTohareTransferInput>
    create: XOR<ShareholderCreateWithoutTohareTransferInput, ShareholderUncheckedCreateWithoutTohareTransferInput>
    where?: ShareholderWhereInput
  }

  export type ShareholderUpdateToOneWithWhereWithoutTohareTransferInput = {
    where?: ShareholderWhereInput
    data: XOR<ShareholderUpdateWithoutTohareTransferInput, ShareholderUncheckedUpdateWithoutTohareTransferInput>
  }

  export type ShareholderUpdateWithoutTohareTransferInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutShareholdersNestedInput
    shareFile?: ShareFileUpdateOneWithoutShareholdersNestedInput
    share?: ShareUpdateOneWithoutShareholdersNestedInput
    createdBy?: UserUpdateOneWithoutCreatedShareholdersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedShareholdersNestedInput
    shareholderLogs?: ShareholderLogUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUpdateManyWithoutFromShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateWithoutTohareTransferInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    shareholderLogs?: ShareholderLogUncheckedUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUncheckedUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUncheckedUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUncheckedUpdateManyWithoutFromShareholderNestedInput
  }

  export type UserRoleCreateManyUserInput = {
    roleId: string
  }

  export type MessageCreateManySenderInput = {
    id?: string
    receiverId: string
    netContent: string
    content: string
    messageType: string
    createdBy?: number | null
    checkedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
  }

  export type MessageCreateManyReceiverInput = {
    id?: string
    senderId: string
    netContent: string
    content: string
    messageType: string
    createdBy?: number | null
    checkedBy?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    status: boolean
  }

  export type UserCreateManyUpdatedByInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyCreatedByInput = {
    id?: string
    fullName: string
    email: string
    phoneNumber: string
    password: string
    username?: string | null
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
  }

  export type RoleCreateManyUpdatedByInput = {
    id?: string
    name: string
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleCreateManyCreatedByInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedById: string
    updatedAt?: Date | string
  }

  export type PermissionCreateManyUpdatedByInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById: string
  }

  export type PermissionCreateManyCreatedByInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById: string
  }

  export type ShareholderCreateManyUpdatedByInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type ShareholderCreateManyCreatedByInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
  }

  export type UserRoleUpdateWithoutUserInput = {
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutUserInput = {
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateManyWithoutUserInput = {
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type MessageUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    netContent?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    checkedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    receiver?: UserUpdateOneRequiredWithoutMessagesReceivedNestedInput
  }

  export type MessageUncheckedUpdateWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    netContent?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    checkedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUncheckedUpdateManyWithoutSenderInput = {
    id?: StringFieldUpdateOperationsInput | string
    receiverId?: StringFieldUpdateOperationsInput | string
    netContent?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    checkedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    netContent?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    checkedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
    sender?: UserUpdateOneRequiredWithoutMessagesSentNestedInput
  }

  export type MessageUncheckedUpdateWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    netContent?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    checkedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type MessageUncheckedUpdateManyWithoutReceiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    senderId?: StringFieldUpdateOperationsInput | string
    netContent?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    messageType?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    checkedBy?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedUsersNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: UserUpdateOneWithoutUpdatedUsersNestedInput
    roles?: UserRoleUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: UserRoleUncheckedUpdateManyWithoutUserNestedInput
    messagesSent?: MessageUncheckedUpdateManyWithoutSenderNestedInput
    messagesReceived?: MessageUncheckedUpdateManyWithoutReceiverNestedInput
    updatedUsers?: UserUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdUsers?: UserUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedRoles?: RoleUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdRoles?: RoleUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedPermissions?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdPermissions?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    updatedShareholders?: ShareholderUncheckedUpdateManyWithoutUpdatedByNestedInput
    createdShareholders?: ShareholderUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    fullName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    username?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedRolesNestedInput
    users?: UserRoleUpdateManyWithoutRoleNestedInput
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: UserUpdateOneWithoutUpdatedRolesNestedInput
    users?: UserRoleUpdateManyWithoutRoleNestedInput
    permissions?: RolePermissionUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserRoleUncheckedUpdateManyWithoutRoleNestedInput
    permissions?: RolePermissionUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatedPermissionsNestedInput
    roles?: RolePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
    roles?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type PermissionUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: UserUpdateOneWithoutUpdatedPermissionsNestedInput
    roles?: RolePermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
    roles?: RolePermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: StringFieldUpdateOperationsInput | string
  }

  export type ShareholderUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutShareholdersNestedInput
    shareFile?: ShareFileUpdateOneWithoutShareholdersNestedInput
    share?: ShareUpdateOneWithoutShareholdersNestedInput
    createdBy?: UserUpdateOneWithoutCreatedShareholdersNestedInput
    shareholderLogs?: ShareholderLogUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    shareholderLogs?: ShareholderLogUncheckedUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUncheckedUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUncheckedUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUncheckedUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUncheckedUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShareholderUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutShareholdersNestedInput
    shareFile?: ShareFileUpdateOneWithoutShareholdersNestedInput
    share?: ShareUpdateOneWithoutShareholdersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedShareholdersNestedInput
    shareholderLogs?: ShareholderLogUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    shareholderLogs?: ShareholderLogUncheckedUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUncheckedUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUncheckedUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUncheckedUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUncheckedUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserRoleCreateManyRoleInput = {
    userId: string
  }

  export type RolePermissionCreateManyRoleInput = {
    permissionId: string
  }

  export type UserRoleUpdateWithoutRoleInput = {
    user?: UserUpdateOneRequiredWithoutRolesNestedInput
  }

  export type UserRoleUncheckedUpdateWithoutRoleInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserRoleUncheckedUpdateManyWithoutRoleInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionUpdateWithoutRoleInput = {
    permission?: PermissionUpdateOneRequiredWithoutRolesNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutRoleInput = {
    permissionId?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionUncheckedUpdateManyWithoutRoleInput = {
    permissionId?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionCreateManyPermissionInput = {
    roleId: string
  }

  export type RolePermissionUpdateWithoutPermissionInput = {
    role?: RoleUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type RolePermissionUncheckedUpdateWithoutPermissionInput = {
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type RolePermissionUncheckedUpdateManyWithoutPermissionInput = {
    roleId?: StringFieldUpdateOperationsInput | string
  }

  export type ShareholderCreateManyAddressInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type ShareholderUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    shareFile?: ShareFileUpdateOneWithoutShareholdersNestedInput
    share?: ShareUpdateOneWithoutShareholdersNestedInput
    createdBy?: UserUpdateOneWithoutCreatedShareholdersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedShareholdersNestedInput
    shareholderLogs?: ShareholderLogUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    shareholderLogs?: ShareholderLogUncheckedUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUncheckedUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUncheckedUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUncheckedUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUncheckedUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateManyWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CityCreateManyRegionInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CityUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subcities?: SubcityUpdateManyWithoutCityNestedInput
  }

  export type CityUncheckedUpdateWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subcities?: SubcityUncheckedUpdateManyWithoutCityNestedInput
  }

  export type CityUncheckedUpdateManyWithoutRegionInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubcityCreateManyCityInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubcityUpdateWithoutCityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubcityUncheckedUpdateWithoutCityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubcityUncheckedUpdateManyWithoutCityInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ShareholderCreateManyShareFileInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    shareId?: string | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type ShareholderUpdateWithoutShareFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutShareholdersNestedInput
    share?: ShareUpdateOneWithoutShareholdersNestedInput
    createdBy?: UserUpdateOneWithoutCreatedShareholdersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedShareholdersNestedInput
    shareholderLogs?: ShareholderLogUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateWithoutShareFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    shareholderLogs?: ShareholderLogUncheckedUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUncheckedUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUncheckedUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUncheckedUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUncheckedUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateManyWithoutShareFileInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    shareId?: NullableStringFieldUpdateOperationsInput | string | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShareholderLogCreateManyShareholderInput = {
    id?: number
    mode: number
    columnName: string
    value: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareTransactionCreateManyShareholderInput = {
    id?: number
    shareholdingId: string
    paidAmount: string
    fycType: number
    paymentReason: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareholdingCreateManyShareholderInput = {
    id?: string
    serialNumber: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareTransferCreateManyFromShareholderInput = {
    id?: number
    toShareholderId: string
    placeOfTransferId: number
    transferType: number
    serialNumber: number
    fycType: number
    paymentReason: number
    transferDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareTransferCreateManyToShareholderInput = {
    id?: number
    fromShareholderId: string
    placeOfTransferId: number
    transferType: number
    serialNumber: number
    fycType: number
    paymentReason: number
    transferDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareholderLogUpdateWithoutShareholderInput = {
    mode?: IntFieldUpdateOperationsInput | number
    columnName?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareholderLogUncheckedUpdateWithoutShareholderInput = {
    id?: IntFieldUpdateOperationsInput | number
    mode?: IntFieldUpdateOperationsInput | number
    columnName?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareholderLogUncheckedUpdateManyWithoutShareholderInput = {
    id?: IntFieldUpdateOperationsInput | number
    mode?: IntFieldUpdateOperationsInput | number
    columnName?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareTransactionUpdateWithoutShareholderInput = {
    paidAmount?: StringFieldUpdateOperationsInput | string
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    shareholding?: ShareholdingUpdateOneRequiredWithoutShareTransactionNestedInput
  }

  export type ShareTransactionUncheckedUpdateWithoutShareholderInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareholdingId?: StringFieldUpdateOperationsInput | string
    paidAmount?: StringFieldUpdateOperationsInput | string
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareTransactionUncheckedUpdateManyWithoutShareholderInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareholdingId?: StringFieldUpdateOperationsInput | string
    paidAmount?: StringFieldUpdateOperationsInput | string
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareholdingUpdateWithoutShareholderInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    shareTransaction?: ShareTransactionUpdateManyWithoutShareholdingNestedInput
  }

  export type ShareholdingUncheckedUpdateWithoutShareholderInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    shareTransaction?: ShareTransactionUncheckedUpdateManyWithoutShareholdingNestedInput
  }

  export type ShareholdingUncheckedUpdateManyWithoutShareholderInput = {
    id?: StringFieldUpdateOperationsInput | string
    serialNumber?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareTransferUpdateWithoutFromShareholderInput = {
    placeOfTransferId?: IntFieldUpdateOperationsInput | number
    transferType?: IntFieldUpdateOperationsInput | number
    serialNumber?: IntFieldUpdateOperationsInput | number
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    toShareholder?: ShareholderUpdateOneRequiredWithoutTohareTransferNestedInput
  }

  export type ShareTransferUncheckedUpdateWithoutFromShareholderInput = {
    id?: IntFieldUpdateOperationsInput | number
    toShareholderId?: StringFieldUpdateOperationsInput | string
    placeOfTransferId?: IntFieldUpdateOperationsInput | number
    transferType?: IntFieldUpdateOperationsInput | number
    serialNumber?: IntFieldUpdateOperationsInput | number
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareTransferUncheckedUpdateManyWithoutFromShareholderInput = {
    id?: IntFieldUpdateOperationsInput | number
    toShareholderId?: StringFieldUpdateOperationsInput | string
    placeOfTransferId?: IntFieldUpdateOperationsInput | number
    transferType?: IntFieldUpdateOperationsInput | number
    serialNumber?: IntFieldUpdateOperationsInput | number
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareTransferUpdateWithoutToShareholderInput = {
    placeOfTransferId?: IntFieldUpdateOperationsInput | number
    transferType?: IntFieldUpdateOperationsInput | number
    serialNumber?: IntFieldUpdateOperationsInput | number
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    fromShareholder?: ShareholderUpdateOneRequiredWithoutFromshareTransferNestedInput
  }

  export type ShareTransferUncheckedUpdateWithoutToShareholderInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromShareholderId?: StringFieldUpdateOperationsInput | string
    placeOfTransferId?: IntFieldUpdateOperationsInput | number
    transferType?: IntFieldUpdateOperationsInput | number
    serialNumber?: IntFieldUpdateOperationsInput | number
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareTransferUncheckedUpdateManyWithoutToShareholderInput = {
    id?: IntFieldUpdateOperationsInput | number
    fromShareholderId?: StringFieldUpdateOperationsInput | string
    placeOfTransferId?: IntFieldUpdateOperationsInput | number
    transferType?: IntFieldUpdateOperationsInput | number
    serialNumber?: IntFieldUpdateOperationsInput | number
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    transferDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareholderCreateManyShareInput = {
    id?: string
    ShareholderID: string
    engName: string
    amhName: string
    Sex: string
    ForeignID: string
    PassportNumber: string
    dateOfNationalityChange: string
    NationalID?: string | null
    email: string
    Nationality?: string | null
    addressId: bigint | number
    AccountNumber: string
    TinNumber: string
    MinorShareholders?: Date | string | null
    MothersName: string
    Organisation: string
    NameOfLegalRepresentative: string
    LegalRepresentativePhone: string
    fileId?: bigint | number | null
    TelephoneNumber: string
    status: string
    shareholderTypeId: string
    registredAt?: Date | string | null
    mode?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type ShareholderUpdateWithoutShareInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutShareholdersNestedInput
    shareFile?: ShareFileUpdateOneWithoutShareholdersNestedInput
    createdBy?: UserUpdateOneWithoutCreatedShareholdersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdatedShareholdersNestedInput
    shareholderLogs?: ShareholderLogUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateWithoutShareInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    shareholderLogs?: ShareholderLogUncheckedUpdateManyWithoutShareholderNestedInput
    shareTransactions?: ShareTransactionUncheckedUpdateManyWithoutShareholderNestedInput
    shareholding?: ShareholdingUncheckedUpdateManyWithoutShareholderNestedInput
    fromshareTransfer?: ShareTransferUncheckedUpdateManyWithoutFromShareholderNestedInput
    tohareTransfer?: ShareTransferUncheckedUpdateManyWithoutToShareholderNestedInput
  }

  export type ShareholderUncheckedUpdateManyWithoutShareInput = {
    id?: StringFieldUpdateOperationsInput | string
    ShareholderID?: StringFieldUpdateOperationsInput | string
    engName?: StringFieldUpdateOperationsInput | string
    amhName?: StringFieldUpdateOperationsInput | string
    Sex?: StringFieldUpdateOperationsInput | string
    ForeignID?: StringFieldUpdateOperationsInput | string
    PassportNumber?: StringFieldUpdateOperationsInput | string
    dateOfNationalityChange?: StringFieldUpdateOperationsInput | string
    NationalID?: NullableStringFieldUpdateOperationsInput | string | null
    email?: StringFieldUpdateOperationsInput | string
    Nationality?: NullableStringFieldUpdateOperationsInput | string | null
    addressId?: BigIntFieldUpdateOperationsInput | bigint | number
    AccountNumber?: StringFieldUpdateOperationsInput | string
    TinNumber?: StringFieldUpdateOperationsInput | string
    MinorShareholders?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    MothersName?: StringFieldUpdateOperationsInput | string
    Organisation?: StringFieldUpdateOperationsInput | string
    NameOfLegalRepresentative?: StringFieldUpdateOperationsInput | string
    LegalRepresentativePhone?: StringFieldUpdateOperationsInput | string
    fileId?: NullableBigIntFieldUpdateOperationsInput | bigint | number | null
    TelephoneNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    shareholderTypeId?: StringFieldUpdateOperationsInput | string
    registredAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    mode?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ShareTransactionCreateManyShareholdingInput = {
    id?: number
    shareholderId: string
    paidAmount: string
    fycType: number
    paymentReason: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: number | null
    updatedBy?: number | null
  }

  export type ShareTransactionUpdateWithoutShareholdingInput = {
    paidAmount?: StringFieldUpdateOperationsInput | string
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
    shareholder?: ShareholderUpdateOneRequiredWithoutShareTransactionsNestedInput
  }

  export type ShareTransactionUncheckedUpdateWithoutShareholdingInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareholderId?: StringFieldUpdateOperationsInput | string
    paidAmount?: StringFieldUpdateOperationsInput | string
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ShareTransactionUncheckedUpdateManyWithoutShareholdingInput = {
    id?: IntFieldUpdateOperationsInput | number
    shareholderId?: StringFieldUpdateOperationsInput | string
    paidAmount?: StringFieldUpdateOperationsInput | string
    fycType?: IntFieldUpdateOperationsInput | number
    paymentReason?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableIntFieldUpdateOperationsInput | number | null
    updatedBy?: NullableIntFieldUpdateOperationsInput | number | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleCountOutputTypeDefaultArgs instead
     */
    export type RoleCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionCountOutputTypeDefaultArgs instead
     */
    export type PermissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AddressCountOutputTypeDefaultArgs instead
     */
    export type AddressCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddressCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegionCountOutputTypeDefaultArgs instead
     */
    export type RegionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CityCountOutputTypeDefaultArgs instead
     */
    export type CityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShareFileCountOutputTypeDefaultArgs instead
     */
    export type ShareFileCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShareFileCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShareholderCountOutputTypeDefaultArgs instead
     */
    export type ShareholderCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShareholderCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShareCountOutputTypeDefaultArgs instead
     */
    export type ShareCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShareCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShareholdingCountOutputTypeDefaultArgs instead
     */
    export type ShareholdingCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShareholdingCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleDefaultArgs instead
     */
    export type RoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserRoleDefaultArgs instead
     */
    export type UserRoleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserRoleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PermissionDefaultArgs instead
     */
    export type PermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RolePermissionDefaultArgs instead
     */
    export type RolePermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RolePermissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AddressDefaultArgs instead
     */
    export type AddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddressDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RegionDefaultArgs instead
     */
    export type RegionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RegionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CityDefaultArgs instead
     */
    export type CityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubcityDefaultArgs instead
     */
    export type SubcityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubcityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MessageDefaultArgs instead
     */
    export type MessageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MessageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShareFileDefaultArgs instead
     */
    export type ShareFileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShareFileDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShareholderDefaultArgs instead
     */
    export type ShareholderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShareholderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShareholderLogDefaultArgs instead
     */
    export type ShareholderLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShareholderLogDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShareDefaultArgs instead
     */
    export type ShareArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShareDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShareTransactionDefaultArgs instead
     */
    export type ShareTransactionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShareTransactionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShareholdingDefaultArgs instead
     */
    export type ShareholdingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShareholdingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ShareTransferDefaultArgs instead
     */
    export type ShareTransferArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ShareTransferDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SystemLogDefaultArgs instead
     */
    export type SystemLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SystemLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}